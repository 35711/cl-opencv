;;; This file was automatically generated by SWIG (http://www.swig.org).
;;; Version 2.0.2
;;;
;;; Do not make changes to this file unless you know what you are doing--modify
;;; the SWIG interface file instead.


;;;SWIG wrapper code starts here

(cl:defmacro defanonenum (&body enums)
   "Converts anonymous enums to defconstants."
  `(cl:progn ,@(cl:loop for value in enums
                        for index = 0 then (cl:1+ index)
                        when (cl:listp value) do (cl:setf index (cl:second value)
                                                          value (cl:first value))
                        collect `(cl:defconstant ,value ,index))))

(cl:eval-when (:compile-toplevel :load-toplevel)
  (cl:unless (cl:fboundp 'swig-lispify)
    (cl:defun swig-lispify (name flag cl:&optional (package cl:*package*))
      (cl:labels ((helper (lst last rest cl:&aux (c (cl:car lst)))
                    (cl:cond
                      ((cl:null lst)
                       rest)
                      ((cl:upper-case-p c)
                       (helper (cl:cdr lst) 'upper
                               (cl:case last
                                 ((lower digit) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:lower-case-p c)
                       (helper (cl:cdr lst) 'lower (cl:cons (cl:char-upcase c) rest)))
                      ((cl:digit-char-p c)
                       (helper (cl:cdr lst) 'digit 
                               (cl:case last
                                 ((upper lower) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:char-equal c #\_)
                       (helper (cl:cdr lst) '_ (cl:cons #\- rest)))
                      (cl:t
                       (cl:error "Invalid character: ~A" c)))))
        (cl:let ((fix (cl:case flag
                        ((constant enumvalue) "+")
                        (variable "*")
                        (cl:t ""))))
          (cl:intern
           (cl:concatenate
            'cl:string
            fix
            (cl:nreverse (helper (cl:concatenate 'cl:list name) cl:nil cl:nil))
            fix)
           package))))))

;;;SWIG wrapper code ends here


(cffi:defctype #.(swig-lispify "int64" 'typename) :pointer)

(cffi:defctype #.(swig-lispify "uint64" 'typename) :pointer)

(cffi:defctype #.(swig-lispify "uchar" 'typename) :unsigned-char)

(cffi:defctype #.(swig-lispify "ushort" 'typename) :unsigned-short)

(cffi:defctype #.(swig-lispify "schar" 'typename) :char)

(cffi:defctype #.(swig-lispify "CvArr" 'typename) :void)

(cffi:defcunion #.(swig-lispify "Cv32suf" 'classname)
	(#.(swig-lispify "i" 'slotname) :int)
	(#.(swig-lispify "u" 'slotname) :unsigned-int)
	(#.(swig-lispify "f" 'slotname) :float))

(cffi:defctype #.(swig-lispify "Cv32suf" 'typename) #.(swig-lispify "Cv32suf" 'classname))

(cffi:defcunion #.(swig-lispify "Cv64suf" 'classname)
	(#.(swig-lispify "i" 'slotname) :pointer)
	(#.(swig-lispify "u" 'slotname) :pointer)
	(#.(swig-lispify "f" 'slotname) :double))

(cffi:defctype #.(swig-lispify "Cv64suf" 'typename) #.(swig-lispify "Cv64suf" 'classname))

(cffi:defctype #.(swig-lispify "CVStatus" 'typename) :int)

(defanonenum 
	(#.(swig-lispify "CV_StsOk" 'enumvalue) #.0)
	(#.(swig-lispify "CV_StsBackTrace" 'enumvalue) #.-1)
	(#.(swig-lispify "CV_StsError" 'enumvalue) #.-2)
	(#.(swig-lispify "CV_StsInternal" 'enumvalue) #.-3)
	(#.(swig-lispify "CV_StsNoMem" 'enumvalue) #.-4)
	(#.(swig-lispify "CV_StsBadArg" 'enumvalue) #.-5)
	(#.(swig-lispify "CV_StsBadFunc" 'enumvalue) #.-6)
	(#.(swig-lispify "CV_StsNoConv" 'enumvalue) #.-7)
	(#.(swig-lispify "CV_StsAutoTrace" 'enumvalue) #.-8)
	(#.(swig-lispify "CV_HeaderIsNull" 'enumvalue) #.-9)
	(#.(swig-lispify "CV_BadImageSize" 'enumvalue) #.-10)
	(#.(swig-lispify "CV_BadOffset" 'enumvalue) #.-11)
	(#.(swig-lispify "CV_BadDataPtr" 'enumvalue) #.-12)
	(#.(swig-lispify "CV_BadStep" 'enumvalue) #.-13)
	(#.(swig-lispify "CV_BadModelOrChSeq" 'enumvalue) #.-14)
	(#.(swig-lispify "CV_BadNumChannels" 'enumvalue) #.-15)
	(#.(swig-lispify "CV_BadNumChannel1U" 'enumvalue) #.-16)
	(#.(swig-lispify "CV_BadDepth" 'enumvalue) #.-17)
	(#.(swig-lispify "CV_BadAlphaChannel" 'enumvalue) #.-18)
	(#.(swig-lispify "CV_BadOrder" 'enumvalue) #.-19)
	(#.(swig-lispify "CV_BadOrigin" 'enumvalue) #.-20)
	(#.(swig-lispify "CV_BadAlign" 'enumvalue) #.-21)
	(#.(swig-lispify "CV_BadCallBack" 'enumvalue) #.-22)
	(#.(swig-lispify "CV_BadTileSize" 'enumvalue) #.-23)
	(#.(swig-lispify "CV_BadCOI" 'enumvalue) #.-24)
	(#.(swig-lispify "CV_BadROISize" 'enumvalue) #.-25)
	(#.(swig-lispify "CV_MaskIsTiled" 'enumvalue) #.-26)
	(#.(swig-lispify "CV_StsNullPtr" 'enumvalue) #.-27)
	(#.(swig-lispify "CV_StsVecLengthErr" 'enumvalue) #.-28)
	(#.(swig-lispify "CV_StsFilterStructContentErr" 'enumvalue) #.-29)
	(#.(swig-lispify "CV_StsKernelStructContentErr" 'enumvalue) #.-30)
	(#.(swig-lispify "CV_StsFilterOffsetErr" 'enumvalue) #.-31)
	(#.(swig-lispify "CV_StsBadSize" 'enumvalue) #.-201)
	(#.(swig-lispify "CV_StsDivByZero" 'enumvalue) #.-202)
	(#.(swig-lispify "CV_StsInplaceNotSupported" 'enumvalue) #.-203)
	(#.(swig-lispify "CV_StsObjectNotFound" 'enumvalue) #.-204)
	(#.(swig-lispify "CV_StsUnmatchedFormats" 'enumvalue) #.-205)
	(#.(swig-lispify "CV_StsBadFlag" 'enumvalue) #.-206)
	(#.(swig-lispify "CV_StsBadPoint" 'enumvalue) #.-207)
	(#.(swig-lispify "CV_StsBadMask" 'enumvalue) #.-208)
	(#.(swig-lispify "CV_StsUnmatchedSizes" 'enumvalue) #.-209)
	(#.(swig-lispify "CV_StsUnsupportedFormat" 'enumvalue) #.-210)
	(#.(swig-lispify "CV_StsOutOfRange" 'enumvalue) #.-211)
	(#.(swig-lispify "CV_StsParseError" 'enumvalue) #.-212)
	(#.(swig-lispify "CV_StsNotImplemented" 'enumvalue) #.-213)
	(#.(swig-lispify "CV_StsBadMemBlock" 'enumvalue) #.-214)
	(#.(swig-lispify "CV_StsAssert" 'enumvalue) #.-215)
	(#.(swig-lispify "CV_GpuNotSupported" 'enumvalue) #.-216)
	(#.(swig-lispify "CV_GpuApiCallError" 'enumvalue) #.-217)
	(#.(swig-lispify "CV_GpuNppCallError" 'enumvalue) #.-218))

(cl:defconstant #.(swig-lispify "CV_PI" 'constant) 3.1415926535897932384626433832795d0)

(cl:defconstant #.(swig-lispify "CV_LOG2" 'constant) 0.69314718055994530941723212145818d0)

(cffi:defcfun ("cvRound" #.(swig-lispify "cvRound" 'function)) :int
  (value :double))

(cffi:defcfun ("cvFloor" #.(swig-lispify "cvFloor" 'function)) :int
  (value :double))

(cffi:defcfun ("cvCeil" #.(swig-lispify "cvCeil" 'function)) :int
  (value :double))

(cffi:defcfun ("cvIsNaN" #.(swig-lispify "cvIsNaN" 'function)) :int
  (value :double))

(cffi:defcfun ("cvIsInf" #.(swig-lispify "cvIsInf" 'function)) :int
  (value :double))

(cffi:defctype #.(swig-lispify "CvRNG" 'typename) :pointer)

(cffi:defcfun ("cvRNG" #.(swig-lispify "cvRNG" 'function)) :pointer
  (seed :pointer))

(cffi:defcfun ("cvRandInt" #.(swig-lispify "cvRandInt" 'function)) :unsigned-int
  (rng :pointer))

(cffi:defcfun ("cvRandReal" #.(swig-lispify "cvRandReal" 'function)) :double
  (rng :pointer))

(cl:defconstant #.(swig-lispify "IPL_DEPTH_SIGN" 'constant) #x80000000)

(cl:defconstant #.(swig-lispify "IPL_DEPTH_1U" 'constant) 1)

(cl:defconstant #.(swig-lispify "IPL_DEPTH_8U" 'constant) 8)

(cl:defconstant #.(swig-lispify "IPL_DEPTH_16U" 'constant) 16)

(cl:defconstant #.(swig-lispify "IPL_DEPTH_32F" 'constant) 32)

(cl:defconstant #.(swig-lispify "IPL_DEPTH_8S" 'constant) (cl:logior #x80000000 8))

(cl:defconstant #.(swig-lispify "IPL_DEPTH_16S" 'constant) (cl:logior #x80000000 16))

(cl:defconstant #.(swig-lispify "IPL_DEPTH_32S" 'constant) (cl:logior #x80000000 32))

(cl:defconstant #.(swig-lispify "IPL_DATA_ORDER_PIXEL" 'constant) 0)

(cl:defconstant #.(swig-lispify "IPL_DATA_ORDER_PLANE" 'constant) 1)

(cl:defconstant #.(swig-lispify "IPL_ORIGIN_TL" 'constant) 0)

(cl:defconstant #.(swig-lispify "IPL_ORIGIN_BL" 'constant) 1)

(cl:defconstant #.(swig-lispify "IPL_ALIGN_4BYTES" 'constant) 4)

(cl:defconstant #.(swig-lispify "IPL_ALIGN_8BYTES" 'constant) 8)

(cl:defconstant #.(swig-lispify "IPL_ALIGN_16BYTES" 'constant) 16)

(cl:defconstant #.(swig-lispify "IPL_ALIGN_32BYTES" 'constant) 32)

(cl:defconstant #.(swig-lispify "IPL_ALIGN_DWORD" 'constant) 4)

(cl:defconstant #.(swig-lispify "IPL_ALIGN_QWORD" 'constant) 8)

(cl:defconstant #.(swig-lispify "IPL_BORDER_CONSTANT" 'constant) 0)

(cl:defconstant #.(swig-lispify "IPL_BORDER_REPLICATE" 'constant) 1)

(cl:defconstant #.(swig-lispify "IPL_BORDER_REFLECT" 'constant) 2)

(cl:defconstant #.(swig-lispify "IPL_BORDER_WRAP" 'constant) 3)

(cffi:defcstruct #.(swig-lispify "IplImage" 'classname)
	(#.(swig-lispify "nSize" 'slotname) :int)
	(#.(swig-lispify "ID" 'slotname) :int)
	(#.(swig-lispify "nChannels" 'slotname) :int)
	(#.(swig-lispify "alphaChannel" 'slotname) :int)
	(#.(swig-lispify "depth" 'slotname) :int)
	(#.(swig-lispify "colorModel" 'slotname) :pointer)
	(#.(swig-lispify "channelSeq" 'slotname) :pointer)
	(#.(swig-lispify "dataOrder" 'slotname) :int)
	(#.(swig-lispify "origin" 'slotname) :int)
	(#.(swig-lispify "align" 'slotname) :int)
	(#.(swig-lispify "width" 'slotname) :int)
	(#.(swig-lispify "height" 'slotname) :int)
	(#.(swig-lispify "roi" 'slotname) :pointer)
	(#.(swig-lispify "maskROI" 'slotname) :pointer)
	(#.(swig-lispify "imageId" 'slotname) :pointer)
	(#.(swig-lispify "tileInfo" 'slotname) :pointer)
	(#.(swig-lispify "imageSize" 'slotname) :int)
	(#.(swig-lispify "imageData" 'slotname) :string)
	(#.(swig-lispify "widthStep" 'slotname) :int)
	(#.(swig-lispify "BorderMode" 'slotname) :pointer)
	(#.(swig-lispify "BorderConst" 'slotname) :pointer)
	(#.(swig-lispify "imageDataOrigin" 'slotname) :string))

(cffi:defctype #.(swig-lispify "IplImage" 'typename) :pointer)

(cffi:defctype #.(swig-lispify "IplTileInfo" 'typename) :pointer)

(cffi:defcstruct #.(swig-lispify "IplROI" 'classname)
	(#.(swig-lispify "coi" 'slotname) :int)
	(#.(swig-lispify "xOffset" 'slotname) :int)
	(#.(swig-lispify "yOffset" 'slotname) :int)
	(#.(swig-lispify "width" 'slotname) :int)
	(#.(swig-lispify "height" 'slotname) :int))

(cffi:defctype #.(swig-lispify "IplROI" 'typename) :pointer)

(cffi:defcstruct #.(swig-lispify "IplConvKernel" 'classname)
	(#.(swig-lispify "nCols" 'slotname) :int)
	(#.(swig-lispify "nRows" 'slotname) :int)
	(#.(swig-lispify "anchorX" 'slotname) :int)
	(#.(swig-lispify "anchorY" 'slotname) :int)
	(#.(swig-lispify "values" 'slotname) :pointer)
	(#.(swig-lispify "nShiftR" 'slotname) :int))

(cffi:defctype #.(swig-lispify "IplConvKernel" 'typename) :pointer)

(cffi:defcstruct #.(swig-lispify "IplConvKernelFP" 'classname)
	(#.(swig-lispify "nCols" 'slotname) :int)
	(#.(swig-lispify "nRows" 'slotname) :int)
	(#.(swig-lispify "anchorX" 'slotname) :int)
	(#.(swig-lispify "anchorY" 'slotname) :int)
	(#.(swig-lispify "values" 'slotname) :pointer))

(cffi:defctype #.(swig-lispify "IplConvKernelFP" 'typename) :pointer)

(cl:defconstant #.(swig-lispify "IPL_IMAGE_HEADER" 'constant) 1)

(cl:defconstant #.(swig-lispify "IPL_IMAGE_DATA" 'constant) 2)

(cl:defconstant #.(swig-lispify "IPL_IMAGE_ROI" 'constant) 4)

(cl:defconstant #.(swig-lispify "IPL_BORDER_REFLECT_101" 'constant) 4)

(cl:defconstant #.(swig-lispify "IPL_BORDER_TRANSPARENT" 'constant) 5)

(cl:defconstant #.(swig-lispify "CV_TYPE_NAME_IMAGE" 'constant) (cl:- "opencv" "image"))

(cl:defconstant #.(swig-lispify "IPL_DEPTH_64F" 'constant) 64)

(cl:defconstant #.(swig-lispify "CV_CN_MAX" 'constant) 512)

(cl:defconstant #.(swig-lispify "CV_CN_SHIFT" 'constant) 3)

(cl:defconstant #.(swig-lispify "CV_DEPTH_MAX" 'constant) (cl:ash 1 3))

(cl:defconstant #.(swig-lispify "CV_8U" 'constant) 0)

(cl:defconstant #.(swig-lispify "CV_8S" 'constant) 1)

(cl:defconstant #.(swig-lispify "CV_16U" 'constant) 2)

(cl:defconstant #.(swig-lispify "CV_16S" 'constant) 3)

(cl:defconstant #.(swig-lispify "CV_32S" 'constant) 4)

(cl:defconstant #.(swig-lispify "CV_32F" 'constant) 5)

(cl:defconstant #.(swig-lispify "CV_64F" 'constant) 6)

(cl:defconstant #.(swig-lispify "CV_USRTYPE1" 'constant) 7)

(cl:defconstant #.(swig-lispify "CV_MAT_DEPTH_MASK" 'constant) (cl:- (cl:ash 1 3) 1))

(cl:defconstant #.(swig-lispify "CV_8UC1" 'constant) (cl:logand (0 (cl:+ (cl:- (cl:ash 1 3) 1)) (cl:- ((1 1) << 3))))

(cl:defconstant #.(swig-lispify "CV_8UC2" 'constant) (cl:logand (0 (cl:+ (cl:- (cl:ash 1 3) 1)) (cl:- ((2 1) << 3))))

(cl:defconstant #.(swig-lispify "CV_8UC3" 'constant) (cl:logand (0 (cl:+ (cl:- (cl:ash 1 3) 1)) (cl:- ((3 1) << 3))))

(cl:defconstant #.(swig-lispify "CV_8UC4" 'constant) (cl:logand (0 (cl:+ (cl:- (cl:ash 1 3) 1)) (cl:- ((4 1) << 3))))

(cl:defconstant #.(swig-lispify "CV_8SC1" 'constant) (cl:logand (1 (cl:+ (cl:- (cl:ash 1 3) 1)) (cl:- ((1 1) << 3))))

(cl:defconstant #.(swig-lispify "CV_8SC2" 'constant) (cl:logand (1 (cl:+ (cl:- (cl:ash 1 3) 1)) (cl:- ((2 1) << 3))))

(cl:defconstant #.(swig-lispify "CV_8SC3" 'constant) (cl:logand (1 (cl:+ (cl:- (cl:ash 1 3) 1)) (cl:- ((3 1) << 3))))

(cl:defconstant #.(swig-lispify "CV_8SC4" 'constant) (cl:logand (1 (cl:+ (cl:- (cl:ash 1 3) 1)) (cl:- ((4 1) << 3))))

(cl:defconstant #.(swig-lispify "CV_16UC1" 'constant) (cl:logand (2 (cl:+ (cl:- (cl:ash 1 3) 1)) (cl:- ((1 1) << 3))))

(cl:defconstant #.(swig-lispify "CV_16UC2" 'constant) (cl:logand (2 (cl:+ (cl:- (cl:ash 1 3) 1)) (cl:- ((2 1) << 3))))

(cl:defconstant #.(swig-lispify "CV_16UC3" 'constant) (cl:logand (2 (cl:+ (cl:- (cl:ash 1 3) 1)) (cl:- ((3 1) << 3))))

(cl:defconstant #.(swig-lispify "CV_16UC4" 'constant) (cl:logand (2 (cl:+ (cl:- (cl:ash 1 3) 1)) (cl:- ((4 1) << 3))))

(cl:defconstant #.(swig-lispify "CV_16SC1" 'constant) (cl:logand (3 (cl:+ (cl:- (cl:ash 1 3) 1)) (cl:- ((1 1) << 3))))

(cl:defconstant #.(swig-lispify "CV_16SC2" 'constant) (cl:logand (3 (cl:+ (cl:- (cl:ash 1 3) 1)) (cl:- ((2 1) << 3))))

(cl:defconstant #.(swig-lispify "CV_16SC3" 'constant) (cl:logand (3 (cl:+ (cl:- (cl:ash 1 3) 1)) (cl:- ((3 1) << 3))))

(cl:defconstant #.(swig-lispify "CV_16SC4" 'constant) (cl:logand (3 (cl:+ (cl:- (cl:ash 1 3) 1)) (cl:- ((4 1) << 3))))

(cl:defconstant #.(swig-lispify "CV_32SC1" 'constant) (cl:logand (4 (cl:+ (cl:- (cl:ash 1 3) 1)) (cl:- ((1 1) << 3))))

(cl:defconstant #.(swig-lispify "CV_32SC2" 'constant) (cl:logand (4 (cl:+ (cl:- (cl:ash 1 3) 1)) (cl:- ((2 1) << 3))))

(cl:defconstant #.(swig-lispify "CV_32SC3" 'constant) (cl:logand (4 (cl:+ (cl:- (cl:ash 1 3) 1)) (cl:- ((3 1) << 3))))

(cl:defconstant #.(swig-lispify "CV_32SC4" 'constant) (cl:logand (4 (cl:+ (cl:- (cl:ash 1 3) 1)) (cl:- ((4 1) << 3))))

(cl:defconstant #.(swig-lispify "CV_32FC1" 'constant) (cl:logand (5 (cl:+ (cl:- (cl:ash 1 3) 1)) (cl:- ((1 1) << 3))))

(cl:defconstant #.(swig-lispify "CV_32FC2" 'constant) (cl:logand (5 (cl:+ (cl:- (cl:ash 1 3) 1)) (cl:- ((2 1) << 3))))

(cl:defconstant #.(swig-lispify "CV_32FC3" 'constant) (cl:logand (5 (cl:+ (cl:- (cl:ash 1 3) 1)) (cl:- ((3 1) << 3))))

(cl:defconstant #.(swig-lispify "CV_32FC4" 'constant) (cl:logand (5 (cl:+ (cl:- (cl:ash 1 3) 1)) (cl:- ((4 1) << 3))))

(cl:defconstant #.(swig-lispify "CV_64FC1" 'constant) (cl:logand (6 (cl:+ (cl:- (cl:ash 1 3) 1)) (cl:- ((1 1) << 3))))

(cl:defconstant #.(swig-lispify "CV_64FC2" 'constant) (cl:logand (6 (cl:+ (cl:- (cl:ash 1 3) 1)) (cl:- ((2 1) << 3))))

(cl:defconstant #.(swig-lispify "CV_64FC3" 'constant) (cl:logand (6 (cl:+ (cl:- (cl:ash 1 3) 1)) (cl:- ((3 1) << 3))))

(cl:defconstant #.(swig-lispify "CV_64FC4" 'constant) (cl:logand (6 (cl:+ (cl:- (cl:ash 1 3) 1)) (cl:- ((4 1) << 3))))

(cl:defconstant #.(swig-lispify "CV_AUTO_STEP" 'constant) #x7fffffff)

(cl:defconstant #.(swig-lispify "CV_MAT_CN_MASK" 'constant) (cl:- (512 1) << 3))

(cl:defconstant #.(swig-lispify "CV_MAT_TYPE_MASK" 'constant) (cl:* (cl:ash 1 3) (cl:- 512 1)))

(cl:defconstant #.(swig-lispify "CV_MAT_CONT_FLAG_SHIFT" 'constant) 14)

(cl:defconstant #.(swig-lispify "CV_MAT_CONT_FLAG" 'constant) (cl:ash 1 14))

(cl:defconstant #.(swig-lispify "CV_SUBMAT_FLAG_SHIFT" 'constant) 15)

(cl:defconstant #.(swig-lispify "CV_SUBMAT_FLAG" 'constant) (cl:ash 1 15))

(cl:defconstant #.(swig-lispify "CV_MAGIC_MASK" 'constant) #xFFFF0000)

(cl:defconstant #.(swig-lispify "CV_MAT_MAGIC_VAL" 'constant) #x42420000)

(cl:defconstant #.(swig-lispify "CV_TYPE_NAME_MAT" 'constant) (cl:- "opencv" "matrix"))

(cffi:defcstruct #.(swig-lispify "CvMat" 'classname)
	(#.(swig-lispify "type" 'slotname) :int)
	(#.(swig-lispify "step" 'slotname) :int)
	(#.(swig-lispify "refcount" 'slotname) :pointer)
	(#.(swig-lispify "hdr_refcount" 'slotname) :int)
	(#.(swig-lispify "rows" 'slotname) :int)
	(#.(swig-lispify "cols" 'slotname) :int)
	(#.(swig-lispify "data" 'slotname) :pointer))

(cffi:defctype #.(swig-lispify "CvMat" 'typename) #.(swig-lispify "CvMat" 'classname))

(cffi:defcunion #.(swig-lispify "CvMat_data" 'classname)
	(#.(swig-lispify "ptr" 'slotname) :pointer)
	(#.(swig-lispify "s" 'slotname) :pointer)
	(#.(swig-lispify "i" 'slotname) :pointer)
	(#.(swig-lispify "fl" 'slotname) :pointer)
	(#.(swig-lispify "db" 'slotname) :pointer))

(cffi:defcfun ("cvMat" #.(swig-lispify "cvMat" 'function)) #.(swig-lispify "CvMat" 'classname)
  (rows :int)
  (cols :int)
  (type :int)
  (data :pointer))

(cffi:defcfun ("cvmGet" #.(swig-lispify "cvmGet" 'function)) :double
  (mat :pointer)
  (row :int)
  (col :int))

(cffi:defcfun ("cvmSet" #.(swig-lispify "cvmSet" 'function)) :void
  (mat :pointer)
  (row :int)
  (col :int)
  (value :double))

(cffi:defcfun ("cvIplDepth" #.(swig-lispify "cvIplDepth" 'function)) :int
  (type :int))

(cl:defconstant #.(swig-lispify "CV_MATND_MAGIC_VAL" 'constant) #x42430000)

(cl:defconstant #.(swig-lispify "CV_TYPE_NAME_MATND" 'constant) (cl:- "opencv" "nd" "matrix"))

(cl:defconstant #.(swig-lispify "CV_MAX_DIM" 'constant) 32)

(cl:defconstant #.(swig-lispify "CV_MAX_DIM_HEAP" 'constant) (cl:ash 1 16))

(cffi:defcstruct #.(swig-lispify "CvMatND" 'classname)
	(#.(swig-lispify "type" 'slotname) :int)
	(#.(swig-lispify "dims" 'slotname) :int)
	(#.(swig-lispify "refcount" 'slotname) :pointer)
	(#.(swig-lispify "hdr_refcount" 'slotname) :int)
	(#.(swig-lispify "data" 'slotname) :pointer)
	(#.(swig-lispify "dim" 'slotname) :pointer))

(cffi:defctype #.(swig-lispify "CvMatND" 'typename) #.(swig-lispify "CvMatND" 'classname))

(cffi:defcstruct #.(swig-lispify "CvMatND_dim" 'classname)
	(#.(swig-lispify "size" 'slotname) :int)
	(#.(swig-lispify "step" 'slotname) :int))

(cffi:defcunion #.(swig-lispify "CvMatND_data" 'classname)
	(#.(swig-lispify "ptr" 'slotname) :pointer)
	(#.(swig-lispify "fl" 'slotname) :pointer)
	(#.(swig-lispify "db" 'slotname) :pointer)
	(#.(swig-lispify "i" 'slotname) :pointer)
	(#.(swig-lispify "s" 'slotname) :pointer))

(cl:defconstant #.(swig-lispify "CV_SPARSE_MAT_MAGIC_VAL" 'constant) #x42440000)

(cl:defconstant #.(swig-lispify "CV_TYPE_NAME_SPARSE_MAT" 'constant) (cl:- "opencv" "sparse" "matrix"))

(cffi:defcstruct #.(swig-lispify "CvSparseMat" 'classname)
	(#.(swig-lispify "type" 'slotname) :int)
	(#.(swig-lispify "dims" 'slotname) :int)
	(#.(swig-lispify "refcount" 'slotname) :pointer)
	(#.(swig-lispify "hdr_refcount" 'slotname) :int)
	(#.(swig-lispify "heap" 'slotname) :pointer)
	(#.(swig-lispify "hashtable" 'slotname) :pointer)
	(#.(swig-lispify "hashsize" 'slotname) :int)
	(#.(swig-lispify "valoffset" 'slotname) :int)
	(#.(swig-lispify "idxoffset" 'slotname) :int)
	(#.(swig-lispify "size" 'slotname) :pointer))

(cffi:defctype #.(swig-lispify "CvSparseMat" 'typename) #.(swig-lispify "CvSparseMat" 'classname))

(cffi:defcstruct #.(swig-lispify "CvSparseNode" 'classname)
	(#.(swig-lispify "hashval" 'slotname) :unsigned-int)
	(#.(swig-lispify "next" 'slotname) :pointer))

(cffi:defctype #.(swig-lispify "CvSparseNode" 'typename) #.(swig-lispify "CvSparseNode" 'classname))

(cffi:defcstruct #.(swig-lispify "CvSparseMatIterator" 'classname)
	(#.(swig-lispify "mat" 'slotname) :pointer)
	(#.(swig-lispify "node" 'slotname) :pointer)
	(#.(swig-lispify "curidx" 'slotname) :int))

(cffi:defctype #.(swig-lispify "CvSparseMatIterator" 'typename) #.(swig-lispify "CvSparseMatIterator" 'classname))

(cffi:defctype #.(swig-lispify "CvHistType" 'typename) :int)

(cl:defconstant #.(swig-lispify "CV_HIST_MAGIC_VAL" 'constant) #x42450000)

(cl:defconstant #.(swig-lispify "CV_HIST_UNIFORM_FLAG" 'constant) (cl:ash 1 10))

(cl:defconstant #.(swig-lispify "CV_HIST_RANGES_FLAG" 'constant) (cl:ash 1 11))

(cl:defconstant #.(swig-lispify "CV_HIST_ARRAY" 'constant) 0)

(cl:defconstant #.(swig-lispify "CV_HIST_SPARSE" 'constant) 1)

(cl:defconstant #.(swig-lispify "CV_HIST_TREE" 'constant) 1)

(cl:defconstant #.(swig-lispify "CV_HIST_UNIFORM" 'constant) 1)

(cffi:defcstruct #.(swig-lispify "CvHistogram" 'classname)
	(#.(swig-lispify "type" 'slotname) :int)
	(#.(swig-lispify "bins" 'slotname) :pointer)
	(#.(swig-lispify "thresh" 'slotname) :pointer)
	(#.(swig-lispify "thresh2" 'slotname) :pointer)
	(#.(swig-lispify "mat" 'slotname) #.(swig-lispify "CvMatND" 'classname)))

(cffi:defctype #.(swig-lispify "CvHistogram" 'typename) #.(swig-lispify "CvHistogram" 'classname))

(cffi:defcstruct #.(swig-lispify "CvRect" 'classname)
	(#.(swig-lispify "x" 'slotname) :int)
	(#.(swig-lispify "y" 'slotname) :int)
	(#.(swig-lispify "width" 'slotname) :int)
	(#.(swig-lispify "height" 'slotname) :int))

(cffi:defctype #.(swig-lispify "CvRect" 'typename) #.(swig-lispify "CvRect" 'classname))

(cffi:defcfun ("cvRect" #.(swig-lispify "cvRect" 'function)) #.(swig-lispify "CvRect" 'classname)
  (x :int)
  (y :int)
  (width :int)
  (height :int))

(cffi:defcfun ("cvRectToROI" #.(swig-lispify "cvRectToROI" 'function)) #.(swig-lispify "IplROI" 'classname)
  (rect #.(swig-lispify "CvRect" 'classname))
  (coi :int))

(cffi:defcfun ("cvROIToRect" #.(swig-lispify "cvROIToRect" 'function)) #.(swig-lispify "CvRect" 'classname)
  (roi #.(swig-lispify "IplROI" 'classname)))

(cl:defconstant #.(swig-lispify "CV_TERMCRIT_ITER" 'constant) 1)

(cl:defconstant #.(swig-lispify "CV_TERMCRIT_NUMBER" 'constant) 1)

(cl:defconstant #.(swig-lispify "CV_TERMCRIT_EPS" 'constant) 2)

(cffi:defcstruct #.(swig-lispify "CvTermCriteria" 'classname)
	(#.(swig-lispify "type" 'slotname) :int)
	(#.(swig-lispify "max_iter" 'slotname) :int)
	(#.(swig-lispify "epsilon" 'slotname) :double))

(cffi:defctype #.(swig-lispify "CvTermCriteria" 'typename) #.(swig-lispify "CvTermCriteria" 'classname))

(cffi:defcfun ("cvTermCriteria" #.(swig-lispify "cvTermCriteria" 'function)) #.(swig-lispify "CvTermCriteria" 'classname)
  (type :int)
  (max_iter :int)
  (epsilon :double))

(cffi:defcstruct #.(swig-lispify "CvPoint" 'classname)
	(#.(swig-lispify "x" 'slotname) :int)
	(#.(swig-lispify "y" 'slotname) :int))

(cffi:defctype #.(swig-lispify "CvPoint" 'typename) #.(swig-lispify "CvPoint" 'classname))

(cffi:defcfun ("cvPoint" #.(swig-lispify "cvPoint" 'function)) #.(swig-lispify "CvPoint" 'classname)
  (x :int)
  (y :int))

(cffi:defcstruct #.(swig-lispify "CvPoint2D32f" 'classname)
	(#.(swig-lispify "x" 'slotname) :float)
	(#.(swig-lispify "y" 'slotname) :float))

(cffi:defctype #.(swig-lispify "CvPoint2D32f" 'typename) #.(swig-lispify "CvPoint2D32f" 'classname))

(cffi:defcfun ("cvPoint2D32f" #.(swig-lispify "cvPoint2D32f" 'function)) #.(swig-lispify "CvPoint2D32f" 'classname)
  (x :double)
  (y :double))

(cffi:defcfun ("cvPointTo32f" #.(swig-lispify "cvPointTo32f" 'function)) #.(swig-lispify "CvPoint2D32f" 'classname)
  (point #.(swig-lispify "CvPoint" 'classname)))

(cffi:defcfun ("cvPointFrom32f" #.(swig-lispify "cvPointFrom32f" 'function)) #.(swig-lispify "CvPoint" 'classname)
  (point #.(swig-lispify "CvPoint2D32f" 'classname)))

(cffi:defcstruct #.(swig-lispify "CvPoint3D32f" 'classname)
	(#.(swig-lispify "x" 'slotname) :float)
	(#.(swig-lispify "y" 'slotname) :float)
	(#.(swig-lispify "z" 'slotname) :float))

(cffi:defctype #.(swig-lispify "CvPoint3D32f" 'typename) #.(swig-lispify "CvPoint3D32f" 'classname))

(cffi:defcfun ("cvPoint3D32f" #.(swig-lispify "cvPoint3D32f" 'function)) #.(swig-lispify "CvPoint3D32f" 'classname)
  (x :double)
  (y :double)
  (z :double))

(cffi:defcstruct #.(swig-lispify "CvPoint2D64f" 'classname)
	(#.(swig-lispify "x" 'slotname) :double)
	(#.(swig-lispify "y" 'slotname) :double))

(cffi:defctype #.(swig-lispify "CvPoint2D64f" 'typename) #.(swig-lispify "CvPoint2D64f" 'classname))

(cffi:defcfun ("cvPoint2D64f" #.(swig-lispify "cvPoint2D64f" 'function)) #.(swig-lispify "CvPoint2D64f" 'classname)
  (x :double)
  (y :double))

(cffi:defcstruct #.(swig-lispify "CvPoint3D64f" 'classname)
	(#.(swig-lispify "x" 'slotname) :double)
	(#.(swig-lispify "y" 'slotname) :double)
	(#.(swig-lispify "z" 'slotname) :double))

(cffi:defctype #.(swig-lispify "CvPoint3D64f" 'typename) #.(swig-lispify "CvPoint3D64f" 'classname))

(cffi:defcfun ("cvPoint3D64f" #.(swig-lispify "cvPoint3D64f" 'function)) #.(swig-lispify "CvPoint3D64f" 'classname)
  (x :double)
  (y :double)
  (z :double))

(cffi:defcstruct #.(swig-lispify "CvSize" 'classname)
	(#.(swig-lispify "width" 'slotname) :int)
	(#.(swig-lispify "height" 'slotname) :int))

(cffi:defcfun ("cvSize" #.(swig-lispify "cvSize" 'function)) #.(swig-lispify "CvSize" 'classname)
  (width :int)
  (height :int))

(cffi:defcstruct #.(swig-lispify "CvSize2D32f" 'classname)
	(#.(swig-lispify "width" 'slotname) :float)
	(#.(swig-lispify "height" 'slotname) :float))

(cffi:defctype #.(swig-lispify "CvSize2D32f" 'typename) #.(swig-lispify "CvSize2D32f" 'classname))

(cffi:defcfun ("cvSize2D32f" #.(swig-lispify "cvSize2D32f" 'function)) #.(swig-lispify "CvSize2D32f" 'classname)
  (width :double)
  (height :double))

(cffi:defcstruct #.(swig-lispify "CvBox2D" 'classname)
	(#.(swig-lispify "center" 'slotname) #.(swig-lispify "CvPoint2D32f" 'classname))
	(#.(swig-lispify "size" 'slotname) #.(swig-lispify "CvSize2D32f" 'classname))
	(#.(swig-lispify "angle" 'slotname) :float))

(cffi:defctype #.(swig-lispify "CvBox2D" 'typename) #.(swig-lispify "CvBox2D" 'classname))

(cffi:defcstruct #.(swig-lispify "CvLineIterator" 'classname)
	(#.(swig-lispify "ptr" 'slotname) :pointer)
	(#.(swig-lispify "err" 'slotname) :int)
	(#.(swig-lispify "plus_delta" 'slotname) :int)
	(#.(swig-lispify "minus_delta" 'slotname) :int)
	(#.(swig-lispify "plus_step" 'slotname) :int)
	(#.(swig-lispify "minus_step" 'slotname) :int))

(cffi:defctype #.(swig-lispify "CvLineIterator" 'typename) #.(swig-lispify "CvLineIterator" 'classname))

(cffi:defcstruct #.(swig-lispify "CvSlice" 'classname)
	(#.(swig-lispify "start_index" 'slotname) :int)
	(#.(swig-lispify "end_index" 'slotname) :int))

(cffi:defctype #.(swig-lispify "CvSlice" 'typename) #.(swig-lispify "CvSlice" 'classname))

(cffi:defcfun ("cvSlice" #.(swig-lispify "cvSlice" 'function)) #.(swig-lispify "CvSlice" 'classname)
  (start :int)
  (end :int))

(cl:defconstant #.(swig-lispify "CV_WHOLE_SEQ_END_INDEX" 'constant) #x3fffffff)

(cffi:defcstruct #.(swig-lispify "CvScalar" 'classname)
	(#.(swig-lispify "val" 'slotname) :pointer))

(cffi:defctype #.(swig-lispify "CvScalar" 'typename) #.(swig-lispify "CvScalar" 'classname))

(cffi:defcfun ("cvScalar" #.(swig-lispify "cvScalar" 'function)) #.(swig-lispify "CvScalar" 'classname)
  (val0 :double)
  (val1 :double)
  (val2 :double)
  (val3 :double))

(cffi:defcfun ("cvRealScalar" #.(swig-lispify "cvRealScalar" 'function)) #.(swig-lispify "CvScalar" 'classname)
  (val0 :double))

(cffi:defcfun ("cvScalarAll" #.(swig-lispify "cvScalarAll" 'function)) #.(swig-lispify "CvScalar" 'classname)
  (val0123 :double))

(cffi:defcstruct #.(swig-lispify "CvMemBlock" 'classname)
	(#.(swig-lispify "prev" 'slotname) :pointer)
	(#.(swig-lispify "next" 'slotname) :pointer))

(cffi:defctype #.(swig-lispify "CvMemBlock" 'typename) #.(swig-lispify "CvMemBlock" 'classname))

(cl:defconstant #.(swig-lispify "CV_STORAGE_MAGIC_VAL" 'constant) #x42890000)

(cffi:defcstruct #.(swig-lispify "CvMemStorage" 'classname)
	(#.(swig-lispify "signature" 'slotname) :int)
	(#.(swig-lispify "bottom" 'slotname) :pointer)
	(#.(swig-lispify "top" 'slotname) :pointer)
	(#.(swig-lispify "parent" 'slotname) :pointer)
	(#.(swig-lispify "block_size" 'slotname) :int)
	(#.(swig-lispify "free_space" 'slotname) :int))

(cffi:defctype #.(swig-lispify "CvMemStorage" 'typename) #.(swig-lispify "CvMemStorage" 'classname))

(cffi:defcstruct #.(swig-lispify "CvMemStoragePos" 'classname)
	(#.(swig-lispify "top" 'slotname) :pointer)
	(#.(swig-lispify "free_space" 'slotname) :int))

(cffi:defctype #.(swig-lispify "CvMemStoragePos" 'typename) #.(swig-lispify "CvMemStoragePos" 'classname))

(cffi:defcstruct #.(swig-lispify "CvSeqBlock" 'classname)
	(#.(swig-lispify "prev" 'slotname) :pointer)
	(#.(swig-lispify "next" 'slotname) :pointer)
	(#.(swig-lispify "start_index" 'slotname) :int)
	(#.(swig-lispify "count" 'slotname) :int)
	(#.(swig-lispify "data" 'slotname) :pointer))

(cffi:defctype #.(swig-lispify "CvSeqBlock" 'typename) #.(swig-lispify "CvSeqBlock" 'classname))

(cffi:defcstruct #.(swig-lispify "CvSeq" 'classname)
	(#.(swig-lispify "flags" 'slotname) :int)
	(#.(swig-lispify "header_size" 'slotname) :int)
	(#.(swig-lispify "h_prev" 'slotname) :pointer)
	(#.(swig-lispify "h_next" 'slotname) :pointer)
	(#.(swig-lispify "v_prev" 'slotname) :pointer)
	(#.(swig-lispify "v_next" 'slotname) :pointer)
	(#.(swig-lispify "total" 'slotname) :int)
	(#.(swig-lispify "elem_size" 'slotname) :int)
	(#.(swig-lispify "block_max" 'slotname) :pointer)
	(#.(swig-lispify "ptr" 'slotname) :pointer)
	(#.(swig-lispify "delta_elems" 'slotname) :int)
	(#.(swig-lispify "storage" 'slotname) :pointer)
	(#.(swig-lispify "free_blocks" 'slotname) :pointer)
	(#.(swig-lispify "first" 'slotname) :pointer))

(cffi:defctype #.(swig-lispify "CvSeq" 'typename) #.(swig-lispify "CvSeq" 'classname))

(cl:defconstant #.(swig-lispify "CV_TYPE_NAME_SEQ" 'constant) (cl:- "opencv" "sequence"))

(cl:defconstant #.(swig-lispify "CV_TYPE_NAME_SEQ_TREE" 'constant) (cl:- "opencv" "sequence" "tree"))

(cffi:defcstruct #.(swig-lispify "CvSetElem" 'classname)
	(#.(swig-lispify "flags" 'slotname) :int)
	(#.(swig-lispify "next_free" 'slotname) :pointer))

(cffi:defctype #.(swig-lispify "CvSetElem" 'typename) #.(swig-lispify "CvSetElem" 'classname))

(cffi:defcstruct #.(swig-lispify "CvSet" 'classname)
	(#.(swig-lispify "flags" 'slotname) :int)
	(#.(swig-lispify "header_size" 'slotname) :int)
	(#.(swig-lispify "h_prev" 'slotname) :pointer)
	(#.(swig-lispify "h_next" 'slotname) :pointer)
	(#.(swig-lispify "v_prev" 'slotname) :pointer)
	(#.(swig-lispify "v_next" 'slotname) :pointer)
	(#.(swig-lispify "total" 'slotname) :int)
	(#.(swig-lispify "elem_size" 'slotname) :int)
	(#.(swig-lispify "block_max" 'slotname) :pointer)
	(#.(swig-lispify "ptr" 'slotname) :pointer)
	(#.(swig-lispify "delta_elems" 'slotname) :int)
	(#.(swig-lispify "storage" 'slotname) :pointer)
	(#.(swig-lispify "free_blocks" 'slotname) :pointer)
	(#.(swig-lispify "first" 'slotname) :pointer)
	(#.(swig-lispify "free_elems" 'slotname) :pointer)
	(#.(swig-lispify "active_count" 'slotname) :int))

(cffi:defctype #.(swig-lispify "CvSet" 'typename) #.(swig-lispify "CvSet" 'classname))

(cl:defconstant #.(swig-lispify "CV_SET_ELEM_IDX_MASK" 'constant) (cl:- (cl:ash 1 26) 1))

(cffi:defcstruct #.(swig-lispify "CvGraphEdge" 'classname)
	(#.(swig-lispify "flags" 'slotname) :int)
	(#.(swig-lispify "weight" 'slotname) :float)
	(#.(swig-lispify "next" 'slotname) :pointer)
	(#.(swig-lispify "vtx" 'slotname) :pointer))

(cffi:defctype #.(swig-lispify "CvGraphEdge" 'typename) #.(swig-lispify "CvGraphEdge" 'classname))

(cffi:defcstruct #.(swig-lispify "CvGraphVtx" 'classname)
	(#.(swig-lispify "flags" 'slotname) :int)
	(#.(swig-lispify "first" 'slotname) :pointer))

(cffi:defctype #.(swig-lispify "CvGraphVtx" 'typename) #.(swig-lispify "CvGraphVtx" 'classname))

(cffi:defcstruct #.(swig-lispify "CvGraphVtx2D" 'classname)
	(#.(swig-lispify "flags" 'slotname) :int)
	(#.(swig-lispify "first" 'slotname) :pointer)
	(#.(swig-lispify "ptr" 'slotname) :pointer))

(cffi:defctype #.(swig-lispify "CvGraphVtx2D" 'typename) #.(swig-lispify "CvGraphVtx2D" 'classname))

(cffi:defcstruct #.(swig-lispify "CvGraph" 'classname)
	(#.(swig-lispify "flags" 'slotname) :int)
	(#.(swig-lispify "header_size" 'slotname) :int)
	(#.(swig-lispify "h_prev" 'slotname) :pointer)
	(#.(swig-lispify "h_next" 'slotname) :pointer)
	(#.(swig-lispify "v_prev" 'slotname) :pointer)
	(#.(swig-lispify "v_next" 'slotname) :pointer)
	(#.(swig-lispify "total" 'slotname) :int)
	(#.(swig-lispify "elem_size" 'slotname) :int)
	(#.(swig-lispify "block_max" 'slotname) :pointer)
	(#.(swig-lispify "ptr" 'slotname) :pointer)
	(#.(swig-lispify "delta_elems" 'slotname) :int)
	(#.(swig-lispify "storage" 'slotname) :pointer)
	(#.(swig-lispify "free_blocks" 'slotname) :pointer)
	(#.(swig-lispify "first" 'slotname) :pointer)
	(#.(swig-lispify "free_elems" 'slotname) :pointer)
	(#.(swig-lispify "active_count" 'slotname) :int)
	(#.(swig-lispify "edges" 'slotname) :pointer))

(cffi:defctype #.(swig-lispify "CvGraph" 'typename) #.(swig-lispify "CvGraph" 'classname))

(cl:defconstant #.(swig-lispify "CV_TYPE_NAME_GRAPH" 'constant) (cl:- "opencv" "graph"))

(cffi:defcstruct #.(swig-lispify "CvChain" 'classname)
	(#.(swig-lispify "flags" 'slotname) :int)
	(#.(swig-lispify "header_size" 'slotname) :int)
	(#.(swig-lispify "h_prev" 'slotname) :pointer)
	(#.(swig-lispify "h_next" 'slotname) :pointer)
	(#.(swig-lispify "v_prev" 'slotname) :pointer)
	(#.(swig-lispify "v_next" 'slotname) :pointer)
	(#.(swig-lispify "total" 'slotname) :int)
	(#.(swig-lispify "elem_size" 'slotname) :int)
	(#.(swig-lispify "block_max" 'slotname) :pointer)
	(#.(swig-lispify "ptr" 'slotname) :pointer)
	(#.(swig-lispify "delta_elems" 'slotname) :int)
	(#.(swig-lispify "storage" 'slotname) :pointer)
	(#.(swig-lispify "free_blocks" 'slotname) :pointer)
	(#.(swig-lispify "first" 'slotname) :pointer)
	(#.(swig-lispify "origin" 'slotname) #.(swig-lispify "CvPoint" 'classname)))

(cffi:defctype #.(swig-lispify "CvChain" 'typename) #.(swig-lispify "CvChain" 'classname))

(cffi:defcstruct #.(swig-lispify "CvContour" 'classname)
	(#.(swig-lispify "flags" 'slotname) :int)
	(#.(swig-lispify "header_size" 'slotname) :int)
	(#.(swig-lispify "h_prev" 'slotname) :pointer)
	(#.(swig-lispify "h_next" 'slotname) :pointer)
	(#.(swig-lispify "v_prev" 'slotname) :pointer)
	(#.(swig-lispify "v_next" 'slotname) :pointer)
	(#.(swig-lispify "total" 'slotname) :int)
	(#.(swig-lispify "elem_size" 'slotname) :int)
	(#.(swig-lispify "block_max" 'slotname) :pointer)
	(#.(swig-lispify "ptr" 'slotname) :pointer)
	(#.(swig-lispify "delta_elems" 'slotname) :int)
	(#.(swig-lispify "storage" 'slotname) :pointer)
	(#.(swig-lispify "free_blocks" 'slotname) :pointer)
	(#.(swig-lispify "first" 'slotname) :pointer)
	(#.(swig-lispify "rect" 'slotname) #.(swig-lispify "CvRect" 'classname))
	(#.(swig-lispify "color" 'slotname) :int)
	(#.(swig-lispify "reserved" 'slotname) :pointer))

(cffi:defctype #.(swig-lispify "CvContour" 'typename) #.(swig-lispify "CvContour" 'classname))

(cffi:defctype #.(swig-lispify "CvPoint2DSeq" 'typename) #.(swig-lispify "CvContour" 'classname))

(cl:defconstant #.(swig-lispify "CV_SEQ_MAGIC_VAL" 'constant) #x42990000)

(cl:defconstant #.(swig-lispify "CV_SET_MAGIC_VAL" 'constant) #x42980000)

(cl:defconstant #.(swig-lispify "CV_SEQ_ELTYPE_BITS" 'constant) 12)

(cl:defconstant #.(swig-lispify "CV_SEQ_ELTYPE_MASK" 'constant) (cl:- (cl:ash 1 12) 1))

(cl:defconstant #.(swig-lispify "CV_SEQ_ELTYPE_POINT" 'constant) (cl:logand (4 (cl:+ (cl:- (cl:ash 1 3) 1)) (cl:- ((2 1) << 3))))

(cl:defconstant #.(swig-lispify "CV_SEQ_ELTYPE_CODE" 'constant) (cl:logand (0 (cl:+ (cl:- (cl:ash 1 3) 1)) (cl:- ((1 1) << 3))))

(cl:defconstant #.(swig-lispify "CV_SEQ_ELTYPE_GENERIC" 'constant) 0)

(cl:defconstant #.(swig-lispify "CV_SEQ_ELTYPE_PTR" 'constant) 7)

(cl:defconstant #.(swig-lispify "CV_SEQ_ELTYPE_PPOINT" 'constant) 7)

(cl:defconstant #.(swig-lispify "CV_SEQ_ELTYPE_INDEX" 'constant) (cl:logand (4 (cl:+ (cl:- (cl:ash 1 3) 1)) (cl:- ((1 1) << 3))))

(cl:defconstant #.(swig-lispify "CV_SEQ_ELTYPE_GRAPH_EDGE" 'constant) 0)

(cl:defconstant #.(swig-lispify "CV_SEQ_ELTYPE_GRAPH_VERTEX" 'constant) 0)

(cl:defconstant #.(swig-lispify "CV_SEQ_ELTYPE_TRIAN_ATR" 'constant) 0)

(cl:defconstant #.(swig-lispify "CV_SEQ_ELTYPE_CONNECTED_COMP" 'constant) 0)

(cl:defconstant #.(swig-lispify "CV_SEQ_ELTYPE_POINT3D" 'constant) (cl:logand (5 (cl:+ (cl:- (cl:ash 1 3) 1)) (cl:- ((3 1) << 3))))

(cl:defconstant #.(swig-lispify "CV_SEQ_KIND_BITS" 'constant) 2)

(cl:defconstant #.(swig-lispify "CV_SEQ_KIND_MASK" 'constant) (cl:- (1 << 2 1) << 12))

(cl:defconstant #.(swig-lispify "CV_SEQ_KIND_GENERIC" 'constant) (cl:ash 0 12))

(cl:defconstant #.(swig-lispify "CV_SEQ_KIND_CURVE" 'constant) (cl:ash 1 12))

(cl:defconstant #.(swig-lispify "CV_SEQ_KIND_BIN_TREE" 'constant) (cl:ash 2 12))

(cl:defconstant #.(swig-lispify "CV_SEQ_KIND_GRAPH" 'constant) (cl:ash 1 12))

(cl:defconstant #.(swig-lispify "CV_SEQ_KIND_SUBDIV2D" 'constant) (cl:ash 2 12))

(cl:defconstant #.(swig-lispify "CV_SEQ_FLAG_SHIFT" 'constant) (cl:+ 2 12))

(cl:defconstant #.(swig-lispify "CV_SEQ_FLAG_CLOSED" 'constant) (cl:+ 1 << (2 12)))

(cl:defconstant #.(swig-lispify "CV_SEQ_FLAG_SIMPLE" 'constant) (cl:+ #o << (2 12)))

(cl:defconstant #.(swig-lispify "CV_SEQ_FLAG_CONVEX" 'constant) (cl:+ #o << (2 12)))

(cl:defconstant #.(swig-lispify "CV_SEQ_FLAG_HOLE" 'constant) (cl:+ 2 << (2 12)))

(cl:defconstant #.(swig-lispify "CV_GRAPH_FLAG_ORIENTED" 'constant) (cl:+ 1 << (2 12)))

(cl:defconstant #.(swig-lispify "CV_GRAPH" 'constant) (cl:ash 1 12))

(cl:defconstant #.(swig-lispify "CV_ORIENTED_GRAPH" 'constant) (cl:logior (cl:ash 1 12) (cl:+ 1 << (2 12))))

(cl:defconstant #.(swig-lispify "CV_SEQ_POINT_SET" 'constant) (cl:logior (cl:ash 0 12) (cl:logand (4 (cl:+ (cl:- (cl:ash 1 3) 1)) (cl:- ((2 1) << 3)))))

(cl:defconstant #.(swig-lispify "CV_SEQ_POINT3D_SET" 'constant) (cl:logior (cl:ash 0 12) (cl:logand (5 (cl:+ (cl:- (cl:ash 1 3) 1)) (cl:- ((3 1) << 3)))))

(cl:defconstant #.(swig-lispify "CV_SEQ_POLYLINE" 'constant) (cl:logior (cl:ash 1 12) (cl:logand (4 (cl:+ (cl:- (cl:ash 1 3) 1)) (cl:- ((2 1) << 3)))))

(cl:defconstant #.(swig-lispify "CV_SEQ_POLYGON" 'constant) (cl:logior (cl:+ 1 << (2 12)) (1 << 12 (cl:logand (4 (cl:+ (cl:- (cl:ash 1 3) 1)) (cl:- (2 1) << 3)))))

(cl:defconstant #.(swig-lispify "CV_SEQ_CONTOUR" 'constant) (cl:logior (cl:+ 1 << (2 12)) (1 << 12 (cl:logand (4 (cl:+ (cl:- (cl:ash 1 3) 1)) (cl:- (2 1) << 3)))))

(cl:defconstant #.(swig-lispify "CV_SEQ_SIMPLE_POLYGON" 'constant) (cl:logior (cl:+ #o << (2 12)) (cl:+ (1 << (2 12)) (1 << 12 (cl:logand (4 (cl:+ (cl:- (cl:ash 1 3) 1)) (cl:- (2 1) << 3))))))

(cl:defconstant #.(swig-lispify "CV_SEQ_CHAIN" 'constant) (cl:logior (cl:ash 1 12) (cl:logand (0 (cl:+ (cl:- (cl:ash 1 3) 1)) (cl:- ((1 1) << 3)))))

(cl:defconstant #.(swig-lispify "CV_SEQ_CHAIN_CONTOUR" 'constant) (cl:logior (cl:+ 1 << (2 12)) (1 << 12 (cl:logand (0 (cl:+ (cl:- (cl:ash 1 3) 1)) (cl:- (1 1) << 3)))))

(cl:defconstant #.(swig-lispify "CV_SEQ_POLYGON_TREE" 'constant) (cl:logior (cl:ash 2 12) 0))

(cl:defconstant #.(swig-lispify "CV_SEQ_CONNECTED_COMP" 'constant) (cl:logior (cl:ash 0 12) 0))

(cl:defconstant #.(swig-lispify "CV_SEQ_INDEX" 'constant) (cl:logior (cl:ash 0 12) (cl:logand (4 (cl:+ (cl:- (cl:ash 1 3) 1)) (cl:- ((1 1) << 3)))))

(cffi:defcstruct #.(swig-lispify "CvSeqWriter" 'classname)
	(#.(swig-lispify "header_size" 'slotname) :int)
	(#.(swig-lispify "seq" 'slotname) :pointer)
	(#.(swig-lispify "block" 'slotname) :pointer)
	(#.(swig-lispify "ptr" 'slotname) :pointer)
	(#.(swig-lispify "block_min" 'slotname) :pointer)
	(#.(swig-lispify "block_max" 'slotname) :pointer))

(cffi:defctype #.(swig-lispify "CvSeqWriter" 'typename) #.(swig-lispify "CvSeqWriter" 'classname))

(cffi:defcstruct #.(swig-lispify "CvSeqReader" 'classname)
	(#.(swig-lispify "header_size" 'slotname) :int)
	(#.(swig-lispify "seq" 'slotname) :pointer)
	(#.(swig-lispify "block" 'slotname) :pointer)
	(#.(swig-lispify "ptr" 'slotname) :pointer)
	(#.(swig-lispify "block_min" 'slotname) :pointer)
	(#.(swig-lispify "block_max" 'slotname) :pointer)
	(#.(swig-lispify "delta_index" 'slotname) :int)
	(#.(swig-lispify "prev_elem" 'slotname) :pointer))

(cffi:defctype #.(swig-lispify "CvSeqReader" 'typename) #.(swig-lispify "CvSeqReader" 'classname))

(cffi:defctype #.(swig-lispify "CvFileStorage" 'typename) :pointer)

(cl:defconstant #.(swig-lispify "CV_STORAGE_READ" 'constant) 0)

(cl:defconstant #.(swig-lispify "CV_STORAGE_WRITE" 'constant) 1)

(cl:defconstant #.(swig-lispify "CV_STORAGE_WRITE_TEXT" 'constant) 1)

(cl:defconstant #.(swig-lispify "CV_STORAGE_WRITE_BINARY" 'constant) 1)

(cl:defconstant #.(swig-lispify "CV_STORAGE_APPEND" 'constant) 2)

(cffi:defcstruct #.(swig-lispify "CvAttrList" 'classname)
	(#.(swig-lispify "attr" 'slotname) :pointer)
	(#.(swig-lispify "next" 'slotname) :pointer))

(cffi:defctype #.(swig-lispify "CvAttrList" 'typename) #.(swig-lispify "CvAttrList" 'classname))

(cffi:defcfun ("cvAttrList" #.(swig-lispify "cvAttrList" 'function)) #.(swig-lispify "CvAttrList" 'classname)
  (attr :pointer)
  (next :pointer))

(cl:defconstant #.(swig-lispify "CV_NODE_NONE" 'constant) 0)

(cl:defconstant #.(swig-lispify "CV_NODE_INT" 'constant) 1)

(cl:defconstant #.(swig-lispify "CV_NODE_INTEGER" 'constant) 1)

(cl:defconstant #.(swig-lispify "CV_NODE_REAL" 'constant) 2)

(cl:defconstant #.(swig-lispify "CV_NODE_FLOAT" 'constant) 2)

(cl:defconstant #.(swig-lispify "CV_NODE_STR" 'constant) 3)

(cl:defconstant #.(swig-lispify "CV_NODE_STRING" 'constant) 3)

(cl:defconstant #.(swig-lispify "CV_NODE_REF" 'constant) 4)

(cl:defconstant #.(swig-lispify "CV_NODE_SEQ" 'constant) 5)

(cl:defconstant #.(swig-lispify "CV_NODE_MAP" 'constant) 6)

(cl:defconstant #.(swig-lispify "CV_NODE_TYPE_MASK" 'constant) 7)

(cl:defconstant #.(swig-lispify "CV_NODE_FLOW" 'constant) 8)

(cl:defconstant #.(swig-lispify "CV_NODE_USER" 'constant) 16)

(cl:defconstant #.(swig-lispify "CV_NODE_EMPTY" 'constant) 32)

(cl:defconstant #.(swig-lispify "CV_NODE_NAMED" 'constant) 64)

(cl:defconstant #.(swig-lispify "CV_NODE_SEQ_SIMPLE" 'constant) 256)

(cffi:defcstruct #.(swig-lispify "CvString" 'classname)
	(#.(swig-lispify "len" 'slotname) :int)
	(#.(swig-lispify "ptr" 'slotname) :string))

(cffi:defctype #.(swig-lispify "CvString" 'typename) #.(swig-lispify "CvString" 'classname))

(cffi:defcstruct #.(swig-lispify "CvStringHashNode" 'classname)
	(#.(swig-lispify "hashval" 'slotname) :unsigned-int)
	(#.(swig-lispify "str" 'slotname) #.(swig-lispify "CvString" 'classname))
	(#.(swig-lispify "next" 'slotname) :pointer))

(cffi:defctype #.(swig-lispify "CvStringHashNode" 'typename) #.(swig-lispify "CvStringHashNode" 'classname))

(cffi:defctype #.(swig-lispify "CvFileNodeHash" 'typename) :pointer)

(cffi:defcstruct #.(swig-lispify "CvFileNode" 'classname)
	(#.(swig-lispify "tag" 'slotname) :int)
	(#.(swig-lispify "info" 'slotname) :pointer)
	(#.(swig-lispify "data" 'slotname) :pointer))

(cffi:defctype #.(swig-lispify "CvFileNode" 'typename) #.(swig-lispify "CvFileNode" 'classname))

(cffi:defcunion #.(swig-lispify "CvFileNode_data" 'classname)
	(#.(swig-lispify "f" 'slotname) :double)
	(#.(swig-lispify "i" 'slotname) :int)
	(#.(swig-lispify "str" 'slotname) #.(swig-lispify "CvString" 'classname))
	(#.(swig-lispify "seq" 'slotname) :pointer)
	(#.(swig-lispify "map" 'slotname) :pointer))

(cffi:defctype #.(swig-lispify "CvIsInstanceFunc" 'typename) :pointer)

(cffi:defctype #.(swig-lispify "CvReleaseFunc" 'typename) :pointer)

(cffi:defctype #.(swig-lispify "CvReadFunc" 'typename) :pointer)

(cffi:defctype #.(swig-lispify "CvWriteFunc" 'typename) :pointer)

(cffi:defctype #.(swig-lispify "CvCloneFunc" 'typename) :pointer)

(cffi:defcstruct #.(swig-lispify "CvTypeInfo" 'classname)
	(#.(swig-lispify "flags" 'slotname) :int)
	(#.(swig-lispify "header_size" 'slotname) :int)
	(#.(swig-lispify "prev" 'slotname) :pointer)
	(#.(swig-lispify "next" 'slotname) :pointer)
	(#.(swig-lispify "type_name" 'slotname) :string)
	(#.(swig-lispify "is_instance" 'slotname) :pointer)
	(#.(swig-lispify "release" 'slotname) :pointer)
	(#.(swig-lispify "read" 'slotname) :pointer)
	(#.(swig-lispify "write" 'slotname) :pointer)
	(#.(swig-lispify "clone" 'slotname) :pointer))

(cffi:defctype #.(swig-lispify "CvTypeInfo" 'typename) #.(swig-lispify "CvTypeInfo" 'classname))

(cffi:defcstruct #.(swig-lispify "CvPluginFuncInfo" 'classname)
	(#.(swig-lispify "func_addr" 'slotname) :pointer)
	(#.(swig-lispify "default_func_addr" 'slotname) :pointer)
	(#.(swig-lispify "func_names" 'slotname) :string)
	(#.(swig-lispify "search_modules" 'slotname) :int)
	(#.(swig-lispify "loaded_from" 'slotname) :int))

(cffi:defctype #.(swig-lispify "CvPluginFuncInfo" 'typename) #.(swig-lispify "CvPluginFuncInfo" 'classname))

(cffi:defcstruct #.(swig-lispify "CvModuleInfo" 'classname)
	(#.(swig-lispify "next" 'slotname) :pointer)
	(#.(swig-lispify "name" 'slotname) :string)
	(#.(swig-lispify "version" 'slotname) :string)
	(#.(swig-lispify "func_tab" 'slotname) :pointer))

(cffi:defctype #.(swig-lispify "CvModuleInfo" 'typename) #.(swig-lispify "CvModuleInfo" 'classname))

(cffi:defcfun ("cvAlloc" #.(swig-lispify "cvAlloc" 'function)) :pointer
  (size :pointer))

(cffi:defcfun ("cvFree_" #.(swig-lispify "cvFree_" 'function)) :void
  (ptr :pointer))

(cffi:defcfun ("cvCreateImageHeader" #.(swig-lispify "cvCreateImageHeader" 'function)) :pointer
  (size #.(swig-lispify "CvSize" 'classname))
  (depth :int)
  (channels :int))

(cffi:defcfun ("cvInitImageHeader" #.(swig-lispify "cvInitImageHeader" 'function)) :pointer
  (image :pointer)
  (size #.(swig-lispify "CvSize" 'classname))
  (depth :int)
  (channels :int)
  (origin :int)
  (align :int))

(cffi:defcfun ("cvCreateImage" #.(swig-lispify "cvCreateImage" 'function)) :pointer
  (size #.(swig-lispify "CvSize" 'classname))
  (depth :int)
  (channels :int))

(cffi:defcfun ("cvReleaseImageHeader" #.(swig-lispify "cvReleaseImageHeader" 'function)) :void
  (image :pointer))

(cffi:defcfun ("cvReleaseImage" #.(swig-lispify "cvReleaseImage" 'function)) :void
  (image :pointer))

(cffi:defcfun ("cvCloneImage" #.(swig-lispify "cvCloneImage" 'function)) :pointer
  (image :pointer))

(cffi:defcfun ("cvSetImageCOI" #.(swig-lispify "cvSetImageCOI" 'function)) :void
  (image :pointer)
  (coi :int))

(cffi:defcfun ("cvGetImageCOI" #.(swig-lispify "cvGetImageCOI" 'function)) :int
  (image :pointer))

(cffi:defcfun ("cvSetImageROI" #.(swig-lispify "cvSetImageROI" 'function)) :void
  (image :pointer)
  (rect #.(swig-lispify "CvRect" 'classname)))

(cffi:defcfun ("cvResetImageROI" #.(swig-lispify "cvResetImageROI" 'function)) :void
  (image :pointer))

(cffi:defcfun ("cvGetImageROI" #.(swig-lispify "cvGetImageROI" 'function)) #.(swig-lispify "CvRect" 'classname)
  (image :pointer))

(cffi:defcfun ("cvCreateMatHeader" #.(swig-lispify "cvCreateMatHeader" 'function)) :pointer
  (rows :int)
  (cols :int)
  (type :int))

(cl:defconstant #.(swig-lispify "CV_AUTOSTEP" 'constant) #x7fffffff)

(cffi:defcfun ("cvInitMatHeader" #.(swig-lispify "cvInitMatHeader" 'function)) :pointer
  (mat :pointer)
  (rows :int)
  (cols :int)
  (type :int)
  (data :pointer)
  (step :int))

(cffi:defcfun ("cvCreateMat" #.(swig-lispify "cvCreateMat" 'function)) :pointer
  (rows :int)
  (cols :int)
  (type :int))

(cffi:defcfun ("cvReleaseMat" #.(swig-lispify "cvReleaseMat" 'function)) :void
  (mat :pointer))

(cffi:defcfun ("cvDecRefData" #.(swig-lispify "cvDecRefData" 'function)) :void
  (arr :pointer))

(cffi:defcfun ("cvIncRefData" #.(swig-lispify "cvIncRefData" 'function)) :int
  (arr :pointer))

(cffi:defcfun ("cvCloneMat" #.(swig-lispify "cvCloneMat" 'function)) :pointer
  (mat :pointer))

(cffi:defcfun ("cvGetSubRect" #.(swig-lispify "cvGetSubRect" 'function)) :pointer
  (arr :pointer)
  (submat :pointer)
  (rect #.(swig-lispify "CvRect" 'classname)))

(cffi:defcfun ("cvGetRows" #.(swig-lispify "cvGetRows" 'function)) :pointer
  (arr :pointer)
  (submat :pointer)
  (start_row :int)
  (end_row :int)
  (delta_row :int))

(cffi:defcfun ("cvGetRow" #.(swig-lispify "cvGetRow" 'function)) :pointer
  (arr :pointer)
  (submat :pointer)
  (row :int))

(cffi:defcfun ("cvGetCols" #.(swig-lispify "cvGetCols" 'function)) :pointer
  (arr :pointer)
  (submat :pointer)
  (start_col :int)
  (end_col :int))

(cffi:defcfun ("cvGetCol" #.(swig-lispify "cvGetCol" 'function)) :pointer
  (arr :pointer)
  (submat :pointer)
  (col :int))

(cffi:defcfun ("cvGetDiag" #.(swig-lispify "cvGetDiag" 'function)) :pointer
  (arr :pointer)
  (submat :pointer)
  (diag :int))

(cffi:defcfun ("cvScalarToRawData" #.(swig-lispify "cvScalarToRawData" 'function)) :void
  (scalar :pointer)
  (data :pointer)
  (type :int)
  (extend_to_12 :int))

(cffi:defcfun ("cvRawDataToScalar" #.(swig-lispify "cvRawDataToScalar" 'function)) :void
  (data :pointer)
  (type :int)
  (scalar :pointer))

(cffi:defcfun ("cvCreateMatNDHeader" #.(swig-lispify "cvCreateMatNDHeader" 'function)) :pointer
  (dims :int)
  (sizes :pointer)
  (type :int))

(cffi:defcfun ("cvCreateMatND" #.(swig-lispify "cvCreateMatND" 'function)) :pointer
  (dims :int)
  (sizes :pointer)
  (type :int))

(cffi:defcfun ("cvInitMatNDHeader" #.(swig-lispify "cvInitMatNDHeader" 'function)) :pointer
  (mat :pointer)
  (dims :int)
  (sizes :pointer)
  (type :int)
  (data :pointer))

(cffi:defcfun ("cvReleaseMatND" #.(swig-lispify "cvReleaseMatND" 'function)) :void
  (mat :pointer))

(cffi:defcfun ("cvCloneMatND" #.(swig-lispify "cvCloneMatND" 'function)) :pointer
  (mat :pointer))

(cffi:defcfun ("cvCreateSparseMat" #.(swig-lispify "cvCreateSparseMat" 'function)) :pointer
  (dims :int)
  (sizes :pointer)
  (type :int))

(cffi:defcfun ("cvReleaseSparseMat" #.(swig-lispify "cvReleaseSparseMat" 'function)) :void
  (mat :pointer))

(cffi:defcfun ("cvCloneSparseMat" #.(swig-lispify "cvCloneSparseMat" 'function)) :pointer
  (mat :pointer))

(cffi:defcfun ("cvInitSparseMatIterator" #.(swig-lispify "cvInitSparseMatIterator" 'function)) :pointer
  (mat :pointer)
  (mat_iterator :pointer))

(cffi:defcfun ("cvGetNextSparseNode" #.(swig-lispify "cvGetNextSparseNode" 'function)) :pointer
  (mat_iterator :pointer))

(cl:defconstant #.(swig-lispify "CV_MAX_ARR" 'constant) 10)

(cffi:defcstruct #.(swig-lispify "CvNArrayIterator" 'classname)
	(#.(swig-lispify "count" 'slotname) :int)
	(#.(swig-lispify "dims" 'slotname) :int)
	(#.(swig-lispify "size" 'slotname) #.(swig-lispify "CvSize" 'classname))
	(#.(swig-lispify "ptr" 'slotname) :pointer)
	(#.(swig-lispify "stack" 'slotname) :pointer)
	(#.(swig-lispify "hdr" 'slotname) :pointer))

(cffi:defctype #.(swig-lispify "CvNArrayIterator" 'typename) #.(swig-lispify "CvNArrayIterator" 'classname))

(cl:defconstant #.(swig-lispify "CV_NO_DEPTH_CHECK" 'constant) 1)

(cl:defconstant #.(swig-lispify "CV_NO_CN_CHECK" 'constant) 2)

(cl:defconstant #.(swig-lispify "CV_NO_SIZE_CHECK" 'constant) 4)

(cffi:defcfun ("cvInitNArrayIterator" #.(swig-lispify "cvInitNArrayIterator" 'function)) :int
  (count :int)
  (arrs :pointer)
  (mask :pointer)
  (stubs :pointer)
  (array_iterator :pointer)
  (flags :int))

(cffi:defcfun ("cvNextNArraySlice" #.(swig-lispify "cvNextNArraySlice" 'function)) :int
  (array_iterator :pointer))

(cffi:defcfun ("cvGetElemType" #.(swig-lispify "cvGetElemType" 'function)) :int
  (arr :pointer))

(cffi:defcfun ("cvGetDims" #.(swig-lispify "cvGetDims" 'function)) :int
  (arr :pointer)
  (sizes :pointer))

(cffi:defcfun ("cvGetDimSize" #.(swig-lispify "cvGetDimSize" 'function)) :int
  (arr :pointer)
  (index :int))

(cffi:defcfun ("cvPtr1D" #.(swig-lispify "cvPtr1D" 'function)) :pointer
  (arr :pointer)
  (idx0 :int)
  (type :pointer))

(cffi:defcfun ("cvPtr2D" #.(swig-lispify "cvPtr2D" 'function)) :pointer
  (arr :pointer)
  (idx0 :int)
  (idx1 :int)
  (type :pointer))

(cffi:defcfun ("cvPtr3D" #.(swig-lispify "cvPtr3D" 'function)) :pointer
  (arr :pointer)
  (idx0 :int)
  (idx1 :int)
  (idx2 :int)
  (type :pointer))

(cffi:defcfun ("cvPtrND" #.(swig-lispify "cvPtrND" 'function)) :pointer
  (arr :pointer)
  (idx :pointer)
  (type :pointer)
  (create_node :int)
  (precalc_hashval :pointer))

(cffi:defcfun ("cvGet1D" #.(swig-lispify "cvGet1D" 'function)) #.(swig-lispify "CvScalar" 'classname)
  (arr :pointer)
  (idx0 :int))

(cffi:defcfun ("cvGet2D" #.(swig-lispify "cvGet2D" 'function)) #.(swig-lispify "CvScalar" 'classname)
  (arr :pointer)
  (idx0 :int)
  (idx1 :int))

(cffi:defcfun ("cvGet3D" #.(swig-lispify "cvGet3D" 'function)) #.(swig-lispify "CvScalar" 'classname)
  (arr :pointer)
  (idx0 :int)
  (idx1 :int)
  (idx2 :int))

(cffi:defcfun ("cvGetND" #.(swig-lispify "cvGetND" 'function)) #.(swig-lispify "CvScalar" 'classname)
  (arr :pointer)
  (idx :pointer))

(cffi:defcfun ("cvGetReal1D" #.(swig-lispify "cvGetReal1D" 'function)) :double
  (arr :pointer)
  (idx0 :int))

(cffi:defcfun ("cvGetReal2D" #.(swig-lispify "cvGetReal2D" 'function)) :double
  (arr :pointer)
  (idx0 :int)
  (idx1 :int))

(cffi:defcfun ("cvGetReal3D" #.(swig-lispify "cvGetReal3D" 'function)) :double
  (arr :pointer)
  (idx0 :int)
  (idx1 :int)
  (idx2 :int))

(cffi:defcfun ("cvGetRealND" #.(swig-lispify "cvGetRealND" 'function)) :double
  (arr :pointer)
  (idx :pointer))

(cffi:defcfun ("cvSet1D" #.(swig-lispify "cvSet1D" 'function)) :void
  (arr :pointer)
  (idx0 :int)
  (value #.(swig-lispify "CvScalar" 'classname)))

(cffi:defcfun ("cvSet2D" #.(swig-lispify "cvSet2D" 'function)) :void
  (arr :pointer)
  (idx0 :int)
  (idx1 :int)
  (value #.(swig-lispify "CvScalar" 'classname)))

(cffi:defcfun ("cvSet3D" #.(swig-lispify "cvSet3D" 'function)) :void
  (arr :pointer)
  (idx0 :int)
  (idx1 :int)
  (idx2 :int)
  (value #.(swig-lispify "CvScalar" 'classname)))

(cffi:defcfun ("cvSetND" #.(swig-lispify "cvSetND" 'function)) :void
  (arr :pointer)
  (idx :pointer)
  (value #.(swig-lispify "CvScalar" 'classname)))

(cffi:defcfun ("cvSetReal1D" #.(swig-lispify "cvSetReal1D" 'function)) :void
  (arr :pointer)
  (idx0 :int)
  (value :double))

(cffi:defcfun ("cvSetReal2D" #.(swig-lispify "cvSetReal2D" 'function)) :void
  (arr :pointer)
  (idx0 :int)
  (idx1 :int)
  (value :double))

(cffi:defcfun ("cvSetReal3D" #.(swig-lispify "cvSetReal3D" 'function)) :void
  (arr :pointer)
  (idx0 :int)
  (idx1 :int)
  (idx2 :int)
  (value :double))

(cffi:defcfun ("cvSetRealND" #.(swig-lispify "cvSetRealND" 'function)) :void
  (arr :pointer)
  (idx :pointer)
  (value :double))

(cffi:defcfun ("cvClearND" #.(swig-lispify "cvClearND" 'function)) :void
  (arr :pointer)
  (idx :pointer))

(cffi:defcfun ("cvGetMat" #.(swig-lispify "cvGetMat" 'function)) :pointer
  (arr :pointer)
  (header :pointer)
  (coi :pointer)
  (allowND :int))

(cffi:defcfun ("cvGetImage" #.(swig-lispify "cvGetImage" 'function)) :pointer
  (arr :pointer)
  (image_header :pointer))

(cffi:defcfun ("cvReshapeMatND" #.(swig-lispify "cvReshapeMatND" 'function)) :pointer
  (arr :pointer)
  (sizeof_header :int)
  (header :pointer)
  (new_cn :int)
  (new_dims :int)
  (new_sizes :pointer))

(cffi:defcfun ("cvReshape" #.(swig-lispify "cvReshape" 'function)) :pointer
  (arr :pointer)
  (header :pointer)
  (new_cn :int)
  (new_rows :int))

(cffi:defcfun ("cvRepeat" #.(swig-lispify "cvRepeat" 'function)) :void
  (src :pointer)
  (dst :pointer))

(cffi:defcfun ("cvCreateData" #.(swig-lispify "cvCreateData" 'function)) :void
  (arr :pointer))

(cffi:defcfun ("cvReleaseData" #.(swig-lispify "cvReleaseData" 'function)) :void
  (arr :pointer))

(cffi:defcfun ("cvSetData" #.(swig-lispify "cvSetData" 'function)) :void
  (arr :pointer)
  (data :pointer)
  (step :int))

(cffi:defcfun ("cvGetRawData" #.(swig-lispify "cvGetRawData" 'function)) :void
  (arr :pointer)
  (data :pointer)
  (step :pointer)
  (roi_size :pointer))

(cffi:defcfun ("cvGetSize" #.(swig-lispify "cvGetSize" 'function)) #.(swig-lispify "CvSize" 'classname)
  (arr :pointer))

(cffi:defcfun ("cvCopy" #.(swig-lispify "cvCopy" 'function)) :void
  (src :pointer)
  (dst :pointer)
  (mask :pointer))

(cffi:defcfun ("cvSet" #.(swig-lispify "cvSet" 'function)) :void
  (arr :pointer)
  (value #.(swig-lispify "CvScalar" 'classname))
  (mask :pointer))

(cffi:defcfun ("cvSetZero" #.(swig-lispify "cvSetZero" 'function)) :void
  (arr :pointer))

(cffi:defcfun ("cvSplit" #.(swig-lispify "cvSplit" 'function)) :void
  (src :pointer)
  (dst0 :pointer)
  (dst1 :pointer)
  (dst2 :pointer)
  (dst3 :pointer))

(cffi:defcfun ("cvMerge" #.(swig-lispify "cvMerge" 'function)) :void
  (src0 :pointer)
  (src1 :pointer)
  (src2 :pointer)
  (src3 :pointer)
  (dst :pointer))

(cffi:defcfun ("cvMixChannels" #.(swig-lispify "cvMixChannels" 'function)) :void
  (src :pointer)
  (src_count :int)
  (dst :pointer)
  (dst_count :int)
  (from_to :pointer)
  (pair_count :int))

(cffi:defcfun ("cvConvertScale" #.(swig-lispify "cvConvertScale" 'function)) :void
  (src :pointer)
  (dst :pointer)
  (scale :double)
  (shift :double))

(cffi:defcfun ("cvConvertScaleAbs" #.(swig-lispify "cvConvertScaleAbs" 'function)) :void
  (src :pointer)
  (dst :pointer)
  (scale :double)
  (shift :double))

(cffi:defcfun ("cvCheckTermCriteria" #.(swig-lispify "cvCheckTermCriteria" 'function)) #.(swig-lispify "CvTermCriteria" 'classname)
  (criteria #.(swig-lispify "CvTermCriteria" 'classname))
  (default_eps :double)
  (default_max_iters :int))

(cffi:defcfun ("cvAdd" #.(swig-lispify "cvAdd" 'function)) :void
  (src1 :pointer)
  (src2 :pointer)
  (dst :pointer)
  (mask :pointer))

(cffi:defcfun ("cvAddS" #.(swig-lispify "cvAddS" 'function)) :void
  (src :pointer)
  (value #.(swig-lispify "CvScalar" 'classname))
  (dst :pointer)
  (mask :pointer))

(cffi:defcfun ("cvSub" #.(swig-lispify "cvSub" 'function)) :void
  (src1 :pointer)
  (src2 :pointer)
  (dst :pointer)
  (mask :pointer))

(cffi:defcfun ("cvSubS" #.(swig-lispify "cvSubS" 'function)) :void
  (src :pointer)
  (value #.(swig-lispify "CvScalar" 'classname))
  (dst :pointer)
  (mask :pointer))

(cffi:defcfun ("cvSubRS" #.(swig-lispify "cvSubRS" 'function)) :void
  (src :pointer)
  (value #.(swig-lispify "CvScalar" 'classname))
  (dst :pointer)
  (mask :pointer))

(cffi:defcfun ("cvMul" #.(swig-lispify "cvMul" 'function)) :void
  (src1 :pointer)
  (src2 :pointer)
  (dst :pointer)
  (scale :double))

(cffi:defcfun ("cvDiv" #.(swig-lispify "cvDiv" 'function)) :void
  (src1 :pointer)
  (src2 :pointer)
  (dst :pointer)
  (scale :double))

(cffi:defcfun ("cvScaleAdd" #.(swig-lispify "cvScaleAdd" 'function)) :void
  (src1 :pointer)
  (scale #.(swig-lispify "CvScalar" 'classname))
  (src2 :pointer)
  (dst :pointer))

(cffi:defcfun ("cvAddWeighted" #.(swig-lispify "cvAddWeighted" 'function)) :void
  (src1 :pointer)
  (alpha :double)
  (src2 :pointer)
  (beta :double)
  (gamma :double)
  (dst :pointer))

(cffi:defcfun ("cvDotProduct" #.(swig-lispify "cvDotProduct" 'function)) :double
  (src1 :pointer)
  (src2 :pointer))

(cffi:defcfun ("cvAnd" #.(swig-lispify "cvAnd" 'function)) :void
  (src1 :pointer)
  (src2 :pointer)
  (dst :pointer)
  (mask :pointer))

(cffi:defcfun ("cvAndS" #.(swig-lispify "cvAndS" 'function)) :void
  (src :pointer)
  (value #.(swig-lispify "CvScalar" 'classname))
  (dst :pointer)
  (mask :pointer))

(cffi:defcfun ("cvOr" #.(swig-lispify "cvOr" 'function)) :void
  (src1 :pointer)
  (src2 :pointer)
  (dst :pointer)
  (mask :pointer))

(cffi:defcfun ("cvOrS" #.(swig-lispify "cvOrS" 'function)) :void
  (src :pointer)
  (value #.(swig-lispify "CvScalar" 'classname))
  (dst :pointer)
  (mask :pointer))

(cffi:defcfun ("cvXor" #.(swig-lispify "cvXor" 'function)) :void
  (src1 :pointer)
  (src2 :pointer)
  (dst :pointer)
  (mask :pointer))

(cffi:defcfun ("cvXorS" #.(swig-lispify "cvXorS" 'function)) :void
  (src :pointer)
  (value #.(swig-lispify "CvScalar" 'classname))
  (dst :pointer)
  (mask :pointer))

(cffi:defcfun ("cvNot" #.(swig-lispify "cvNot" 'function)) :void
  (src :pointer)
  (dst :pointer))

(cffi:defcfun ("cvInRange" #.(swig-lispify "cvInRange" 'function)) :void
  (src :pointer)
  (lower :pointer)
  (upper :pointer)
  (dst :pointer))

(cffi:defcfun ("cvInRangeS" #.(swig-lispify "cvInRangeS" 'function)) :void
  (src :pointer)
  (lower #.(swig-lispify "CvScalar" 'classname))
  (upper #.(swig-lispify "CvScalar" 'classname))
  (dst :pointer))

(cl:defconstant #.(swig-lispify "CV_CMP_EQ" 'constant) 0)

(cl:defconstant #.(swig-lispify "CV_CMP_GT" 'constant) 1)

(cl:defconstant #.(swig-lispify "CV_CMP_GE" 'constant) 2)

(cl:defconstant #.(swig-lispify "CV_CMP_LT" 'constant) 3)

(cl:defconstant #.(swig-lispify "CV_CMP_LE" 'constant) 4)

(cl:defconstant #.(swig-lispify "CV_CMP_NE" 'constant) 5)

(cffi:defcfun ("cvCmp" #.(swig-lispify "cvCmp" 'function)) :void
  (src1 :pointer)
  (src2 :pointer)
  (dst :pointer)
  (cmp_op :int))

(cffi:defcfun ("cvCmpS" #.(swig-lispify "cvCmpS" 'function)) :void
  (src :pointer)
  (value :double)
  (dst :pointer)
  (cmp_op :int))

(cffi:defcfun ("cvMin" #.(swig-lispify "cvMin" 'function)) :void
  (src1 :pointer)
  (src2 :pointer)
  (dst :pointer))

(cffi:defcfun ("cvMax" #.(swig-lispify "cvMax" 'function)) :void
  (src1 :pointer)
  (src2 :pointer)
  (dst :pointer))

(cffi:defcfun ("cvMinS" #.(swig-lispify "cvMinS" 'function)) :void
  (src :pointer)
  (value :double)
  (dst :pointer))

(cffi:defcfun ("cvMaxS" #.(swig-lispify "cvMaxS" 'function)) :void
  (src :pointer)
  (value :double)
  (dst :pointer))

(cffi:defcfun ("cvAbsDiff" #.(swig-lispify "cvAbsDiff" 'function)) :void
  (src1 :pointer)
  (src2 :pointer)
  (dst :pointer))

(cffi:defcfun ("cvAbsDiffS" #.(swig-lispify "cvAbsDiffS" 'function)) :void
  (src :pointer)
  (dst :pointer)
  (value #.(swig-lispify "CvScalar" 'classname)))

(cffi:defcfun ("cvCartToPolar" #.(swig-lispify "cvCartToPolar" 'function)) :void
  (x :pointer)
  (y :pointer)
  (magnitude :pointer)
  (angle :pointer)
  (angle_in_degrees :int))

(cffi:defcfun ("cvPolarToCart" #.(swig-lispify "cvPolarToCart" 'function)) :void
  (magnitude :pointer)
  (angle :pointer)
  (x :pointer)
  (y :pointer)
  (angle_in_degrees :int))

(cffi:defcfun ("cvPow" #.(swig-lispify "cvPow" 'function)) :void
  (src :pointer)
  (dst :pointer)
  (power :double))

(cffi:defcfun ("cvExp" #.(swig-lispify "cvExp" 'function)) :void
  (src :pointer)
  (dst :pointer))

(cffi:defcfun ("cvLog" #.(swig-lispify "cvLog" 'function)) :void
  (src :pointer)
  (dst :pointer))

(cffi:defcfun ("cvFastArctan" #.(swig-lispify "cvFastArctan" 'function)) :float
  (y :float)
  (x :float))

(cffi:defcfun ("cvCbrt" #.(swig-lispify "cvCbrt" 'function)) :float
  (value :float))

(cl:defconstant #.(swig-lispify "CV_CHECK_RANGE" 'constant) 1)

(cl:defconstant #.(swig-lispify "CV_CHECK_QUIET" 'constant) 2)

(cffi:defcfun ("cvCheckArr" #.(swig-lispify "cvCheckArr" 'function)) :int
  (arr :pointer)
  (flags :int)
  (min_val :double)
  (max_val :double))

(cl:defconstant #.(swig-lispify "CV_RAND_UNI" 'constant) 0)

(cl:defconstant #.(swig-lispify "CV_RAND_NORMAL" 'constant) 1)

(cffi:defcfun ("cvRandArr" #.(swig-lispify "cvRandArr" 'function)) :void
  (rng :pointer)
  (arr :pointer)
  (dist_type :int)
  (param1 #.(swig-lispify "CvScalar" 'classname))
  (param2 #.(swig-lispify "CvScalar" 'classname)))

(cffi:defcfun ("cvRandShuffle" #.(swig-lispify "cvRandShuffle" 'function)) :void
  (mat :pointer)
  (rng :pointer)
  (iter_factor :double))

(cl:defconstant #.(swig-lispify "CV_SORT_EVERY_ROW" 'constant) 0)

(cl:defconstant #.(swig-lispify "CV_SORT_EVERY_COLUMN" 'constant) 1)

(cl:defconstant #.(swig-lispify "CV_SORT_ASCENDING" 'constant) 0)

(cl:defconstant #.(swig-lispify "CV_SORT_DESCENDING" 'constant) 16)

(cffi:defcfun ("cvSort" #.(swig-lispify "cvSort" 'function)) :void
  (src :pointer)
  (dst :pointer)
  (idxmat :pointer)
  (flags :int))

(cffi:defcfun ("cvSolveCubic" #.(swig-lispify "cvSolveCubic" 'function)) :int
  (coeffs :pointer)
  (roots :pointer))

(cffi:defcfun ("cvSolvePoly" #.(swig-lispify "cvSolvePoly" 'function)) :void
  (coeffs :pointer)
  (roots2 :pointer)
  (maxiter :int)
  (fig :int))

(cffi:defcfun ("cvCrossProduct" #.(swig-lispify "cvCrossProduct" 'function)) :void
  (src1 :pointer)
  (src2 :pointer)
  (dst :pointer))

(cl:defconstant #.(swig-lispify "CV_GEMM_A_T" 'constant) 1)

(cl:defconstant #.(swig-lispify "CV_GEMM_B_T" 'constant) 2)

(cl:defconstant #.(swig-lispify "CV_GEMM_C_T" 'constant) 4)

(cffi:defcfun ("cvGEMM" #.(swig-lispify "cvGEMM" 'function)) :void
  (src1 :pointer)
  (src2 :pointer)
  (alpha :double)
  (src3 :pointer)
  (beta :double)
  (dst :pointer)
  (tABC :int))

(cffi:defcfun ("cvTransform" #.(swig-lispify "cvTransform" 'function)) :void
  (src :pointer)
  (dst :pointer)
  (transmat :pointer)
  (shiftvec :pointer))

(cffi:defcfun ("cvPerspectiveTransform" #.(swig-lispify "cvPerspectiveTransform" 'function)) :void
  (src :pointer)
  (dst :pointer)
  (mat :pointer))

(cffi:defcfun ("cvMulTransposed" #.(swig-lispify "cvMulTransposed" 'function)) :void
  (src :pointer)
  (dst :pointer)
  (order :int)
  (delta :pointer)
  (scale :double))

(cffi:defcfun ("cvTranspose" #.(swig-lispify "cvTranspose" 'function)) :void
  (src :pointer)
  (dst :pointer))

(cffi:defcfun ("cvCompleteSymm" #.(swig-lispify "cvCompleteSymm" 'function)) :void
  (matrix :pointer)
  (LtoR :int))

(cffi:defcfun ("cvFlip" #.(swig-lispify "cvFlip" 'function)) :void
  (src :pointer)
  (dst :pointer)
  (flip_mode :int))

(cl:defconstant #.(swig-lispify "CV_SVD_MODIFY_A" 'constant) 1)

(cl:defconstant #.(swig-lispify "CV_SVD_U_T" 'constant) 2)

(cl:defconstant #.(swig-lispify "CV_SVD_V_T" 'constant) 4)

(cffi:defcfun ("cvSVD" #.(swig-lispify "cvSVD" 'function)) :void
  (A :pointer)
  (W :pointer)
  (U :pointer)
  (V :pointer)
  (flags :int))

(cffi:defcfun ("cvSVBkSb" #.(swig-lispify "cvSVBkSb" 'function)) :void
  (W :pointer)
  (U :pointer)
  (V :pointer)
  (B :pointer)
  (X :pointer)
  (flags :int))

(cl:defconstant #.(swig-lispify "CV_LU" 'constant) 0)

(cl:defconstant #.(swig-lispify "CV_SVD" 'constant) 1)

(cl:defconstant #.(swig-lispify "CV_SVD_SYM" 'constant) 2)

(cl:defconstant #.(swig-lispify "CV_CHOLESKY" 'constant) 3)

(cl:defconstant #.(swig-lispify "CV_QR" 'constant) 4)

(cl:defconstant #.(swig-lispify "CV_NORMAL" 'constant) 16)

(cffi:defcfun ("cvInvert" #.(swig-lispify "cvInvert" 'function)) :double
  (src :pointer)
  (dst :pointer)
  (method :int))

(cffi:defcfun ("cvSolve" #.(swig-lispify "cvSolve" 'function)) :int
  (src1 :pointer)
  (src2 :pointer)
  (dst :pointer)
  (method :int))

(cffi:defcfun ("cvDet" #.(swig-lispify "cvDet" 'function)) :double
  (mat :pointer))

(cffi:defcfun ("cvTrace" #.(swig-lispify "cvTrace" 'function)) #.(swig-lispify "CvScalar" 'classname)
  (mat :pointer))

(cffi:defcfun ("cvEigenVV" #.(swig-lispify "cvEigenVV" 'function)) :void
  (mat :pointer)
  (evects :pointer)
  (evals :pointer)
  (eps :double)
  (lowindex :int)
  (highindex :int))

(cffi:defcfun ("cvSetIdentity" #.(swig-lispify "cvSetIdentity" 'function)) :void
  (mat :pointer)
  (value #.(swig-lispify "CvScalar" 'classname)))

(cffi:defcfun ("cvRange" #.(swig-lispify "cvRange" 'function)) :pointer
  (mat :pointer)
  (start :double)
  (end :double))

(cl:defconstant #.(swig-lispify "CV_COVAR_SCRAMBLED" 'constant) 0)

(cl:defconstant #.(swig-lispify "CV_COVAR_NORMAL" 'constant) 1)

(cl:defconstant #.(swig-lispify "CV_COVAR_USE_AVG" 'constant) 2)

(cl:defconstant #.(swig-lispify "CV_COVAR_SCALE" 'constant) 4)

(cl:defconstant #.(swig-lispify "CV_COVAR_ROWS" 'constant) 8)

(cl:defconstant #.(swig-lispify "CV_COVAR_COLS" 'constant) 16)

(cffi:defcfun ("cvCalcCovarMatrix" #.(swig-lispify "cvCalcCovarMatrix" 'function)) :void
  (vects :pointer)
  (count :int)
  (cov_mat :pointer)
  (avg :pointer)
  (flags :int))

(cl:defconstant #.(swig-lispify "CV_PCA_DATA_AS_ROW" 'constant) 0)

(cl:defconstant #.(swig-lispify "CV_PCA_DATA_AS_COL" 'constant) 1)

(cl:defconstant #.(swig-lispify "CV_PCA_USE_AVG" 'constant) 2)

(cffi:defcfun ("cvCalcPCA" #.(swig-lispify "cvCalcPCA" 'function)) :void
  (data :pointer)
  (mean :pointer)
  (eigenvals :pointer)
  (eigenvects :pointer)
  (flags :int))

(cffi:defcfun ("cvProjectPCA" #.(swig-lispify "cvProjectPCA" 'function)) :void
  (data :pointer)
  (mean :pointer)
  (eigenvects :pointer)
  (result :pointer))

(cffi:defcfun ("cvBackProjectPCA" #.(swig-lispify "cvBackProjectPCA" 'function)) :void
  (proj :pointer)
  (mean :pointer)
  (eigenvects :pointer)
  (result :pointer))

(cffi:defcfun ("cvMahalanobis" #.(swig-lispify "cvMahalanobis" 'function)) :double
  (vec1 :pointer)
  (vec2 :pointer)
  (mat :pointer))

(cffi:defcfun ("cvSum" #.(swig-lispify "cvSum" 'function)) #.(swig-lispify "CvScalar" 'classname)
  (arr :pointer))

(cffi:defcfun ("cvCountNonZero" #.(swig-lispify "cvCountNonZero" 'function)) :int
  (arr :pointer))

(cffi:defcfun ("cvAvg" #.(swig-lispify "cvAvg" 'function)) #.(swig-lispify "CvScalar" 'classname)
  (arr :pointer)
  (mask :pointer))

(cffi:defcfun ("cvAvgSdv" #.(swig-lispify "cvAvgSdv" 'function)) :void
  (arr :pointer)
  (mean :pointer)
  (std_dev :pointer)
  (mask :pointer))

(cffi:defcfun ("cvMinMaxLoc" #.(swig-lispify "cvMinMaxLoc" 'function)) :void
  (arr :pointer)
  (min_val :pointer)
  (max_val :pointer)
  (min_loc :pointer)
  (max_loc :pointer)
  (mask :pointer))

(cl:defconstant #.(swig-lispify "CV_C" 'constant) 1)

(cl:defconstant #.(swig-lispify "CV_L1" 'constant) 2)

(cl:defconstant #.(swig-lispify "CV_L2" 'constant) 4)

(cl:defconstant #.(swig-lispify "CV_NORM_MASK" 'constant) 7)

(cl:defconstant #.(swig-lispify "CV_RELATIVE" 'constant) 8)

(cl:defconstant #.(swig-lispify "CV_DIFF" 'constant) 16)

(cl:defconstant #.(swig-lispify "CV_MINMAX" 'constant) 32)

(cl:defconstant #.(swig-lispify "CV_DIFF_C" 'constant) (cl:logior 16 1))

(cl:defconstant #.(swig-lispify "CV_DIFF_L1" 'constant) (cl:logior 16 2))

(cl:defconstant #.(swig-lispify "CV_DIFF_L2" 'constant) (cl:logior 16 4))

(cl:defconstant #.(swig-lispify "CV_RELATIVE_C" 'constant) (cl:logior 8 1))

(cl:defconstant #.(swig-lispify "CV_RELATIVE_L1" 'constant) (cl:logior 8 2))

(cl:defconstant #.(swig-lispify "CV_RELATIVE_L2" 'constant) (cl:logior 8 4))

(cffi:defcfun ("cvNorm" #.(swig-lispify "cvNorm" 'function)) :double
  (arr1 :pointer)
  (arr2 :pointer)
  (norm_type :int)
  (mask :pointer))

(cffi:defcfun ("cvNormalize" #.(swig-lispify "cvNormalize" 'function)) :void
  (src :pointer)
  (dst :pointer)
  (a :double)
  (b :double)
  (norm_type :int)
  (mask :pointer))

(cl:defconstant #.(swig-lispify "CV_REDUCE_SUM" 'constant) 0)

(cl:defconstant #.(swig-lispify "CV_REDUCE_AVG" 'constant) 1)

(cl:defconstant #.(swig-lispify "CV_REDUCE_MAX" 'constant) 2)

(cl:defconstant #.(swig-lispify "CV_REDUCE_MIN" 'constant) 3)

(cffi:defcfun ("cvReduce" #.(swig-lispify "cvReduce" 'function)) :void
  (src :pointer)
  (dst :pointer)
  (dim :int)
  (op :int))

(cl:defconstant #.(swig-lispify "CV_DXT_FORWARD" 'constant) 0)

(cl:defconstant #.(swig-lispify "CV_DXT_INVERSE" 'constant) 1)

(cl:defconstant #.(swig-lispify "CV_DXT_SCALE" 'constant) 2)

(cl:defconstant #.(swig-lispify "CV_DXT_INV_SCALE" 'constant) (cl:+ 1 2))

(cl:defconstant #.(swig-lispify "CV_DXT_INVERSE_SCALE" 'constant) (cl:+ 1 2))

(cl:defconstant #.(swig-lispify "CV_DXT_ROWS" 'constant) 4)

(cl:defconstant #.(swig-lispify "CV_DXT_MUL_CONJ" 'constant) 8)

(cffi:defcfun ("cvDFT" #.(swig-lispify "cvDFT" 'function)) :void
  (src :pointer)
  (dst :pointer)
  (flags :int)
  (nonzero_rows :int))

(cffi:defcfun ("cvMulSpectrums" #.(swig-lispify "cvMulSpectrums" 'function)) :void
  (src1 :pointer)
  (src2 :pointer)
  (dst :pointer)
  (flags :int))

(cffi:defcfun ("cvGetOptimalDFTSize" #.(swig-lispify "cvGetOptimalDFTSize" 'function)) :int
  (size0 :int))

(cffi:defcfun ("cvDCT" #.(swig-lispify "cvDCT" 'function)) :void
  (src :pointer)
  (dst :pointer)
  (flags :int))

(cffi:defcfun ("cvSliceLength" #.(swig-lispify "cvSliceLength" 'function)) :int
  (slice #.(swig-lispify "CvSlice" 'classname))
  (seq :pointer))

(cffi:defcfun ("cvCreateMemStorage" #.(swig-lispify "cvCreateMemStorage" 'function)) :pointer
  (block_size :int))

(cffi:defcfun ("cvCreateChildMemStorage" #.(swig-lispify "cvCreateChildMemStorage" 'function)) :pointer
  (parent :pointer))

(cffi:defcfun ("cvReleaseMemStorage" #.(swig-lispify "cvReleaseMemStorage" 'function)) :void
  (storage :pointer))

(cffi:defcfun ("cvClearMemStorage" #.(swig-lispify "cvClearMemStorage" 'function)) :void
  (storage :pointer))

(cffi:defcfun ("cvSaveMemStoragePos" #.(swig-lispify "cvSaveMemStoragePos" 'function)) :void
  (storage :pointer)
  (pos :pointer))

(cffi:defcfun ("cvRestoreMemStoragePos" #.(swig-lispify "cvRestoreMemStoragePos" 'function)) :void
  (storage :pointer)
  (pos :pointer))

(cffi:defcfun ("cvMemStorageAlloc" #.(swig-lispify "cvMemStorageAlloc" 'function)) :pointer
  (storage :pointer)
  (size :pointer))

(cffi:defcfun ("cvMemStorageAllocString" #.(swig-lispify "cvMemStorageAllocString" 'function)) #.(swig-lispify "CvString" 'classname)
  (storage :pointer)
  (ptr :string)
  (len :int))

(cffi:defcfun ("cvCreateSeq" #.(swig-lispify "cvCreateSeq" 'function)) :pointer
  (seq_flags :int)
  (header_size :int)
  (elem_size :int)
  (storage :pointer))

(cffi:defcfun ("cvSetSeqBlockSize" #.(swig-lispify "cvSetSeqBlockSize" 'function)) :void
  (seq :pointer)
  (delta_elems :int))

(cffi:defcfun ("cvSeqPush" #.(swig-lispify "cvSeqPush" 'function)) :pointer
  (seq :pointer)
  (element :pointer))

(cffi:defcfun ("cvSeqPushFront" #.(swig-lispify "cvSeqPushFront" 'function)) :pointer
  (seq :pointer)
  (element :pointer))

(cffi:defcfun ("cvSeqPop" #.(swig-lispify "cvSeqPop" 'function)) :void
  (seq :pointer)
  (element :pointer))

(cffi:defcfun ("cvSeqPopFront" #.(swig-lispify "cvSeqPopFront" 'function)) :void
  (seq :pointer)
  (element :pointer))

(cl:defconstant #.(swig-lispify "CV_FRONT" 'constant) 1)

(cl:defconstant #.(swig-lispify "CV_BACK" 'constant) 0)

(cffi:defcfun ("cvSeqPushMulti" #.(swig-lispify "cvSeqPushMulti" 'function)) :void
  (seq :pointer)
  (elements :pointer)
  (count :int)
  (in_front :int))

(cffi:defcfun ("cvSeqPopMulti" #.(swig-lispify "cvSeqPopMulti" 'function)) :void
  (seq :pointer)
  (elements :pointer)
  (count :int)
  (in_front :int))

(cffi:defcfun ("cvSeqInsert" #.(swig-lispify "cvSeqInsert" 'function)) :pointer
  (seq :pointer)
  (before_index :int)
  (element :pointer))

(cffi:defcfun ("cvSeqRemove" #.(swig-lispify "cvSeqRemove" 'function)) :void
  (seq :pointer)
  (index :int))

(cffi:defcfun ("cvClearSeq" #.(swig-lispify "cvClearSeq" 'function)) :void
  (seq :pointer))

(cffi:defcfun ("cvGetSeqElem" #.(swig-lispify "cvGetSeqElem" 'function)) :pointer
  (seq :pointer)
  (index :int))

(cffi:defcfun ("cvSeqElemIdx" #.(swig-lispify "cvSeqElemIdx" 'function)) :int
  (seq :pointer)
  (element :pointer)
  (block :pointer))

(cffi:defcfun ("cvStartAppendToSeq" #.(swig-lispify "cvStartAppendToSeq" 'function)) :void
  (seq :pointer)
  (writer :pointer))

(cffi:defcfun ("cvStartWriteSeq" #.(swig-lispify "cvStartWriteSeq" 'function)) :void
  (seq_flags :int)
  (header_size :int)
  (elem_size :int)
  (storage :pointer)
  (writer :pointer))

(cffi:defcfun ("cvEndWriteSeq" #.(swig-lispify "cvEndWriteSeq" 'function)) :pointer
  (writer :pointer))

(cffi:defcfun ("cvFlushSeqWriter" #.(swig-lispify "cvFlushSeqWriter" 'function)) :void
  (writer :pointer))

(cffi:defcfun ("cvStartReadSeq" #.(swig-lispify "cvStartReadSeq" 'function)) :void
  (seq :pointer)
  (reader :pointer)
  (reverse :int))

(cffi:defcfun ("cvGetSeqReaderPos" #.(swig-lispify "cvGetSeqReaderPos" 'function)) :int
  (reader :pointer))

(cffi:defcfun ("cvSetSeqReaderPos" #.(swig-lispify "cvSetSeqReaderPos" 'function)) :void
  (reader :pointer)
  (index :int)
  (is_relative :int))

(cffi:defcfun ("cvCvtSeqToArray" #.(swig-lispify "cvCvtSeqToArray" 'function)) :pointer
  (seq :pointer)
  (elements :pointer)
  (slice #.(swig-lispify "CvSlice" 'classname)))

(cffi:defcfun ("cvMakeSeqHeaderForArray" #.(swig-lispify "cvMakeSeqHeaderForArray" 'function)) :pointer
  (seq_type :int)
  (header_size :int)
  (elem_size :int)
  (elements :pointer)
  (total :int)
  (seq :pointer)
  (block :pointer))

(cffi:defcfun ("cvSeqSlice" #.(swig-lispify "cvSeqSlice" 'function)) :pointer
  (seq :pointer)
  (slice #.(swig-lispify "CvSlice" 'classname))
  (storage :pointer)
  (copy_data :int))

(cffi:defcfun ("cvCloneSeq" #.(swig-lispify "cvCloneSeq" 'function)) :pointer
  (seq :pointer)
  (storage :pointer))

(cffi:defcfun ("cvSeqRemoveSlice" #.(swig-lispify "cvSeqRemoveSlice" 'function)) :void
  (seq :pointer)
  (slice #.(swig-lispify "CvSlice" 'classname)))

(cffi:defcfun ("cvSeqInsertSlice" #.(swig-lispify "cvSeqInsertSlice" 'function)) :void
  (seq :pointer)
  (before_index :int)
  (from_arr :pointer))

(cffi:defctype #.(swig-lispify "CvCmpFunc" 'typename) :pointer)

(cffi:defcfun ("cvSeqSort" #.(swig-lispify "cvSeqSort" 'function)) :void
  (seq :pointer)
  (func :pointer)
  (userdata :pointer))

(cffi:defcfun ("cvSeqSearch" #.(swig-lispify "cvSeqSearch" 'function)) :pointer
  (seq :pointer)
  (elem :pointer)
  (func :pointer)
  (is_sorted :int)
  (elem_idx :pointer)
  (userdata :pointer))

(cffi:defcfun ("cvSeqInvert" #.(swig-lispify "cvSeqInvert" 'function)) :void
  (seq :pointer))

(cffi:defcfun ("cvSeqPartition" #.(swig-lispify "cvSeqPartition" 'function)) :int
  (seq :pointer)
  (storage :pointer)
  (labels :pointer)
  (is_equal :pointer)
  (userdata :pointer))

(cffi:defcfun ("cvChangeSeqBlock" #.(swig-lispify "cvChangeSeqBlock" 'function)) :void
  (reader :pointer)
  (direction :int))

(cffi:defcfun ("cvCreateSeqBlock" #.(swig-lispify "cvCreateSeqBlock" 'function)) :void
  (writer :pointer))

(cffi:defcfun ("cvCreateSet" #.(swig-lispify "cvCreateSet" 'function)) :pointer
  (set_flags :int)
  (header_size :int)
  (elem_size :int)
  (storage :pointer))

(cffi:defcfun ("cvSetAdd" #.(swig-lispify "cvSetAdd" 'function)) :int
  (set_header :pointer)
  (elem :pointer)
  (inserted_elem :pointer))

(cffi:defcfun ("cvSetNew" #.(swig-lispify "cvSetNew" 'function)) :pointer
  (set_header :pointer))

(cffi:defcfun ("cvSetRemoveByPtr" #.(swig-lispify "cvSetRemoveByPtr" 'function)) :void
  (set_header :pointer)
  (elem :pointer))

(cffi:defcfun ("cvSetRemove" #.(swig-lispify "cvSetRemove" 'function)) :void
  (set_header :pointer)
  (index :int))

(cffi:defcfun ("cvGetSetElem" #.(swig-lispify "cvGetSetElem" 'function)) :pointer
  (set_header :pointer)
  (index :int))

(cffi:defcfun ("cvClearSet" #.(swig-lispify "cvClearSet" 'function)) :void
  (set_header :pointer))

(cffi:defcfun ("cvCreateGraph" #.(swig-lispify "cvCreateGraph" 'function)) :pointer
  (graph_flags :int)
  (header_size :int)
  (vtx_size :int)
  (edge_size :int)
  (storage :pointer))

(cffi:defcfun ("cvGraphAddVtx" #.(swig-lispify "cvGraphAddVtx" 'function)) :int
  (graph :pointer)
  (vtx :pointer)
  (inserted_vtx :pointer))

(cffi:defcfun ("cvGraphRemoveVtx" #.(swig-lispify "cvGraphRemoveVtx" 'function)) :int
  (graph :pointer)
  (index :int))

(cffi:defcfun ("cvGraphRemoveVtxByPtr" #.(swig-lispify "cvGraphRemoveVtxByPtr" 'function)) :int
  (graph :pointer)
  (vtx :pointer))

(cffi:defcfun ("cvGraphAddEdge" #.(swig-lispify "cvGraphAddEdge" 'function)) :int
  (graph :pointer)
  (start_idx :int)
  (end_idx :int)
  (edge :pointer)
  (inserted_edge :pointer))

(cffi:defcfun ("cvGraphAddEdgeByPtr" #.(swig-lispify "cvGraphAddEdgeByPtr" 'function)) :int
  (graph :pointer)
  (start_vtx :pointer)
  (end_vtx :pointer)
  (edge :pointer)
  (inserted_edge :pointer))

(cffi:defcfun ("cvGraphRemoveEdge" #.(swig-lispify "cvGraphRemoveEdge" 'function)) :void
  (graph :pointer)
  (start_idx :int)
  (end_idx :int))

(cffi:defcfun ("cvGraphRemoveEdgeByPtr" #.(swig-lispify "cvGraphRemoveEdgeByPtr" 'function)) :void
  (graph :pointer)
  (start_vtx :pointer)
  (end_vtx :pointer))

(cffi:defcfun ("cvFindGraphEdge" #.(swig-lispify "cvFindGraphEdge" 'function)) :pointer
  (graph :pointer)
  (start_idx :int)
  (end_idx :int))

(cffi:defcfun ("cvFindGraphEdgeByPtr" #.(swig-lispify "cvFindGraphEdgeByPtr" 'function)) :pointer
  (graph :pointer)
  (start_vtx :pointer)
  (end_vtx :pointer))

(cffi:defcfun ("cvClearGraph" #.(swig-lispify "cvClearGraph" 'function)) :void
  (graph :pointer))

(cffi:defcfun ("cvGraphVtxDegree" #.(swig-lispify "cvGraphVtxDegree" 'function)) :int
  (graph :pointer)
  (vtx_idx :int))

(cffi:defcfun ("cvGraphVtxDegreeByPtr" #.(swig-lispify "cvGraphVtxDegreeByPtr" 'function)) :int
  (graph :pointer)
  (vtx :pointer))

(cl:defconstant #.(swig-lispify "CV_GRAPH_VERTEX" 'constant) 1)

(cl:defconstant #.(swig-lispify "CV_GRAPH_TREE_EDGE" 'constant) 2)

(cl:defconstant #.(swig-lispify "CV_GRAPH_BACK_EDGE" 'constant) 4)

(cl:defconstant #.(swig-lispify "CV_GRAPH_FORWARD_EDGE" 'constant) 8)

(cl:defconstant #.(swig-lispify "CV_GRAPH_CROSS_EDGE" 'constant) 16)

(cl:defconstant #.(swig-lispify "CV_GRAPH_ANY_EDGE" 'constant) 30)

(cl:defconstant #.(swig-lispify "CV_GRAPH_NEW_TREE" 'constant) 32)

(cl:defconstant #.(swig-lispify "CV_GRAPH_BACKTRACKING" 'constant) 64)

(cl:defconstant #.(swig-lispify "CV_GRAPH_OVER" 'constant) -1)

(cl:defconstant #.(swig-lispify "CV_GRAPH_ALL_ITEMS" 'constant) -1)

(cl:defconstant #.(swig-lispify "CV_GRAPH_ITEM_VISITED_FLAG" 'constant) (cl:ash 1 30))

(cl:defconstant #.(swig-lispify "CV_GRAPH_SEARCH_TREE_NODE_FLAG" 'constant) (cl:ash 1 29))

(cl:defconstant #.(swig-lispify "CV_GRAPH_FORWARD_EDGE_FLAG" 'constant) (cl:ash 1 28))

(cffi:defcstruct #.(swig-lispify "CvGraphScanner" 'classname)
	(#.(swig-lispify "vtx" 'slotname) :pointer)
	(#.(swig-lispify "dst" 'slotname) :pointer)
	(#.(swig-lispify "edge" 'slotname) :pointer)
	(#.(swig-lispify "graph" 'slotname) :pointer)
	(#.(swig-lispify "stack" 'slotname) :pointer)
	(#.(swig-lispify "index" 'slotname) :int)
	(#.(swig-lispify "mask" 'slotname) :int))

(cffi:defctype #.(swig-lispify "CvGraphScanner" 'typename) #.(swig-lispify "CvGraphScanner" 'classname))

(cffi:defcfun ("cvCreateGraphScanner" #.(swig-lispify "cvCreateGraphScanner" 'function)) :pointer
  (graph :pointer)
  (vtx :pointer)
  (mask :int))

(cffi:defcfun ("cvReleaseGraphScanner" #.(swig-lispify "cvReleaseGraphScanner" 'function)) :void
  (scanner :pointer))

(cffi:defcfun ("cvNextGraphItem" #.(swig-lispify "cvNextGraphItem" 'function)) :int
  (scanner :pointer))

(cffi:defcfun ("cvCloneGraph" #.(swig-lispify "cvCloneGraph" 'function)) :pointer
  (graph :pointer)
  (storage :pointer))

(cl:defconstant #.(swig-lispify "CV_FILLED" 'constant) -1)

(cl:defconstant #.(swig-lispify "CV_AA" 'constant) 16)

(cffi:defcfun ("cvLine" #.(swig-lispify "cvLine" 'function)) :void
  (img :pointer)
  (pt1 #.(swig-lispify "CvPoint" 'classname))
  (pt2 #.(swig-lispify "CvPoint" 'classname))
  (color #.(swig-lispify "CvScalar" 'classname))
  (thickness :int)
  (line_type :int)
  (shift :int))

(cffi:defcfun ("cvRectangle" #.(swig-lispify "cvRectangle" 'function)) :void
  (img :pointer)
  (pt1 #.(swig-lispify "CvPoint" 'classname))
  (pt2 #.(swig-lispify "CvPoint" 'classname))
  (color #.(swig-lispify "CvScalar" 'classname))
  (thickness :int)
  (line_type :int)
  (shift :int))

(cffi:defcfun ("cvRectangleR" #.(swig-lispify "cvRectangleR" 'function)) :void
  (img :pointer)
  (r #.(swig-lispify "CvRect" 'classname))
  (color #.(swig-lispify "CvScalar" 'classname))
  (thickness :int)
  (line_type :int)
  (shift :int))

(cffi:defcfun ("cvCircle" #.(swig-lispify "cvCircle" 'function)) :void
  (img :pointer)
  (center #.(swig-lispify "CvPoint" 'classname))
  (radius :int)
  (color #.(swig-lispify "CvScalar" 'classname))
  (thickness :int)
  (line_type :int)
  (shift :int))

(cffi:defcfun ("cvEllipse" #.(swig-lispify "cvEllipse" 'function)) :void
  (img :pointer)
  (center #.(swig-lispify "CvPoint" 'classname))
  (axes #.(swig-lispify "CvSize" 'classname))
  (angle :double)
  (start_angle :double)
  (end_angle :double)
  (color #.(swig-lispify "CvScalar" 'classname))
  (thickness :int)
  (line_type :int)
  (shift :int))

(cffi:defcfun ("cvEllipseBox" #.(swig-lispify "cvEllipseBox" 'function)) :void
  (img :pointer)
  (box #.(swig-lispify "CvBox2D" 'classname))
  (color #.(swig-lispify "CvScalar" 'classname))
  (thickness :int)
  (line_type :int)
  (shift :int))

(cffi:defcfun ("cvFillConvexPoly" #.(swig-lispify "cvFillConvexPoly" 'function)) :void
  (img :pointer)
  (pts :pointer)
  (npts :int)
  (color #.(swig-lispify "CvScalar" 'classname))
  (line_type :int)
  (shift :int))

(cffi:defcfun ("cvFillPoly" #.(swig-lispify "cvFillPoly" 'function)) :void
  (img :pointer)
  (pts :pointer)
  (npts :pointer)
  (contours :int)
  (color #.(swig-lispify "CvScalar" 'classname))
  (line_type :int)
  (shift :int))

(cffi:defcfun ("cvPolyLine" #.(swig-lispify "cvPolyLine" 'function)) :void
  (img :pointer)
  (pts :pointer)
  (npts :pointer)
  (contours :int)
  (is_closed :int)
  (color #.(swig-lispify "CvScalar" 'classname))
  (thickness :int)
  (line_type :int)
  (shift :int))

(cffi:defcfun ("cvClipLine" #.(swig-lispify "cvClipLine" 'function)) :int
  (img_size #.(swig-lispify "CvSize" 'classname))
  (pt1 :pointer)
  (pt2 :pointer))

(cffi:defcfun ("cvInitLineIterator" #.(swig-lispify "cvInitLineIterator" 'function)) :int
  (image :pointer)
  (pt1 #.(swig-lispify "CvPoint" 'classname))
  (pt2 #.(swig-lispify "CvPoint" 'classname))
  (line_iterator :pointer)
  (connectivity :int)
  (left_to_right :int))

(cl:defconstant #.(swig-lispify "CV_FONT_HERSHEY_SIMPLEX" 'constant) 0)

(cl:defconstant #.(swig-lispify "CV_FONT_HERSHEY_PLAIN" 'constant) 1)

(cl:defconstant #.(swig-lispify "CV_FONT_HERSHEY_DUPLEX" 'constant) 2)

(cl:defconstant #.(swig-lispify "CV_FONT_HERSHEY_COMPLEX" 'constant) 3)

(cl:defconstant #.(swig-lispify "CV_FONT_HERSHEY_TRIPLEX" 'constant) 4)

(cl:defconstant #.(swig-lispify "CV_FONT_HERSHEY_COMPLEX_SMALL" 'constant) 5)

(cl:defconstant #.(swig-lispify "CV_FONT_HERSHEY_SCRIPT_SIMPLEX" 'constant) 6)

(cl:defconstant #.(swig-lispify "CV_FONT_HERSHEY_SCRIPT_COMPLEX" 'constant) 7)

(cl:defconstant #.(swig-lispify "CV_FONT_ITALIC" 'constant) 16)

(cl:defconstant #.(swig-lispify "CV_FONT_VECTOR0" 'constant) 0)

(cffi:defcstruct #.(swig-lispify "CvFont" 'classname)
	(#.(swig-lispify "nameFont" 'slotname) :string)
	(#.(swig-lispify "color" 'slotname) #.(swig-lispify "CvScalar" 'classname))
	(#.(swig-lispify "font_face" 'slotname) :int)
	(#.(swig-lispify "ascii" 'slotname) :pointer)
	(#.(swig-lispify "greek" 'slotname) :pointer)
	(#.(swig-lispify "cyrillic" 'slotname) :pointer)
	(#.(swig-lispify "hscale" 'slotname) :float)
	(#.(swig-lispify "vscale" 'slotname) :float)
	(#.(swig-lispify "shear" 'slotname) :float)
	(#.(swig-lispify "thickness" 'slotname) :int)
	(#.(swig-lispify "dx" 'slotname) :float)
	(#.(swig-lispify "line_type" 'slotname) :int))

(cffi:defctype #.(swig-lispify "CvFont" 'typename) #.(swig-lispify "CvFont" 'classname))

(cffi:defcfun ("cvInitFont" #.(swig-lispify "cvInitFont" 'function)) :void
  (font :pointer)
  (font_face :int)
  (hscale :double)
  (vscale :double)
  (shear :double)
  (thickness :int)
  (line_type :int))

(cffi:defcfun ("cvFont" #.(swig-lispify "cvFont" 'function)) #.(swig-lispify "CvFont" 'classname)
  (scale :double)
  (thickness :int))

(cffi:defcfun ("cvPutText" #.(swig-lispify "cvPutText" 'function)) :void
  (img :pointer)
  (text :string)
  (org #.(swig-lispify "CvPoint" 'classname))
  (font :pointer)
  (color #.(swig-lispify "CvScalar" 'classname)))

(cffi:defcfun ("cvGetTextSize" #.(swig-lispify "cvGetTextSize" 'function)) :void
  (text_string :string)
  (font :pointer)
  (text_size :pointer)
  (baseline :pointer))

(cffi:defcfun ("cvColorToScalar" #.(swig-lispify "cvColorToScalar" 'function)) #.(swig-lispify "CvScalar" 'classname)
  (packed_color :double)
  (arrtype :int))

(cffi:defcfun ("cvEllipse2Poly" #.(swig-lispify "cvEllipse2Poly" 'function)) :int
  (center #.(swig-lispify "CvPoint" 'classname))
  (axes #.(swig-lispify "CvSize" 'classname))
  (angle :int)
  (arc_start :int)
  (arc_end :int)
  (pts :pointer)
  (delta :int))

(cffi:defcfun ("cvDrawContours" #.(swig-lispify "cvDrawContours" 'function)) :void
  (img :pointer)
  (contour :pointer)
  (external_color #.(swig-lispify "CvScalar" 'classname))
  (hole_color #.(swig-lispify "CvScalar" 'classname))
  (max_level :int)
  (thickness :int)
  (line_type :int)
  (offset #.(swig-lispify "CvPoint" 'classname)))

(cffi:defcfun ("cvLUT" #.(swig-lispify "cvLUT" 'function)) :void
  (src :pointer)
  (dst :pointer)
  (lut :pointer))

(cffi:defcstruct #.(swig-lispify "CvTreeNodeIterator" 'classname)
	(#.(swig-lispify "node" 'slotname) :pointer)
	(#.(swig-lispify "level" 'slotname) :int)
	(#.(swig-lispify "max_level" 'slotname) :int))

(cffi:defctype #.(swig-lispify "CvTreeNodeIterator" 'typename) #.(swig-lispify "CvTreeNodeIterator" 'classname))

(cffi:defcfun ("cvInitTreeNodeIterator" #.(swig-lispify "cvInitTreeNodeIterator" 'function)) :void
  (tree_iterator :pointer)
  (first :pointer)
  (max_level :int))

(cffi:defcfun ("cvNextTreeNode" #.(swig-lispify "cvNextTreeNode" 'function)) :pointer
  (tree_iterator :pointer))

(cffi:defcfun ("cvPrevTreeNode" #.(swig-lispify "cvPrevTreeNode" 'function)) :pointer
  (tree_iterator :pointer))

(cffi:defcfun ("cvInsertNodeIntoTree" #.(swig-lispify "cvInsertNodeIntoTree" 'function)) :void
  (node :pointer)
  (parent :pointer)
  (frame :pointer))

(cffi:defcfun ("cvRemoveNodeFromTree" #.(swig-lispify "cvRemoveNodeFromTree" 'function)) :void
  (node :pointer)
  (frame :pointer))

(cffi:defcfun ("cvTreeToNodeSeq" #.(swig-lispify "cvTreeToNodeSeq" 'function)) :pointer
  (first :pointer)
  (header_size :int)
  (storage :pointer))

(cl:defconstant #.(swig-lispify "CV_KMEANS_USE_INITIAL_LABELS" 'constant) 1)

(cffi:defcfun ("cvKMeans2" #.(swig-lispify "cvKMeans2" 'function)) :int
  (samples :pointer)
  (cluster_count :int)
  (labels :pointer)
  (termcrit #.(swig-lispify "CvTermCriteria" 'classname))
  (attempts :int)
  (rng :pointer)
  (flags :int)
  (_centers :pointer)
  (compactness :pointer))

(cffi:defcfun ("cvRegisterModule" #.(swig-lispify "cvRegisterModule" 'function)) :int
  (module_info :pointer))

(cffi:defcfun ("cvUseOptimized" #.(swig-lispify "cvUseOptimized" 'function)) :int
  (on_off :int))

(cffi:defcfun ("cvGetModuleInfo" #.(swig-lispify "cvGetModuleInfo" 'function)) :void
  (module_name :string)
  (version :pointer)
  (loaded_addon_plugins :pointer))

(cffi:defctype #.(swig-lispify "CvAllocFunc" 'typename) :pointer)

(cffi:defctype #.(swig-lispify "CvFreeFunc" 'typename) :pointer)

(cffi:defcfun ("cvSetMemoryManager" #.(swig-lispify "cvSetMemoryManager" 'function)) :void
  (alloc_func :pointer)
  (free_func :pointer)
  (userdata :pointer))

(cffi:defctype #.(swig-lispify "Cv_iplCreateImageHeader" 'typename) :pointer)

(cffi:defctype #.(swig-lispify "Cv_iplAllocateImageData" 'typename) :pointer)

(cffi:defctype #.(swig-lispify "Cv_iplDeallocate" 'typename) :pointer)

(cffi:defctype #.(swig-lispify "Cv_iplCreateROI" 'typename) :pointer)

(cffi:defctype #.(swig-lispify "Cv_iplCloneImage" 'typename) :pointer)

(cffi:defcfun ("cvSetIPLAllocators" #.(swig-lispify "cvSetIPLAllocators" 'function)) :void
  (create_header :pointer)
  (allocate_data :pointer)
  (deallocate :pointer)
  (create_roi :pointer)
  (clone_image :pointer))

(cffi:defcfun ("cvOpenFileStorage" #.(swig-lispify "cvOpenFileStorage" 'function)) :pointer
  (filename :string)
  (memstorage :pointer)
  (flags :int))

(cffi:defcfun ("cvReleaseFileStorage" #.(swig-lispify "cvReleaseFileStorage" 'function)) :void
  (fs :pointer))

(cffi:defcfun ("cvAttrValue" #.(swig-lispify "cvAttrValue" 'function)) :string
  (attr :pointer)
  (attr_name :string))

(cffi:defcfun ("cvStartWriteStruct" #.(swig-lispify "cvStartWriteStruct" 'function)) :void
  (fs :pointer)
  (name :string)
  (struct_flags :int)
  (type_name :string)
  (attributes #.(swig-lispify "CvAttrList" 'classname)))

(cffi:defcfun ("cvEndWriteStruct" #.(swig-lispify "cvEndWriteStruct" 'function)) :void
  (fs :pointer))

(cffi:defcfun ("cvWriteInt" #.(swig-lispify "cvWriteInt" 'function)) :void
  (fs :pointer)
  (name :string)
  (value :int))

(cffi:defcfun ("cvWriteReal" #.(swig-lispify "cvWriteReal" 'function)) :void
  (fs :pointer)
  (name :string)
  (value :double))

(cffi:defcfun ("cvWriteString" #.(swig-lispify "cvWriteString" 'function)) :void
  (fs :pointer)
  (name :string)
  (str :string)
  (quote :int))

(cffi:defcfun ("cvWriteComment" #.(swig-lispify "cvWriteComment" 'function)) :void
  (fs :pointer)
  (comment :string)
  (eol_comment :int))

(cffi:defcfun ("cvWrite" #.(swig-lispify "cvWrite" 'function)) :void
  (fs :pointer)
  (name :string)
  (ptr :pointer)
  (attributes #.(swig-lispify "CvAttrList" 'classname)))

(cffi:defcfun ("cvStartNextStream" #.(swig-lispify "cvStartNextStream" 'function)) :void
  (fs :pointer))

(cffi:defcfun ("cvWriteRawData" #.(swig-lispify "cvWriteRawData" 'function)) :void
  (fs :pointer)
  (src :pointer)
  (len :int)
  (dt :string))

(cffi:defcfun ("cvGetHashedKey" #.(swig-lispify "cvGetHashedKey" 'function)) :pointer
  (fs :pointer)
  (name :string)
  (len :int)
  (create_missing :int))

(cffi:defcfun ("cvGetRootFileNode" #.(swig-lispify "cvGetRootFileNode" 'function)) :pointer
  (fs :pointer)
  (stream_index :int))

(cffi:defcfun ("cvGetFileNode" #.(swig-lispify "cvGetFileNode" 'function)) :pointer
  (fs :pointer)
  (map :pointer)
  (key :pointer)
  (create_missing :int))

(cffi:defcfun ("cvGetFileNodeByName" #.(swig-lispify "cvGetFileNodeByName" 'function)) :pointer
  (fs :pointer)
  (map :pointer)
  (name :string))

(cffi:defcfun ("cvReadInt" #.(swig-lispify "cvReadInt" 'function)) :int
  (node :pointer)
  (default_value :int))

(cffi:defcfun ("cvReadIntByName" #.(swig-lispify "cvReadIntByName" 'function)) :int
  (fs :pointer)
  (map :pointer)
  (name :string)
  (default_value :int))

(cffi:defcfun ("cvReadReal" #.(swig-lispify "cvReadReal" 'function)) :double
  (node :pointer)
  (default_value :double))

(cffi:defcfun ("cvReadRealByName" #.(swig-lispify "cvReadRealByName" 'function)) :double
  (fs :pointer)
  (map :pointer)
  (name :string)
  (default_value :double))

(cffi:defcfun ("cvReadString" #.(swig-lispify "cvReadString" 'function)) :string
  (node :pointer)
  (default_value :string))

(cffi:defcfun ("cvReadStringByName" #.(swig-lispify "cvReadStringByName" 'function)) :string
  (fs :pointer)
  (map :pointer)
  (name :string)
  (default_value :string))

(cffi:defcfun ("cvRead" #.(swig-lispify "cvRead" 'function)) :pointer
  (fs :pointer)
  (node :pointer)
  (attributes :pointer))

(cffi:defcfun ("cvReadByName" #.(swig-lispify "cvReadByName" 'function)) :pointer
  (fs :pointer)
  (map :pointer)
  (name :string)
  (attributes :pointer))

(cffi:defcfun ("cvStartReadRawData" #.(swig-lispify "cvStartReadRawData" 'function)) :void
  (fs :pointer)
  (src :pointer)
  (reader :pointer))

(cffi:defcfun ("cvReadRawDataSlice" #.(swig-lispify "cvReadRawDataSlice" 'function)) :void
  (fs :pointer)
  (reader :pointer)
  (count :int)
  (dst :pointer)
  (dt :string))

(cffi:defcfun ("cvReadRawData" #.(swig-lispify "cvReadRawData" 'function)) :void
  (fs :pointer)
  (src :pointer)
  (dst :pointer)
  (dt :string))

(cffi:defcfun ("cvWriteFileNode" #.(swig-lispify "cvWriteFileNode" 'function)) :void
  (fs :pointer)
  (new_node_name :string)
  (node :pointer)
  (embed :int))

(cffi:defcfun ("cvGetFileNodeName" #.(swig-lispify "cvGetFileNodeName" 'function)) :string
  (node :pointer))

(cffi:defcfun ("cvRegisterType" #.(swig-lispify "cvRegisterType" 'function)) :void
  (info :pointer))

(cffi:defcfun ("cvUnregisterType" #.(swig-lispify "cvUnregisterType" 'function)) :void
  (type_name :string))

(cffi:defcfun ("cvFirstType" #.(swig-lispify "cvFirstType" 'function)) :pointer)

(cffi:defcfun ("cvFindType" #.(swig-lispify "cvFindType" 'function)) :pointer
  (type_name :string))

(cffi:defcfun ("cvTypeOf" #.(swig-lispify "cvTypeOf" 'function)) :pointer
  (struct_ptr :pointer))

(cffi:defcfun ("cvRelease" #.(swig-lispify "cvRelease" 'function)) :void
  (struct_ptr :pointer))

(cffi:defcfun ("cvClone" #.(swig-lispify "cvClone" 'function)) :pointer
  (struct_ptr :pointer))

(cffi:defcfun ("cvSave" #.(swig-lispify "cvSave" 'function)) :void
  (filename :string)
  (struct_ptr :pointer)
  (name :string)
  (comment :string)
  (attributes #.(swig-lispify "CvAttrList" 'classname)))

(cffi:defcfun ("cvLoad" #.(swig-lispify "cvLoad" 'function)) :pointer
  (filename :string)
  (memstorage :pointer)
  (name :string)
  (real_name :pointer))

(cffi:defcfun ("cvGetTickCount" #.(swig-lispify "cvGetTickCount" 'function)) :pointer)

(cffi:defcfun ("cvGetTickFrequency" #.(swig-lispify "cvGetTickFrequency" 'function)) :double)

(cl:defconstant #.(swig-lispify "CV_CPU_NONE" 'constant) 0)

(cl:defconstant #.(swig-lispify "CV_CPU_MMX" 'constant) 1)

(cl:defconstant #.(swig-lispify "CV_CPU_SSE" 'constant) 2)

(cl:defconstant #.(swig-lispify "CV_CPU_SSE2" 'constant) 3)

(cl:defconstant #.(swig-lispify "CV_CPU_SSE3" 'constant) 4)

(cl:defconstant #.(swig-lispify "CV_CPU_SSSE3" 'constant) 5)

(cl:defconstant #.(swig-lispify "CV_CPU_SSE4_1" 'constant) 6)

(cl:defconstant #.(swig-lispify "CV_CPU_SSE4_2" 'constant) 7)

(cl:defconstant #.(swig-lispify "CV_CPU_AVX" 'constant) 10)

(cl:defconstant #.(swig-lispify "CV_HARDWARE_MAX_FEATURE" 'constant) 255)

(cffi:defcfun ("cvCheckHardwareSupport" #.(swig-lispify "cvCheckHardwareSupport" 'function)) :int
  (feature :int))

(cffi:defcfun ("cvGetNumThreads" #.(swig-lispify "cvGetNumThreads" 'function)) :int)

(cffi:defcfun ("cvSetNumThreads" #.(swig-lispify "cvSetNumThreads" 'function)) :void
  (threads :int))

(cffi:defcfun ("cvGetThreadNum" #.(swig-lispify "cvGetThreadNum" 'function)) :int)

(cffi:defcfun ("cvGetErrStatus" #.(swig-lispify "cvGetErrStatus" 'function)) :int)

(cffi:defcfun ("cvSetErrStatus" #.(swig-lispify "cvSetErrStatus" 'function)) :void
  (status :int))

(cl:defconstant #.(swig-lispify "CV_ErrModeLeaf" 'constant) 0)

(cl:defconstant #.(swig-lispify "CV_ErrModeParent" 'constant) 1)

(cl:defconstant #.(swig-lispify "CV_ErrModeSilent" 'constant) 2)

(cffi:defcfun ("cvGetErrMode" #.(swig-lispify "cvGetErrMode" 'function)) :int)

(cffi:defcfun ("cvSetErrMode" #.(swig-lispify "cvSetErrMode" 'function)) :int
  (mode :int))

(cffi:defcfun ("cvError" #.(swig-lispify "cvError" 'function)) :void
  (status :int)
  (func_name :string)
  (err_msg :string)
  (file_name :string)
  (line :int))

(cffi:defcfun ("cvErrorStr" #.(swig-lispify "cvErrorStr" 'function)) :string
  (status :int))

(cffi:defcfun ("cvGetErrInfo" #.(swig-lispify "cvGetErrInfo" 'function)) :int
  (errcode_desc :pointer)
  (description :pointer)
  (filename :pointer)
  (line :pointer))

(cffi:defcfun ("cvErrorFromIppStatus" #.(swig-lispify "cvErrorFromIppStatus" 'function)) :int
  (ipp_status :int))

(cffi:defctype #.(swig-lispify "CvErrorCallback" 'typename) :pointer)

(cffi:defcfun ("cvRedirectError" #.(swig-lispify "cvRedirectError" 'function)) :pointer
  (error_handler :pointer)
  (userdata :pointer)
  (prev_userdata :pointer))

(cffi:defcfun ("cvNulDevReport" #.(swig-lispify "cvNulDevReport" 'function)) :int
  (status :int)
  (func_name :string)
  (err_msg :string)
  (file_name :string)
  (line :int)
  (userdata :pointer))

(cffi:defcfun ("cvStdErrReport" #.(swig-lispify "cvStdErrReport" 'function)) :int
  (status :int)
  (func_name :string)
  (err_msg :string)
  (file_name :string)
  (line :int)
  (userdata :pointer))

(cffi:defcfun ("cvGuiBoxReport" #.(swig-lispify "cvGuiBoxReport" 'function)) :int
  (status :int)
  (func_name :string)
  (err_msg :string)
  (file_name :string)
  (line :int)
  (userdata :pointer))

(cffi:defcstruct #.(swig-lispify "CvConnectedComp" 'classname)
	(#.(swig-lispify "area" 'slotname) :double)
	(#.(swig-lispify "value" 'slotname) #.(swig-lispify "CvScalar" 'classname))
	(#.(swig-lispify "rect" 'slotname) #.(swig-lispify "CvRect" 'classname))
	(#.(swig-lispify "contour" 'slotname) :pointer))

(cffi:defctype #.(swig-lispify "CvConnectedComp" 'typename) #.(swig-lispify "CvConnectedComp" 'classname))

(defanonenum 
	(#.(swig-lispify "CV_BLUR_NO_SCALE" 'enumvalue) #.0)
	(#.(swig-lispify "CV_BLUR" 'enumvalue) #.1)
	(#.(swig-lispify "CV_GAUSSIAN" 'enumvalue) #.2)
	(#.(swig-lispify "CV_MEDIAN" 'enumvalue) #.3)
	(#.(swig-lispify "CV_BILATERAL" 'enumvalue) #.4))

(defanonenum 
	(#.(swig-lispify "CV_GAUSSIAN_5x5" 'enumvalue) #.7))

(defanonenum 
	(#.(swig-lispify "CV_INPAINT_NS" 'enumvalue) #.0)
	(#.(swig-lispify "CV_INPAINT_TELEA" 'enumvalue) #.1))

(defanonenum 
	(#.(swig-lispify "CV_SCHARR" 'enumvalue) #.-1)
	(#.(swig-lispify "CV_MAX_SOBEL_KSIZE" 'enumvalue) #.7))

(defanonenum 
	(#.(swig-lispify "CV_BGR2BGRA" 'enumvalue) #.0)
	(#.(swig-lispify "CV_RGB2RGBA" 'enumvalue) #.CV_BGR2BGRA)
	(#.(swig-lispify "CV_BGRA2BGR" 'enumvalue) #.1)
	(#.(swig-lispify "CV_RGBA2RGB" 'enumvalue) #.CV_BGRA2BGR)
	(#.(swig-lispify "CV_BGR2RGBA" 'enumvalue) #.2)
	(#.(swig-lispify "CV_RGB2BGRA" 'enumvalue) #.CV_BGR2RGBA)
	(#.(swig-lispify "CV_RGBA2BGR" 'enumvalue) #.3)
	(#.(swig-lispify "CV_BGRA2RGB" 'enumvalue) #.CV_RGBA2BGR)
	(#.(swig-lispify "CV_BGR2RGB" 'enumvalue) #.4)
	(#.(swig-lispify "CV_RGB2BGR" 'enumvalue) #.CV_BGR2RGB)
	(#.(swig-lispify "CV_BGRA2RGBA" 'enumvalue) #.5)
	(#.(swig-lispify "CV_RGBA2BGRA" 'enumvalue) #.CV_BGRA2RGBA)
	(#.(swig-lispify "CV_BGR2GRAY" 'enumvalue) #.6)
	(#.(swig-lispify "CV_RGB2GRAY" 'enumvalue) #.7)
	(#.(swig-lispify "CV_GRAY2BGR" 'enumvalue) #.8)
	(#.(swig-lispify "CV_GRAY2RGB" 'enumvalue) #.CV_GRAY2BGR)
	(#.(swig-lispify "CV_GRAY2BGRA" 'enumvalue) #.9)
	(#.(swig-lispify "CV_GRAY2RGBA" 'enumvalue) #.CV_GRAY2BGRA)
	(#.(swig-lispify "CV_BGRA2GRAY" 'enumvalue) #.10)
	(#.(swig-lispify "CV_RGBA2GRAY" 'enumvalue) #.11)
	(#.(swig-lispify "CV_BGR2BGR565" 'enumvalue) #.12)
	(#.(swig-lispify "CV_RGB2BGR565" 'enumvalue) #.13)
	(#.(swig-lispify "CV_BGR5652BGR" 'enumvalue) #.14)
	(#.(swig-lispify "CV_BGR5652RGB" 'enumvalue) #.15)
	(#.(swig-lispify "CV_BGRA2BGR565" 'enumvalue) #.16)
	(#.(swig-lispify "CV_RGBA2BGR565" 'enumvalue) #.17)
	(#.(swig-lispify "CV_BGR5652BGRA" 'enumvalue) #.18)
	(#.(swig-lispify "CV_BGR5652RGBA" 'enumvalue) #.19)
	(#.(swig-lispify "CV_GRAY2BGR565" 'enumvalue) #.20)
	(#.(swig-lispify "CV_BGR5652GRAY" 'enumvalue) #.21)
	(#.(swig-lispify "CV_BGR2BGR555" 'enumvalue) #.22)
	(#.(swig-lispify "CV_RGB2BGR555" 'enumvalue) #.23)
	(#.(swig-lispify "CV_BGR5552BGR" 'enumvalue) #.24)
	(#.(swig-lispify "CV_BGR5552RGB" 'enumvalue) #.25)
	(#.(swig-lispify "CV_BGRA2BGR555" 'enumvalue) #.26)
	(#.(swig-lispify "CV_RGBA2BGR555" 'enumvalue) #.27)
	(#.(swig-lispify "CV_BGR5552BGRA" 'enumvalue) #.28)
	(#.(swig-lispify "CV_BGR5552RGBA" 'enumvalue) #.29)
	(#.(swig-lispify "CV_GRAY2BGR555" 'enumvalue) #.30)
	(#.(swig-lispify "CV_BGR5552GRAY" 'enumvalue) #.31)
	(#.(swig-lispify "CV_BGR2XYZ" 'enumvalue) #.32)
	(#.(swig-lispify "CV_RGB2XYZ" 'enumvalue) #.33)
	(#.(swig-lispify "CV_XYZ2BGR" 'enumvalue) #.34)
	(#.(swig-lispify "CV_XYZ2RGB" 'enumvalue) #.35)
	(#.(swig-lispify "CV_BGR2YCrCb" 'enumvalue) #.36)
	(#.(swig-lispify "CV_RGB2YCrCb" 'enumvalue) #.37)
	(#.(swig-lispify "CV_YCrCb2BGR" 'enumvalue) #.38)
	(#.(swig-lispify "CV_YCrCb2RGB" 'enumvalue) #.39)
	(#.(swig-lispify "CV_BGR2HSV" 'enumvalue) #.40)
	(#.(swig-lispify "CV_RGB2HSV" 'enumvalue) #.41)
	(#.(swig-lispify "CV_BGR2Lab" 'enumvalue) #.44)
	(#.(swig-lispify "CV_RGB2Lab" 'enumvalue) #.45)
	(#.(swig-lispify "CV_BayerBG2BGR" 'enumvalue) #.46)
	(#.(swig-lispify "CV_BayerGB2BGR" 'enumvalue) #.47)
	(#.(swig-lispify "CV_BayerRG2BGR" 'enumvalue) #.48)
	(#.(swig-lispify "CV_BayerGR2BGR" 'enumvalue) #.49)
	(#.(swig-lispify "CV_BayerBG2RGB" 'enumvalue) #.CV_BayerRG2BGR)
	(#.(swig-lispify "CV_BayerGB2RGB" 'enumvalue) #.CV_BayerGR2BGR)
	(#.(swig-lispify "CV_BayerRG2RGB" 'enumvalue) #.CV_BayerBG2BGR)
	(#.(swig-lispify "CV_BayerGR2RGB" 'enumvalue) #.CV_BayerGB2BGR)
	(#.(swig-lispify "CV_BGR2Luv" 'enumvalue) #.50)
	(#.(swig-lispify "CV_RGB2Luv" 'enumvalue) #.51)
	(#.(swig-lispify "CV_BGR2HLS" 'enumvalue) #.52)
	(#.(swig-lispify "CV_RGB2HLS" 'enumvalue) #.53)
	(#.(swig-lispify "CV_HSV2BGR" 'enumvalue) #.54)
	(#.(swig-lispify "CV_HSV2RGB" 'enumvalue) #.55)
	(#.(swig-lispify "CV_Lab2BGR" 'enumvalue) #.56)
	(#.(swig-lispify "CV_Lab2RGB" 'enumvalue) #.57)
	(#.(swig-lispify "CV_Luv2BGR" 'enumvalue) #.58)
	(#.(swig-lispify "CV_Luv2RGB" 'enumvalue) #.59)
	(#.(swig-lispify "CV_HLS2BGR" 'enumvalue) #.60)
	(#.(swig-lispify "CV_HLS2RGB" 'enumvalue) #.61)
	(#.(swig-lispify "CV_BayerBG2BGR_VNG" 'enumvalue) #.62)
	(#.(swig-lispify "CV_BayerGB2BGR_VNG" 'enumvalue) #.63)
	(#.(swig-lispify "CV_BayerRG2BGR_VNG" 'enumvalue) #.64)
	(#.(swig-lispify "CV_BayerGR2BGR_VNG" 'enumvalue) #.65)
	(#.(swig-lispify "CV_BayerBG2RGB_VNG" 'enumvalue) #.CV_BayerRG2BGR_VNG)
	(#.(swig-lispify "CV_BayerGB2RGB_VNG" 'enumvalue) #.CV_BayerGR2BGR_VNG)
	(#.(swig-lispify "CV_BayerRG2RGB_VNG" 'enumvalue) #.CV_BayerBG2BGR_VNG)
	(#.(swig-lispify "CV_BayerGR2RGB_VNG" 'enumvalue) #.CV_BayerGB2BGR_VNG)
	(#.(swig-lispify "CV_BGR2HSV_FULL" 'enumvalue) #.66)
	(#.(swig-lispify "CV_RGB2HSV_FULL" 'enumvalue) #.67)
	(#.(swig-lispify "CV_BGR2HLS_FULL" 'enumvalue) #.68)
	(#.(swig-lispify "CV_RGB2HLS_FULL" 'enumvalue) #.69)
	(#.(swig-lispify "CV_HSV2BGR_FULL" 'enumvalue) #.70)
	(#.(swig-lispify "CV_HSV2RGB_FULL" 'enumvalue) #.71)
	(#.(swig-lispify "CV_HLS2BGR_FULL" 'enumvalue) #.72)
	(#.(swig-lispify "CV_HLS2RGB_FULL" 'enumvalue) #.73)
	(#.(swig-lispify "CV_LBGR2Lab" 'enumvalue) #.74)
	(#.(swig-lispify "CV_LRGB2Lab" 'enumvalue) #.75)
	(#.(swig-lispify "CV_LBGR2Luv" 'enumvalue) #.76)
	(#.(swig-lispify "CV_LRGB2Luv" 'enumvalue) #.77)
	(#.(swig-lispify "CV_Lab2LBGR" 'enumvalue) #.78)
	(#.(swig-lispify "CV_Lab2LRGB" 'enumvalue) #.79)
	(#.(swig-lispify "CV_Luv2LBGR" 'enumvalue) #.80)
	(#.(swig-lispify "CV_Luv2LRGB" 'enumvalue) #.81)
	(#.(swig-lispify "CV_BGR2YUV" 'enumvalue) #.82)
	(#.(swig-lispify "CV_RGB2YUV" 'enumvalue) #.83)
	(#.(swig-lispify "CV_YUV2BGR" 'enumvalue) #.84)
	(#.(swig-lispify "CV_YUV2RGB" 'enumvalue) #.85)
	(#.(swig-lispify "CV_COLORCVT_MAX" 'enumvalue) #.100))

(defanonenum 
	(#.(swig-lispify "CV_INTER_NN" 'enumvalue) #.0)
	(#.(swig-lispify "CV_INTER_LINEAR" 'enumvalue) #.1)
	(#.(swig-lispify "CV_INTER_CUBIC" 'enumvalue) #.2)
	(#.(swig-lispify "CV_INTER_AREA" 'enumvalue) #.3)
	(#.(swig-lispify "CV_INTER_LANCZOS4" 'enumvalue) #.4))

(defanonenum 
	(#.(swig-lispify "CV_WARP_FILL_OUTLIERS" 'enumvalue) #.8)
	(#.(swig-lispify "CV_WARP_INVERSE_MAP" 'enumvalue) #.16))

(defanonenum 
	(#.(swig-lispify "CV_SHAPE_RECT" 'enumvalue) #.0)
	(#.(swig-lispify "CV_SHAPE_CROSS" 'enumvalue) #.1)
	(#.(swig-lispify "CV_SHAPE_ELLIPSE" 'enumvalue) #.2)
	(#.(swig-lispify "CV_SHAPE_CUSTOM" 'enumvalue) #.100))

(defanonenum 
	(#.(swig-lispify "CV_MOP_ERODE" 'enumvalue) #.0)
	(#.(swig-lispify "CV_MOP_DILATE" 'enumvalue) #.1)
	(#.(swig-lispify "CV_MOP_OPEN" 'enumvalue) #.2)
	(#.(swig-lispify "CV_MOP_CLOSE" 'enumvalue) #.3)
	(#.(swig-lispify "CV_MOP_GRADIENT" 'enumvalue) #.4)
	(#.(swig-lispify "CV_MOP_TOPHAT" 'enumvalue) #.5)
	(#.(swig-lispify "CV_MOP_BLACKHAT" 'enumvalue) #.6))

(cffi:defcstruct #.(swig-lispify "CvMoments" 'classname)
	(#.(swig-lispify "m00" 'slotname) :double)
	(#.(swig-lispify "m10" 'slotname) :double)
	(#.(swig-lispify "m01" 'slotname) :double)
	(#.(swig-lispify "m20" 'slotname) :double)
	(#.(swig-lispify "m11" 'slotname) :double)
	(#.(swig-lispify "m02" 'slotname) :double)
	(#.(swig-lispify "m30" 'slotname) :double)
	(#.(swig-lispify "m21" 'slotname) :double)
	(#.(swig-lispify "m12" 'slotname) :double)
	(#.(swig-lispify "m03" 'slotname) :double)
	(#.(swig-lispify "mu20" 'slotname) :double)
	(#.(swig-lispify "mu11" 'slotname) :double)
	(#.(swig-lispify "mu02" 'slotname) :double)
	(#.(swig-lispify "mu30" 'slotname) :double)
	(#.(swig-lispify "mu21" 'slotname) :double)
	(#.(swig-lispify "mu12" 'slotname) :double)
	(#.(swig-lispify "mu03" 'slotname) :double)
	(#.(swig-lispify "inv_sqrt_m00" 'slotname) :double))

(cffi:defctype #.(swig-lispify "CvMoments" 'typename) #.(swig-lispify "CvMoments" 'classname))

(cffi:defcstruct #.(swig-lispify "CvHuMoments" 'classname)
	(#.(swig-lispify "hu1" 'slotname) :double)
	(#.(swig-lispify "hu2" 'slotname) :double)
	(#.(swig-lispify "hu3" 'slotname) :double)
	(#.(swig-lispify "hu4" 'slotname) :double)
	(#.(swig-lispify "hu5" 'slotname) :double)
	(#.(swig-lispify "hu6" 'slotname) :double)
	(#.(swig-lispify "hu7" 'slotname) :double))

(cffi:defctype #.(swig-lispify "CvHuMoments" 'typename) #.(swig-lispify "CvHuMoments" 'classname))

(defanonenum 
	(#.(swig-lispify "CV_TM_SQDIFF" 'enumvalue) #.0)
	(#.(swig-lispify "CV_TM_SQDIFF_NORMED" 'enumvalue) #.1)
	(#.(swig-lispify "CV_TM_CCORR" 'enumvalue) #.2)
	(#.(swig-lispify "CV_TM_CCORR_NORMED" 'enumvalue) #.3)
	(#.(swig-lispify "CV_TM_CCOEFF" 'enumvalue) #.4)
	(#.(swig-lispify "CV_TM_CCOEFF_NORMED" 'enumvalue) #.5))

(cffi:defctype #.(swig-lispify "CvDistanceFunction" 'typename) :pointer)

(defanonenum 
	(#.(swig-lispify "CV_RETR_EXTERNAL" 'enumvalue) #.0)
	(#.(swig-lispify "CV_RETR_LIST" 'enumvalue) #.1)
	(#.(swig-lispify "CV_RETR_CCOMP" 'enumvalue) #.2)
	(#.(swig-lispify "CV_RETR_TREE" 'enumvalue) #.3))

(defanonenum 
	(#.(swig-lispify "CV_CHAIN_CODE" 'enumvalue) #.0)
	(#.(swig-lispify "CV_CHAIN_APPROX_NONE" 'enumvalue) #.1)
	(#.(swig-lispify "CV_CHAIN_APPROX_SIMPLE" 'enumvalue) #.2)
	(#.(swig-lispify "CV_CHAIN_APPROX_TC89_L1" 'enumvalue) #.3)
	(#.(swig-lispify "CV_CHAIN_APPROX_TC89_KCOS" 'enumvalue) #.4)
	(#.(swig-lispify "CV_LINK_RUNS" 'enumvalue) #.5))

(cffi:defctype #.(swig-lispify "CvContourScanner" 'typename) :pointer)

(cffi:defcstruct #.(swig-lispify "CvChainPtReader" 'classname)
	(#.(swig-lispify "header_size" 'slotname) :int)
	(#.(swig-lispify "seq" 'slotname) :pointer)
	(#.(swig-lispify "block" 'slotname) :pointer)
	(#.(swig-lispify "ptr" 'slotname) :pointer)
	(#.(swig-lispify "block_min" 'slotname) :pointer)
	(#.(swig-lispify "block_max" 'slotname) :pointer)
	(#.(swig-lispify "delta_index" 'slotname) :int)
	(#.(swig-lispify "prev_elem" 'slotname) :pointer)
	(#.(swig-lispify "code" 'slotname) :char)
	(#.(swig-lispify "pt" 'slotname) #.(swig-lispify "CvPoint" 'classname))
	(#.(swig-lispify "deltas" 'slotname) :pointer))

(cffi:defctype #.(swig-lispify "CvChainPtReader" 'typename) #.(swig-lispify "CvChainPtReader" 'classname))

(cffi:defctype #.(swig-lispify "CvSubdiv2DEdge" 'typename) :pointer)

(cl:defconstant #.(swig-lispify "CV_SUBDIV2D_VIRTUAL_POINT_FLAG" 'constant) (cl:ash 1 30))

(cffi:defcstruct #.(swig-lispify "CvQuadEdge2D" 'classname)
	(#.(swig-lispify "flags" 'slotname) :int)
	(#.(swig-lispify "pt" 'slotname) :pointer)
	(#.(swig-lispify "next" 'slotname) :pointer))

(cffi:defctype #.(swig-lispify "CvQuadEdge2D" 'typename) #.(swig-lispify "CvQuadEdge2D" 'classname))

(cffi:defcstruct #.(swig-lispify "CvSubdiv2DPoint" 'classname)
	(#.(swig-lispify "flags" 'slotname) :int)
	(#.(swig-lispify "first" 'slotname) :pointer)
	(#.(swig-lispify "pt" 'slotname) #.(swig-lispify "CvPoint2D32f" 'classname))
	(#.(swig-lispify "id" 'slotname) :int))

(cffi:defctype #.(swig-lispify "CvSubdiv2DPoint" 'typename) #.(swig-lispify "CvSubdiv2DPoint" 'classname))

(cffi:defcstruct #.(swig-lispify "CvSubdiv2D" 'classname)
	(#.(swig-lispify "flags" 'slotname) :int)
	(#.(swig-lispify "header_size" 'slotname) :int)
	(#.(swig-lispify "h_prev" 'slotname) :pointer)
	(#.(swig-lispify "h_next" 'slotname) :pointer)
	(#.(swig-lispify "v_prev" 'slotname) :pointer)
	(#.(swig-lispify "v_next" 'slotname) :pointer)
	(#.(swig-lispify "total" 'slotname) :int)
	(#.(swig-lispify "elem_size" 'slotname) :int)
	(#.(swig-lispify "block_max" 'slotname) :pointer)
	(#.(swig-lispify "ptr" 'slotname) :pointer)
	(#.(swig-lispify "delta_elems" 'slotname) :int)
	(#.(swig-lispify "storage" 'slotname) :pointer)
	(#.(swig-lispify "free_blocks" 'slotname) :pointer)
	(#.(swig-lispify "first" 'slotname) :pointer)
	(#.(swig-lispify "free_elems" 'slotname) :pointer)
	(#.(swig-lispify "active_count" 'slotname) :int)
	(#.(swig-lispify "edges" 'slotname) :pointer)
	(#.(swig-lispify "quad_edges" 'slotname) :int)
	(#.(swig-lispify "is_geometry_valid" 'slotname) :int)
	(#.(swig-lispify "recent_edge" 'slotname) :pointer)
	(#.(swig-lispify "topleft" 'slotname) #.(swig-lispify "CvPoint2D32f" 'classname))
	(#.(swig-lispify "bottomright" 'slotname) #.(swig-lispify "CvPoint2D32f" 'classname)))

(cffi:defctype #.(swig-lispify "CvSubdiv2D" 'typename) #.(swig-lispify "CvSubdiv2D" 'classname))

(cffi:defcenum #.(swig-lispify "CvSubdiv2DPointLocation" 'enumname)
	(#.(swig-lispify "CV_PTLOC_ERROR" 'enumvalue :keyword) #.-2)
	(#.(swig-lispify "CV_PTLOC_OUTSIDE_RECT" 'enumvalue :keyword) #.-1)
	(#.(swig-lispify "CV_PTLOC_INSIDE" 'enumvalue :keyword) #.0)
	(#.(swig-lispify "CV_PTLOC_VERTEX" 'enumvalue :keyword) #.1)
	(#.(swig-lispify "CV_PTLOC_ON_EDGE" 'enumvalue :keyword) #.2))

(cffi:defcenum #.(swig-lispify "CvNextEdgeType" 'enumname)
	(#.(swig-lispify "CV_NEXT_AROUND_ORG" 'enumvalue :keyword) #.#x00)
	(#.(swig-lispify "CV_NEXT_AROUND_DST" 'enumvalue :keyword) #.#x22)
	(#.(swig-lispify "CV_PREV_AROUND_ORG" 'enumvalue :keyword) #.#x11)
	(#.(swig-lispify "CV_PREV_AROUND_DST" 'enumvalue :keyword) #.#x33)
	(#.(swig-lispify "CV_NEXT_AROUND_LEFT" 'enumvalue :keyword) #.#x13)
	(#.(swig-lispify "CV_NEXT_AROUND_RIGHT" 'enumvalue :keyword) #.#x31)
	(#.(swig-lispify "CV_PREV_AROUND_LEFT" 'enumvalue :keyword) #.#x20)
	(#.(swig-lispify "CV_PREV_AROUND_RIGHT" 'enumvalue :keyword) #.#x02))

(defanonenum 
	(#.(swig-lispify "CV_POLY_APPROX_DP" 'enumvalue) #.0))

(defanonenum 
	(#.(swig-lispify "CV_CONTOURS_MATCH_I1" 'enumvalue) #.1)
	(#.(swig-lispify "CV_CONTOURS_MATCH_I2" 'enumvalue) #.2)
	(#.(swig-lispify "CV_CONTOURS_MATCH_I3" 'enumvalue) #.3))

(defanonenum 
	(#.(swig-lispify "CV_CLOCKWISE" 'enumvalue) #.1)
	(#.(swig-lispify "CV_COUNTER_CLOCKWISE" 'enumvalue) #.2))

(cffi:defcstruct #.(swig-lispify "CvConvexityDefect" 'classname)
	(#.(swig-lispify "start" 'slotname) :pointer)
	(#.(swig-lispify "end" 'slotname) :pointer)
	(#.(swig-lispify "depth_point" 'slotname) :pointer)
	(#.(swig-lispify "depth" 'slotname) :float))

(cffi:defctype #.(swig-lispify "CvConvexityDefect" 'typename) #.(swig-lispify "CvConvexityDefect" 'classname))

(defanonenum 
	(#.(swig-lispify "CV_COMP_CORREL" 'enumvalue) #.0)
	(#.(swig-lispify "CV_COMP_CHISQR" 'enumvalue) #.1)
	(#.(swig-lispify "CV_COMP_INTERSECT" 'enumvalue) #.2)
	(#.(swig-lispify "CV_COMP_BHATTACHARYYA" 'enumvalue) #.3))

(defanonenum 
	(#.(swig-lispify "CV_DIST_MASK_3" 'enumvalue) #.3)
	(#.(swig-lispify "CV_DIST_MASK_5" 'enumvalue) #.5)
	(#.(swig-lispify "CV_DIST_MASK_PRECISE" 'enumvalue) #.0))

(defanonenum 
	(#.(swig-lispify "CV_DIST_USER" 'enumvalue) #.-1)
	(#.(swig-lispify "CV_DIST_L1" 'enumvalue) #.1)
	(#.(swig-lispify "CV_DIST_L2" 'enumvalue) #.2)
	(#.(swig-lispify "CV_DIST_C" 'enumvalue) #.3)
	(#.(swig-lispify "CV_DIST_L12" 'enumvalue) #.4)
	(#.(swig-lispify "CV_DIST_FAIR" 'enumvalue) #.5)
	(#.(swig-lispify "CV_DIST_WELSCH" 'enumvalue) #.6)
	(#.(swig-lispify "CV_DIST_HUBER" 'enumvalue) #.7))

(defanonenum 
	(#.(swig-lispify "CV_THRESH_BINARY" 'enumvalue) #.0)
	(#.(swig-lispify "CV_THRESH_BINARY_INV" 'enumvalue) #.1)
	(#.(swig-lispify "CV_THRESH_TRUNC" 'enumvalue) #.2)
	(#.(swig-lispify "CV_THRESH_TOZERO" 'enumvalue) #.3)
	(#.(swig-lispify "CV_THRESH_TOZERO_INV" 'enumvalue) #.4)
	(#.(swig-lispify "CV_THRESH_MASK" 'enumvalue) #.7)
	(#.(swig-lispify "CV_THRESH_OTSU" 'enumvalue) #.8))

(defanonenum 
	(#.(swig-lispify "CV_ADAPTIVE_THRESH_MEAN_C" 'enumvalue) #.0)
	(#.(swig-lispify "CV_ADAPTIVE_THRESH_GAUSSIAN_C" 'enumvalue) #.1))

(defanonenum 
	(#.(swig-lispify "CV_FLOODFILL_FIXED_RANGE" 'enumvalue) #.(cl:ash 1 16))
	(#.(swig-lispify "CV_FLOODFILL_MASK_ONLY" 'enumvalue) #.(cl:ash 1 17)))

(defanonenum 
	(#.(swig-lispify "CV_CANNY_L2_GRADIENT" 'enumvalue) #.(cl:ash 1 31)))

(defanonenum 
	(#.(swig-lispify "CV_HOUGH_STANDARD" 'enumvalue) #.0)
	(#.(swig-lispify "CV_HOUGH_PROBABILISTIC" 'enumvalue) #.1)
	(#.(swig-lispify "CV_HOUGH_MULTI_SCALE" 'enumvalue) #.2)
	(#.(swig-lispify "CV_HOUGH_GRADIENT" 'enumvalue) #.3))

(cffi:defcfun ("cvAcc" #.(swig-lispify "cvAcc" 'function)) :void
  (image :pointer)
  (sum :pointer)
  (mask :pointer))

(cffi:defcfun ("cvSquareAcc" #.(swig-lispify "cvSquareAcc" 'function)) :void
  (image :pointer)
  (sqsum :pointer)
  (mask :pointer))

(cffi:defcfun ("cvMultiplyAcc" #.(swig-lispify "cvMultiplyAcc" 'function)) :void
  (image1 :pointer)
  (image2 :pointer)
  (acc :pointer)
  (mask :pointer))

(cffi:defcfun ("cvRunningAvg" #.(swig-lispify "cvRunningAvg" 'function)) :void
  (image :pointer)
  (acc :pointer)
  (alpha :double)
  (mask :pointer))

(cffi:defcfun ("cvCopyMakeBorder" #.(swig-lispify "cvCopyMakeBorder" 'function)) :void
  (src :pointer)
  (dst :pointer)
  (offset #.(swig-lispify "CvPoint" 'classname))
  (bordertype :int)
  (value #.(swig-lispify "CvScalar" 'classname)))

(cffi:defcfun ("cvSmooth" #.(swig-lispify "cvSmooth" 'function)) :void
  (src :pointer)
  (dst :pointer)
  (smoothtype :int)
  (size1 :int)
  (size2 :int)
  (sigma1 :double)
  (sigma2 :double))

(cffi:defcfun ("cvFilter2D" #.(swig-lispify "cvFilter2D" 'function)) :void
  (src :pointer)
  (dst :pointer)
  (kernel :pointer)
  (anchor #.(swig-lispify "CvPoint" 'classname)))

(cffi:defcfun ("cvIntegral" #.(swig-lispify "cvIntegral" 'function)) :void
  (image :pointer)
  (sum :pointer)
  (sqsum :pointer)
  (tilted_sum :pointer))

(cffi:defcfun ("cvPyrDown" #.(swig-lispify "cvPyrDown" 'function)) :void
  (src :pointer)
  (dst :pointer)
  (filter :int))

(cffi:defcfun ("cvPyrUp" #.(swig-lispify "cvPyrUp" 'function)) :void
  (src :pointer)
  (dst :pointer)
  (filter :int))

(cffi:defcfun ("cvCreatePyramid" #.(swig-lispify "cvCreatePyramid" 'function)) :pointer
  (img :pointer)
  (extra_layers :int)
  (rate :double)
  (layer_sizes :pointer)
  (bufarr :pointer)
  (calc :int)
  (filter :int))

(cffi:defcfun ("cvReleasePyramid" #.(swig-lispify "cvReleasePyramid" 'function)) :void
  (pyramid :pointer)
  (extra_layers :int))

(cffi:defcfun ("cvPyrSegmentation" #.(swig-lispify "cvPyrSegmentation" 'function)) :void
  (src :pointer)
  (dst :pointer)
  (storage :pointer)
  (comp :pointer)
  (level :int)
  (threshold1 :double)
  (threshold2 :double))

(cffi:defcfun ("cvPyrMeanShiftFiltering" #.(swig-lispify "cvPyrMeanShiftFiltering" 'function)) :void
  (src :pointer)
  (dst :pointer)
  (sp :double)
  (sr :double)
  (max_level :int)
  (termcrit #.(swig-lispify "CvTermCriteria" 'classname)))

(cffi:defcfun ("cvWatershed" #.(swig-lispify "cvWatershed" 'function)) :void
  (image :pointer)
  (markers :pointer))

(cffi:defcfun ("cvInpaint" #.(swig-lispify "cvInpaint" 'function)) :void
  (src :pointer)
  (inpaint_mask :pointer)
  (dst :pointer)
  (inpaintRange :double)
  (flags :int))

(cffi:defcfun ("cvSobel" #.(swig-lispify "cvSobel" 'function)) :void
  (src :pointer)
  (dst :pointer)
  (xorder :int)
  (yorder :int)
  (aperture_size :int))

(cffi:defcfun ("cvLaplace" #.(swig-lispify "cvLaplace" 'function)) :void
  (src :pointer)
  (dst :pointer)
  (aperture_size :int))

(cffi:defcfun ("cvCvtColor" #.(swig-lispify "cvCvtColor" 'function)) :void
  (src :pointer)
  (dst :pointer)
  (code :int))

(cffi:defcfun ("cvResize" #.(swig-lispify "cvResize" 'function)) :void
  (src :pointer)
  (dst :pointer)
  (interpolation :int))

(cffi:defcfun ("cvWarpAffine" #.(swig-lispify "cvWarpAffine" 'function)) :void
  (src :pointer)
  (dst :pointer)
  (map_matrix :pointer)
  (flags :int)
  (fillval #.(swig-lispify "CvScalar" 'classname)))

(cffi:defcfun ("cvGetAffineTransform" #.(swig-lispify "cvGetAffineTransform" 'function)) :pointer
  (src :pointer)
  (dst :pointer)
  (map_matrix :pointer))

(cffi:defcfun ("cv2DRotationMatrix" #.(swig-lispify "cv2DRotationMatrix" 'function)) :pointer
  (center #.(swig-lispify "CvPoint2D32f" 'classname))
  (angle :double)
  (scale :double)
  (map_matrix :pointer))

(cffi:defcfun ("cvWarpPerspective" #.(swig-lispify "cvWarpPerspective" 'function)) :void
  (src :pointer)
  (dst :pointer)
  (map_matrix :pointer)
  (flags :int)
  (fillval #.(swig-lispify "CvScalar" 'classname)))

(cffi:defcfun ("cvGetPerspectiveTransform" #.(swig-lispify "cvGetPerspectiveTransform" 'function)) :pointer
  (src :pointer)
  (dst :pointer)
  (map_matrix :pointer))

(cffi:defcfun ("cvRemap" #.(swig-lispify "cvRemap" 'function)) :void
  (src :pointer)
  (dst :pointer)
  (mapx :pointer)
  (mapy :pointer)
  (flags :int)
  (fillval #.(swig-lispify "CvScalar" 'classname)))

(cffi:defcfun ("cvConvertMaps" #.(swig-lispify "cvConvertMaps" 'function)) :void
  (mapx :pointer)
  (mapy :pointer)
  (mapxy :pointer)
  (mapalpha :pointer))

(cffi:defcfun ("cvLogPolar" #.(swig-lispify "cvLogPolar" 'function)) :void
  (src :pointer)
  (dst :pointer)
  (center #.(swig-lispify "CvPoint2D32f" 'classname))
  (M :double)
  (flags :int))

(cffi:defcfun ("cvLinearPolar" #.(swig-lispify "cvLinearPolar" 'function)) :void
  (src :pointer)
  (dst :pointer)
  (center #.(swig-lispify "CvPoint2D32f" 'classname))
  (maxRadius :double)
  (flags :int))

(cffi:defcfun ("cvUndistort2" #.(swig-lispify "cvUndistort2" 'function)) :void
  (src :pointer)
  (dst :pointer)
  (camera_matrix :pointer)
  (distortion_coeffs :pointer)
  (new_camera_matrix :pointer))

(cffi:defcfun ("cvInitUndistortMap" #.(swig-lispify "cvInitUndistortMap" 'function)) :void
  (camera_matrix :pointer)
  (distortion_coeffs :pointer)
  (mapx :pointer)
  (mapy :pointer))

(cffi:defcfun ("cvInitUndistortRectifyMap" #.(swig-lispify "cvInitUndistortRectifyMap" 'function)) :void
  (camera_matrix :pointer)
  (dist_coeffs :pointer)
  (R :pointer)
  (new_camera_matrix :pointer)
  (mapx :pointer)
  (mapy :pointer))

(cffi:defcfun ("cvUndistortPoints" #.(swig-lispify "cvUndistortPoints" 'function)) :void
  (src :pointer)
  (dst :pointer)
  (camera_matrix :pointer)
  (dist_coeffs :pointer)
  (R :pointer)
  (P :pointer))

(cffi:defcfun ("cvCreateStructuringElementEx" #.(swig-lispify "cvCreateStructuringElementEx" 'function)) :pointer
  (cols :int)
  (rows :int)
  (anchor_x :int)
  (anchor_y :int)
  (shape :int)
  (values :pointer))

(cffi:defcfun ("cvReleaseStructuringElement" #.(swig-lispify "cvReleaseStructuringElement" 'function)) :void
  (element :pointer))

(cffi:defcfun ("cvErode" #.(swig-lispify "cvErode" 'function)) :void
  (src :pointer)
  (dst :pointer)
  (element :pointer)
  (iterations :int))

(cffi:defcfun ("cvDilate" #.(swig-lispify "cvDilate" 'function)) :void
  (src :pointer)
  (dst :pointer)
  (element :pointer)
  (iterations :int))

(cffi:defcfun ("cvMorphologyEx" #.(swig-lispify "cvMorphologyEx" 'function)) :void
  (src :pointer)
  (dst :pointer)
  (temp :pointer)
  (element :pointer)
  (operation :int)
  (iterations :int))

(cffi:defcfun ("cvMoments" #.(swig-lispify "cvMoments" 'function)) :void
  (arr :pointer)
  (moments :pointer)
  (binary :int))

(cffi:defcfun ("cvGetSpatialMoment" #.(swig-lispify "cvGetSpatialMoment" 'function)) :double
  (moments :pointer)
  (x_order :int)
  (y_order :int))

(cffi:defcfun ("cvGetCentralMoment" #.(swig-lispify "cvGetCentralMoment" 'function)) :double
  (moments :pointer)
  (x_order :int)
  (y_order :int))

(cffi:defcfun ("cvGetNormalizedCentralMoment" #.(swig-lispify "cvGetNormalizedCentralMoment" 'function)) :double
  (moments :pointer)
  (x_order :int)
  (y_order :int))

(cffi:defcfun ("cvGetHuMoments" #.(swig-lispify "cvGetHuMoments" 'function)) :void
  (moments :pointer)
  (hu_moments :pointer))

(cffi:defcfun ("cvSampleLine" #.(swig-lispify "cvSampleLine" 'function)) :int
  (image :pointer)
  (pt1 #.(swig-lispify "CvPoint" 'classname))
  (pt2 #.(swig-lispify "CvPoint" 'classname))
  (buffer :pointer)
  (connectivity :int))

(cffi:defcfun ("cvGetRectSubPix" #.(swig-lispify "cvGetRectSubPix" 'function)) :void
  (src :pointer)
  (dst :pointer)
  (center #.(swig-lispify "CvPoint2D32f" 'classname)))

(cffi:defcfun ("cvGetQuadrangleSubPix" #.(swig-lispify "cvGetQuadrangleSubPix" 'function)) :void
  (src :pointer)
  (dst :pointer)
  (map_matrix :pointer))

(cffi:defcfun ("cvMatchTemplate" #.(swig-lispify "cvMatchTemplate" 'function)) :void
  (image :pointer)
  (templ :pointer)
  (result :pointer)
  (method :int))

(cffi:defcfun ("cvCalcEMD2" #.(swig-lispify "cvCalcEMD2" 'function)) :float
  (signature1 :pointer)
  (signature2 :pointer)
  (distance_type :int)
  (distance_func :pointer)
  (cost_matrix :pointer)
  (flow :pointer)
  (lower_bound :pointer)
  (userdata :pointer))

(cffi:defcfun ("cvFindContours" #.(swig-lispify "cvFindContours" 'function)) :int
  (image :pointer)
  (storage :pointer)
  (first_contour :pointer)
  (header_size :int)
  (mode :int)
  (method :int)
  (offset #.(swig-lispify "CvPoint" 'classname)))

(cffi:defcfun ("cvStartFindContours" #.(swig-lispify "cvStartFindContours" 'function)) :pointer
  (image :pointer)
  (storage :pointer)
  (header_size :int)
  (mode :int)
  (method :int)
  (offset #.(swig-lispify "CvPoint" 'classname)))

(cffi:defcfun ("cvFindNextContour" #.(swig-lispify "cvFindNextContour" 'function)) :pointer
  (scanner :pointer))

(cffi:defcfun ("cvSubstituteContour" #.(swig-lispify "cvSubstituteContour" 'function)) :void
  (scanner :pointer)
  (new_contour :pointer))

(cffi:defcfun ("cvEndFindContours" #.(swig-lispify "cvEndFindContours" 'function)) :pointer
  (scanner :pointer))

(cffi:defcfun ("cvApproxChains" #.(swig-lispify "cvApproxChains" 'function)) :pointer
  (src_seq :pointer)
  (storage :pointer)
  (method :int)
  (parameter :double)
  (minimal_perimeter :int)
  (recursive :int))

(cffi:defcfun ("cvStartReadChainPoints" #.(swig-lispify "cvStartReadChainPoints" 'function)) :void
  (chain :pointer)
  (reader :pointer))

(cffi:defcfun ("cvReadChainPoint" #.(swig-lispify "cvReadChainPoint" 'function)) #.(swig-lispify "CvPoint" 'classname)
  (reader :pointer))

(cffi:defcfun ("cvInitSubdivDelaunay2D" #.(swig-lispify "cvInitSubdivDelaunay2D" 'function)) :void
  (subdiv :pointer)
  (rect #.(swig-lispify "CvRect" 'classname)))

(cffi:defcfun ("cvCreateSubdiv2D" #.(swig-lispify "cvCreateSubdiv2D" 'function)) :pointer
  (subdiv_type :int)
  (header_size :int)
  (vtx_size :int)
  (quadedge_size :int)
  (storage :pointer))

(cffi:defcfun ("cvCreateSubdivDelaunay2D" #.(swig-lispify "cvCreateSubdivDelaunay2D" 'function)) :pointer
  (rect #.(swig-lispify "CvRect" 'classname))
  (storage :pointer))

(cffi:defcfun ("cvSubdivDelaunay2DInsert" #.(swig-lispify "cvSubdivDelaunay2DInsert" 'function)) :pointer
  (subdiv :pointer)
  (pt #.(swig-lispify "CvPoint2D32f" 'classname)))

(cffi:defcfun ("cvSubdiv2DLocate" #.(swig-lispify "cvSubdiv2DLocate" 'function)) #.(swig-lispify "CvSubdiv2DPointLocation" 'enumname)
  (subdiv :pointer)
  (pt #.(swig-lispify "CvPoint2D32f" 'classname))
  (edge :pointer)
  (vertex :pointer))

(cffi:defcfun ("cvCalcSubdivVoronoi2D" #.(swig-lispify "cvCalcSubdivVoronoi2D" 'function)) :void
  (subdiv :pointer))

(cffi:defcfun ("cvClearSubdivVoronoi2D" #.(swig-lispify "cvClearSubdivVoronoi2D" 'function)) :void
  (subdiv :pointer))

(cffi:defcfun ("cvFindNearestPoint2D" #.(swig-lispify "cvFindNearestPoint2D" 'function)) :pointer
  (subdiv :pointer)
  (pt #.(swig-lispify "CvPoint2D32f" 'classname)))

(cffi:defcfun ("cvSubdiv2DNextEdge" #.(swig-lispify "cvSubdiv2DNextEdge" 'function)) :pointer
  (edge :pointer))

(cffi:defcfun ("cvSubdiv2DRotateEdge" #.(swig-lispify "cvSubdiv2DRotateEdge" 'function)) :pointer
  (edge :pointer)
  (rotate :int))

(cffi:defcfun ("cvSubdiv2DSymEdge" #.(swig-lispify "cvSubdiv2DSymEdge" 'function)) :pointer
  (edge :pointer))

(cffi:defcfun ("cvSubdiv2DGetEdge" #.(swig-lispify "cvSubdiv2DGetEdge" 'function)) :pointer
  (edge :pointer)
  (type #.(swig-lispify "CvNextEdgeType" 'enumname)))

(cffi:defcfun ("cvSubdiv2DEdgeOrg" #.(swig-lispify "cvSubdiv2DEdgeOrg" 'function)) :pointer
  (edge :pointer))

(cffi:defcfun ("cvSubdiv2DEdgeDst" #.(swig-lispify "cvSubdiv2DEdgeDst" 'function)) :pointer
  (edge :pointer))

(cffi:defcfun ("cvTriangleArea" #.(swig-lispify "cvTriangleArea" 'function)) :double
  (a #.(swig-lispify "CvPoint2D32f" 'classname))
  (b #.(swig-lispify "CvPoint2D32f" 'classname))
  (c #.(swig-lispify "CvPoint2D32f" 'classname)))

(cffi:defcfun ("cvApproxPoly" #.(swig-lispify "cvApproxPoly" 'function)) :pointer
  (src_seq :pointer)
  (header_size :int)
  (storage :pointer)
  (method :int)
  (parameter :double)
  (parameter2 :int))

(cffi:defcfun ("cvArcLength" #.(swig-lispify "cvArcLength" 'function)) :double
  (curve :pointer)
  (slice #.(swig-lispify "CvSlice" 'classname))
  (is_closed :int))

(cffi:defcfun ("cvContourPerimeter" #.(swig-lispify "cvContourPerimeter" 'function)) :double
  (contour :pointer))

(cffi:defcfun ("cvBoundingRect" #.(swig-lispify "cvBoundingRect" 'function)) #.(swig-lispify "CvRect" 'classname)
  (points :pointer)
  (update :int))

(cffi:defcfun ("cvContourArea" #.(swig-lispify "cvContourArea" 'function)) :double
  (contour :pointer)
  (slice #.(swig-lispify "CvSlice" 'classname))
  (oriented :int))

(cffi:defcfun ("cvMinAreaRect2" #.(swig-lispify "cvMinAreaRect2" 'function)) #.(swig-lispify "CvBox2D" 'classname)
  (points :pointer)
  (storage :pointer))

(cffi:defcfun ("cvMinEnclosingCircle" #.(swig-lispify "cvMinEnclosingCircle" 'function)) :int
  (points :pointer)
  (center :pointer)
  (radius :pointer))

(cffi:defcfun ("cvMatchShapes" #.(swig-lispify "cvMatchShapes" 'function)) :double
  (object1 :pointer)
  (object2 :pointer)
  (method :int)
  (parameter :double))

(cffi:defcfun ("cvConvexHull2" #.(swig-lispify "cvConvexHull2" 'function)) :pointer
  (input :pointer)
  (hull_storage :pointer)
  (orientation :int)
  (return_points :int))

(cffi:defcfun ("cvCheckContourConvexity" #.(swig-lispify "cvCheckContourConvexity" 'function)) :int
  (contour :pointer))

(cffi:defcfun ("cvConvexityDefects" #.(swig-lispify "cvConvexityDefects" 'function)) :pointer
  (contour :pointer)
  (convexhull :pointer)
  (storage :pointer))

(cffi:defcfun ("cvFitEllipse2" #.(swig-lispify "cvFitEllipse2" 'function)) #.(swig-lispify "CvBox2D" 'classname)
  (points :pointer))

(cffi:defcfun ("cvMaxRect" #.(swig-lispify "cvMaxRect" 'function)) #.(swig-lispify "CvRect" 'classname)
  (rect1 :pointer)
  (rect2 :pointer))

(cffi:defcfun ("cvBoxPoints" #.(swig-lispify "cvBoxPoints" 'function)) :void
  (box #.(swig-lispify "CvBox2D" 'classname))
  (pt :pointer))

(cffi:defcfun ("cvPointSeqFromMat" #.(swig-lispify "cvPointSeqFromMat" 'function)) :pointer
  (seq_kind :int)
  (mat :pointer)
  (contour_header :pointer)
  (block :pointer))

(cffi:defcfun ("cvPointPolygonTest" #.(swig-lispify "cvPointPolygonTest" 'function)) :double
  (contour :pointer)
  (pt #.(swig-lispify "CvPoint2D32f" 'classname))
  (measure_dist :int))

(cffi:defcfun ("cvCreateHist" #.(swig-lispify "cvCreateHist" 'function)) :pointer
  (dims :int)
  (sizes :pointer)
  (type :int)
  (ranges :pointer)
  (uniform :int))

(cffi:defcfun ("cvSetHistBinRanges" #.(swig-lispify "cvSetHistBinRanges" 'function)) :void
  (hist :pointer)
  (ranges :pointer)
  (uniform :int))

(cffi:defcfun ("cvMakeHistHeaderForArray" #.(swig-lispify "cvMakeHistHeaderForArray" 'function)) :pointer
  (dims :int)
  (sizes :pointer)
  (hist :pointer)
  (data :pointer)
  (ranges :pointer)
  (uniform :int))

(cffi:defcfun ("cvReleaseHist" #.(swig-lispify "cvReleaseHist" 'function)) :void
  (hist :pointer))

(cffi:defcfun ("cvClearHist" #.(swig-lispify "cvClearHist" 'function)) :void
  (hist :pointer))

(cffi:defcfun ("cvGetMinMaxHistValue" #.(swig-lispify "cvGetMinMaxHistValue" 'function)) :void
  (hist :pointer)
  (min_value :pointer)
  (max_value :pointer)
  (min_idx :pointer)
  (max_idx :pointer))

(cffi:defcfun ("cvNormalizeHist" #.(swig-lispify "cvNormalizeHist" 'function)) :void
  (hist :pointer)
  (factor :double))

(cffi:defcfun ("cvThreshHist" #.(swig-lispify "cvThreshHist" 'function)) :void
  (hist :pointer)
  (threshold :double))

(cffi:defcfun ("cvCompareHist" #.(swig-lispify "cvCompareHist" 'function)) :double
  (hist1 :pointer)
  (hist2 :pointer)
  (method :int))

(cffi:defcfun ("cvCopyHist" #.(swig-lispify "cvCopyHist" 'function)) :void
  (src :pointer)
  (dst :pointer))

(cffi:defcfun ("cvCalcBayesianProb" #.(swig-lispify "cvCalcBayesianProb" 'function)) :void
  (src :pointer)
  (number :int)
  (dst :pointer))

(cffi:defcfun ("cvCalcArrHist" #.(swig-lispify "cvCalcArrHist" 'function)) :void
  (arr :pointer)
  (hist :pointer)
  (accumulate :int)
  (mask :pointer))

(cffi:defcfun ("cvCalcHist" #.(swig-lispify "cvCalcHist" 'function)) :void
  (image :pointer)
  (hist :pointer)
  (accumulate :int)
  (mask :pointer))

(cffi:defcfun ("cvCalcArrBackProject" #.(swig-lispify "cvCalcArrBackProject" 'function)) :void
  (image :pointer)
  (dst :pointer)
  (hist :pointer))

(cffi:defcfun ("cvCalcArrBackProjectPatch" #.(swig-lispify "cvCalcArrBackProjectPatch" 'function)) :void
  (image :pointer)
  (dst :pointer)
  (range #.(swig-lispify "CvSize" 'classname))
  (hist :pointer)
  (method :int)
  (factor :double))

(cffi:defcfun ("cvCalcProbDensity" #.(swig-lispify "cvCalcProbDensity" 'function)) :void
  (hist1 :pointer)
  (hist2 :pointer)
  (dst_hist :pointer)
  (scale :double))

(cffi:defcfun ("cvEqualizeHist" #.(swig-lispify "cvEqualizeHist" 'function)) :void
  (src :pointer)
  (dst :pointer))

(cffi:defcfun ("cvDistTransform" #.(swig-lispify "cvDistTransform" 'function)) :void
  (src :pointer)
  (dst :pointer)
  (distance_type :int)
  (mask_size :int)
  (mask :pointer)
  (labels :pointer))

(cffi:defcfun ("cvThreshold" #.(swig-lispify "cvThreshold" 'function)) :double
  (src :pointer)
  (dst :pointer)
  (threshold :double)
  (max_value :double)
  (threshold_type :int))

(cffi:defcfun ("cvAdaptiveThreshold" #.(swig-lispify "cvAdaptiveThreshold" 'function)) :void
  (src :pointer)
  (dst :pointer)
  (max_value :double)
  (adaptive_method :int)
  (threshold_type :int)
  (block_size :int)
  (param1 :double))

(cffi:defcfun ("cvFloodFill" #.(swig-lispify "cvFloodFill" 'function)) :void
  (image :pointer)
  (seed_point #.(swig-lispify "CvPoint" 'classname))
  (new_val #.(swig-lispify "CvScalar" 'classname))
  (lo_diff #.(swig-lispify "CvScalar" 'classname))
  (up_diff #.(swig-lispify "CvScalar" 'classname))
  (comp :pointer)
  (flags :int)
  (mask :pointer))

(cffi:defcfun ("cvCanny" #.(swig-lispify "cvCanny" 'function)) :void
  (image :pointer)
  (edges :pointer)
  (threshold1 :double)
  (threshold2 :double)
  (aperture_size :int))

(cffi:defcfun ("cvPreCornerDetect" #.(swig-lispify "cvPreCornerDetect" 'function)) :void
  (image :pointer)
  (corners :pointer)
  (aperture_size :int))

(cffi:defcfun ("cvCornerEigenValsAndVecs" #.(swig-lispify "cvCornerEigenValsAndVecs" 'function)) :void
  (image :pointer)
  (eigenvv :pointer)
  (block_size :int)
  (aperture_size :int))

(cffi:defcfun ("cvCornerMinEigenVal" #.(swig-lispify "cvCornerMinEigenVal" 'function)) :void
  (image :pointer)
  (eigenval :pointer)
  (block_size :int)
  (aperture_size :int))

(cffi:defcfun ("cvCornerHarris" #.(swig-lispify "cvCornerHarris" 'function)) :void
  (image :pointer)
  (harris_responce :pointer)
  (block_size :int)
  (aperture_size :int)
  (k :double))

(cffi:defcfun ("cvFindCornerSubPix" #.(swig-lispify "cvFindCornerSubPix" 'function)) :void
  (image :pointer)
  (corners :pointer)
  (count :int)
  (win #.(swig-lispify "CvSize" 'classname))
  (zero_zone #.(swig-lispify "CvSize" 'classname))
  (criteria #.(swig-lispify "CvTermCriteria" 'classname)))

(cffi:defcfun ("cvGoodFeaturesToTrack" #.(swig-lispify "cvGoodFeaturesToTrack" 'function)) :void
  (image :pointer)
  (eig_image :pointer)
  (temp_image :pointer)
  (corners :pointer)
  (corner_count :pointer)
  (quality_level :double)
  (min_distance :double)
  (mask :pointer)
  (block_size :int)
  (use_harris :int)
  (k :double))

(cffi:defcfun ("cvHoughLines2" #.(swig-lispify "cvHoughLines2" 'function)) :pointer
  (image :pointer)
  (line_storage :pointer)
  (method :int)
  (rho :double)
  (theta :double)
  (threshold :int)
  (param1 :double)
  (param2 :double))

(cffi:defcfun ("cvHoughCircles" #.(swig-lispify "cvHoughCircles" 'function)) :pointer
  (image :pointer)
  (circle_storage :pointer)
  (method :int)
  (dp :double)
  (min_dist :double)
  (param1 :double)
  (param2 :double)
  (min_radius :int)
  (max_radius :int))

(cffi:defcfun ("cvFitLine" #.(swig-lispify "cvFitLine" 'function)) :void
  (points :pointer)
  (dist_type :int)
  (param :double)
  (reps :double)
  (aeps :double)
  (line :pointer))

(cffi:defcfun ("cvCreateKDTree" #.(swig-lispify "cvCreateKDTree" 'function)) :pointer
  (desc :pointer))

(cffi:defcfun ("cvCreateSpillTree" #.(swig-lispify "cvCreateSpillTree" 'function)) :pointer
  (raw_data :pointer)
  (naive :int)
  (rho :double)
  (tau :double))

(cffi:defcfun ("cvReleaseFeatureTree" #.(swig-lispify "cvReleaseFeatureTree" 'function)) :void
  (tr :pointer))

(cffi:defcfun ("cvFindFeatures" #.(swig-lispify "cvFindFeatures" 'function)) :void
  (tr :pointer)
  (query_points :pointer)
  (indices :pointer)
  (dist :pointer)
  (k :int)
  (emax :int))

(cffi:defcfun ("cvFindFeaturesBoxed" #.(swig-lispify "cvFindFeaturesBoxed" 'function)) :int
  (tr :pointer)
  (bounds_min :pointer)
  (bounds_max :pointer)
  (out_indices :pointer))

(cffi:defcfun ("cvCreateLSH" #.(swig-lispify "cvCreateLSH" 'function)) :pointer
  (ops :pointer)
  (d :int)
  (L :int)
  (k :int)
  (type :int)
  (r :double)
  (seed :pointer))

(cffi:defcfun ("cvCreateMemoryLSH" #.(swig-lispify "cvCreateMemoryLSH" 'function)) :pointer
  (d :int)
  (n :int)
  (L :int)
  (k :int)
  (type :int)
  (r :double)
  (seed :pointer))

(cffi:defcfun ("cvReleaseLSH" #.(swig-lispify "cvReleaseLSH" 'function)) :void
  (lsh :pointer))

(cffi:defcfun ("LSHSize" #.(swig-lispify "LSHSize" 'function)) :unsigned-int
  (lsh :pointer))

(cffi:defcfun ("cvLSHAdd" #.(swig-lispify "cvLSHAdd" 'function)) :void
  (lsh :pointer)
  (data :pointer)
  (indices :pointer))

(cffi:defcfun ("cvLSHRemove" #.(swig-lispify "cvLSHRemove" 'function)) :void
  (lsh :pointer)
  (indices :pointer))

(cffi:defcfun ("cvLSHQuery" #.(swig-lispify "cvLSHQuery" 'function)) :void
  (lsh :pointer)
  (query_points :pointer)
  (indices :pointer)
  (dist :pointer)
  (k :int)
  (emax :int))

(defanonenum 
	(#.(swig-lispify "CV_FONT_LIGHT" 'enumvalue) #.25)
	(#.(swig-lispify "CV_FONT_NORMAL" 'enumvalue) #.50)
	(#.(swig-lispify "CV_FONT_DEMIBOLD" 'enumvalue) #.63)
	(#.(swig-lispify "CV_FONT_BOLD" 'enumvalue) #.75)
	(#.(swig-lispify "CV_FONT_BLACK" 'enumvalue) #.87))

(defanonenum 
	(#.(swig-lispify "CV_STYLE_NORMAL" 'enumvalue) #.0)
	(#.(swig-lispify "CV_STYLE_ITALIC" 'enumvalue) #.1)
	(#.(swig-lispify "CV_STYLE_OBLIQUE" 'enumvalue) #.2))

(cffi:defcfun ("cvFontQt" #.(swig-lispify "cvFontQt" 'function)) #.(swig-lispify "CvFont" 'classname)
  (nameFont :string)
  (pointSize :int)
  (color #.(swig-lispify "CvScalar" 'classname))
  (weight :int)
  (style :int)
  (spacing :int))

(cffi:defcfun ("cvAddText" #.(swig-lispify "cvAddText" 'function)) :void
  (img :pointer)
  (text :string)
  (org #.(swig-lispify "CvPoint" 'classname))
  (arg2 :pointer))

(cffi:defcfun ("cvDisplayOverlay" #.(swig-lispify "cvDisplayOverlay" 'function)) :void
  (name :string)
  (text :string)
  (delayms :int))

(cffi:defcfun ("cvDisplayStatusBar" #.(swig-lispify "cvDisplayStatusBar" 'function)) :void
  (name :string)
  (text :string)
  (delayms :int))

(cffi:defctype #.(swig-lispify "CvOpenGLCallback" 'typename) :pointer)

(cffi:defcfun ("cvCreateOpenGLCallback" #.(swig-lispify "cvCreateOpenGLCallback" 'function)) :void
  (window_name :string)
  (callbackOpenGL :pointer)
  (userdata :pointer)
  (angle :double)
  (zmin :double)
  (zmax :double))

(cffi:defcfun ("cvSaveWindowParameters" #.(swig-lispify "cvSaveWindowParameters" 'function)) :void
  (name :string))

(cffi:defcfun ("cvLoadWindowParameters" #.(swig-lispify "cvLoadWindowParameters" 'function)) :void
  (name :string))

(cffi:defcfun ("cvStartLoop" #.(swig-lispify "cvStartLoop" 'function)) :int
  (pt2Func :pointer)
  (argc :int)
  (argv :pointer))

(cffi:defcfun ("cvStopLoop" #.(swig-lispify "cvStopLoop" 'function)) :void)

(cffi:defctype #.(swig-lispify "CvButtonCallback" 'typename) :pointer)

(defanonenum 
	(#.(swig-lispify "CV_PUSH_BUTTON" 'enumvalue) #.0)
	(#.(swig-lispify "CV_CHECKBOX" 'enumvalue) #.1)
	(#.(swig-lispify "CV_RADIOBOX" 'enumvalue) #.2))

(cffi:defcfun ("cvCreateButton" #.(swig-lispify "cvCreateButton" 'function)) :int
  (button_name :string)
  (on_change :pointer)
  (userdata :pointer)
  (button_type :int)
  (initial_button_state :int))

(cffi:defcfun ("cvInitSystem" #.(swig-lispify "cvInitSystem" 'function)) :int
  (argc :int)
  (argv :pointer))

(cffi:defcfun ("cvStartWindowThread" #.(swig-lispify "cvStartWindowThread" 'function)) :int)

(defanonenum 
	(#.(swig-lispify "CV_WND_PROP_FULLSCREEN" 'enumvalue) #.0)
	(#.(swig-lispify "CV_WND_PROP_AUTOSIZE" 'enumvalue) #.1)
	(#.(swig-lispify "CV_WND_PROP_ASPECTRATIO" 'enumvalue) #.2)
	(#.(swig-lispify "CV_WINDOW_NORMAL" 'enumvalue) #.#x00000000)
	(#.(swig-lispify "CV_WINDOW_AUTOSIZE" 'enumvalue) #.#x00000001)
	(#.(swig-lispify "CV_GUI_EXPANDED" 'enumvalue) #.#x00000000)
	(#.(swig-lispify "CV_GUI_NORMAL" 'enumvalue) #.#x00000010)
	(#.(swig-lispify "CV_WINDOW_FULLSCREEN" 'enumvalue) #.1)
	(#.(swig-lispify "CV_WINDOW_FREERATIO" 'enumvalue) #.#x00000100)
	(#.(swig-lispify "CV_WINDOW_KEEPRATIO" 'enumvalue) #.#x00000000))

(cffi:defcfun ("cvNamedWindow" #.(swig-lispify "cvNamedWindow" 'function)) :int
  (name :string)
  (flags :int))

(cffi:defcfun ("cvSetWindowProperty" #.(swig-lispify "cvSetWindowProperty" 'function)) :void
  (name :string)
  (prop_id :int)
  (prop_value :double))

(cffi:defcfun ("cvGetWindowProperty" #.(swig-lispify "cvGetWindowProperty" 'function)) :double
  (name :string)
  (prop_id :int))

(cffi:defcfun ("cvShowImage" #.(swig-lispify "cvShowImage" 'function)) :void
  (name :string)
  (image :pointer))

(cffi:defcfun ("cvResizeWindow" #.(swig-lispify "cvResizeWindow" 'function)) :void
  (name :string)
  (width :int)
  (height :int))

(cffi:defcfun ("cvMoveWindow" #.(swig-lispify "cvMoveWindow" 'function)) :void
  (name :string)
  (x :int)
  (y :int))

(cffi:defcfun ("cvDestroyWindow" #.(swig-lispify "cvDestroyWindow" 'function)) :void
  (name :string))

(cffi:defcfun ("cvDestroyAllWindows" #.(swig-lispify "cvDestroyAllWindows" 'function)) :void)

(cffi:defcfun ("cvGetWindowHandle" #.(swig-lispify "cvGetWindowHandle" 'function)) :pointer
  (name :string))

(cffi:defcfun ("cvGetWindowName" #.(swig-lispify "cvGetWindowName" 'function)) :string
  (window_handle :pointer))

(cffi:defctype #.(swig-lispify "CvTrackbarCallback" 'typename) :pointer)

(cffi:defcfun ("cvCreateTrackbar" #.(swig-lispify "cvCreateTrackbar" 'function)) :int
  (trackbar_name :string)
  (window_name :string)
  (value :pointer)
  (count :int)
  (on_change :pointer))

(cffi:defctype #.(swig-lispify "CvTrackbarCallback2" 'typename) :pointer)

(cffi:defcfun ("cvCreateTrackbar2" #.(swig-lispify "cvCreateTrackbar2" 'function)) :int
  (trackbar_name :string)
  (window_name :string)
  (value :pointer)
  (count :int)
  (on_change :pointer)
  (userdata :pointer))

(cffi:defcfun ("cvGetTrackbarPos" #.(swig-lispify "cvGetTrackbarPos" 'function)) :int
  (trackbar_name :string)
  (window_name :string))

(cffi:defcfun ("cvSetTrackbarPos" #.(swig-lispify "cvSetTrackbarPos" 'function)) :void
  (trackbar_name :string)
  (window_name :string)
  (pos :int))

(defanonenum 
	(#.(swig-lispify "CV_EVENT_MOUSEMOVE" 'enumvalue) #.0)
	(#.(swig-lispify "CV_EVENT_LBUTTONDOWN" 'enumvalue) #.1)
	(#.(swig-lispify "CV_EVENT_RBUTTONDOWN" 'enumvalue) #.2)
	(#.(swig-lispify "CV_EVENT_MBUTTONDOWN" 'enumvalue) #.3)
	(#.(swig-lispify "CV_EVENT_LBUTTONUP" 'enumvalue) #.4)
	(#.(swig-lispify "CV_EVENT_RBUTTONUP" 'enumvalue) #.5)
	(#.(swig-lispify "CV_EVENT_MBUTTONUP" 'enumvalue) #.6)
	(#.(swig-lispify "CV_EVENT_LBUTTONDBLCLK" 'enumvalue) #.7)
	(#.(swig-lispify "CV_EVENT_RBUTTONDBLCLK" 'enumvalue) #.8)
	(#.(swig-lispify "CV_EVENT_MBUTTONDBLCLK" 'enumvalue) #.9))

(defanonenum 
	(#.(swig-lispify "CV_EVENT_FLAG_LBUTTON" 'enumvalue) #.1)
	(#.(swig-lispify "CV_EVENT_FLAG_RBUTTON" 'enumvalue) #.2)
	(#.(swig-lispify "CV_EVENT_FLAG_MBUTTON" 'enumvalue) #.4)
	(#.(swig-lispify "CV_EVENT_FLAG_CTRLKEY" 'enumvalue) #.8)
	(#.(swig-lispify "CV_EVENT_FLAG_SHIFTKEY" 'enumvalue) #.16)
	(#.(swig-lispify "CV_EVENT_FLAG_ALTKEY" 'enumvalue) #.32))

(cffi:defctype #.(swig-lispify "CvMouseCallback" 'typename) :pointer)

(cffi:defcfun ("cvSetMouseCallback" #.(swig-lispify "cvSetMouseCallback" 'function)) :void
  (window_name :string)
  (on_mouse :pointer)
  (param :pointer))

(defanonenum 
	(#.(swig-lispify "CV_LOAD_IMAGE_UNCHANGED" 'enumvalue) #.-1)
	(#.(swig-lispify "CV_LOAD_IMAGE_GRAYSCALE" 'enumvalue) #.0)
	(#.(swig-lispify "CV_LOAD_IMAGE_COLOR" 'enumvalue) #.1)
	(#.(swig-lispify "CV_LOAD_IMAGE_ANYDEPTH" 'enumvalue) #.2)
	(#.(swig-lispify "CV_LOAD_IMAGE_ANYCOLOR" 'enumvalue) #.4))

(cffi:defcfun ("cvLoadImage" #.(swig-lispify "cvLoadImage" 'function)) :pointer
  (filename :string)
  (iscolor :int))

(cffi:defcfun ("cvLoadImageM" #.(swig-lispify "cvLoadImageM" 'function)) :pointer
  (filename :string)
  (iscolor :int))

(defanonenum 
	(#.(swig-lispify "CV_IMWRITE_JPEG_QUALITY" 'enumvalue) #.1)
	(#.(swig-lispify "CV_IMWRITE_PNG_COMPRESSION" 'enumvalue) #.16)
	(#.(swig-lispify "CV_IMWRITE_PXM_BINARY" 'enumvalue) #.32))

(cffi:defcfun ("cvSaveImage" #.(swig-lispify "cvSaveImage" 'function)) :int
  (filename :string)
  (image :pointer)
  (params :pointer))

(cffi:defcfun ("cvDecodeImage" #.(swig-lispify "cvDecodeImage" 'function)) :pointer
  (buf :pointer)
  (iscolor :int))

(cffi:defcfun ("cvDecodeImageM" #.(swig-lispify "cvDecodeImageM" 'function)) :pointer
  (buf :pointer)
  (iscolor :int))

(cffi:defcfun ("cvEncodeImage" #.(swig-lispify "cvEncodeImage" 'function)) :pointer
  (ext :string)
  (image :pointer)
  (params :pointer))

(defanonenum 
	(#.(swig-lispify "CV_CVTIMG_FLIP" 'enumvalue) #.1)
	(#.(swig-lispify "CV_CVTIMG_SWAP_RB" 'enumvalue) #.2))

(cffi:defcfun ("cvConvertImage" #.(swig-lispify "cvConvertImage" 'function)) :void
  (src :pointer)
  (dst :pointer)
  (flags :int))

(cffi:defcfun ("cvWaitKey" #.(swig-lispify "cvWaitKey" 'function)) :int
  (delay :int))

(cffi:defctype #.(swig-lispify "CvCapture" 'typename) :pointer)

(cffi:defcfun ("cvCreateFileCapture" #.(swig-lispify "cvCreateFileCapture" 'function)) :pointer
  (filename :string))

(defanonenum 
	(#.(swig-lispify "CV_CAP_ANY" 'enumvalue) #.0)
	(#.(swig-lispify "CV_CAP_MIL" 'enumvalue) #.100)
	(#.(swig-lispify "CV_CAP_VFW" 'enumvalue) #.200)
	(#.(swig-lispify "CV_CAP_V4L" 'enumvalue) #.200)
	(#.(swig-lispify "CV_CAP_V4L2" 'enumvalue) #.200)
	(#.(swig-lispify "CV_CAP_FIREWARE" 'enumvalue) #.300)
	(#.(swig-lispify "CV_CAP_FIREWIRE" 'enumvalue) #.300)
	(#.(swig-lispify "CV_CAP_IEEE1394" 'enumvalue) #.300)
	(#.(swig-lispify "CV_CAP_DC1394" 'enumvalue) #.300)
	(#.(swig-lispify "CV_CAP_CMU1394" 'enumvalue) #.300)
	(#.(swig-lispify "CV_CAP_STEREO" 'enumvalue) #.400)
	(#.(swig-lispify "CV_CAP_TYZX" 'enumvalue) #.400)
	(#.(swig-lispify "CV_TYZX_LEFT" 'enumvalue) #.400)
	(#.(swig-lispify "CV_TYZX_RIGHT" 'enumvalue) #.401)
	(#.(swig-lispify "CV_TYZX_COLOR" 'enumvalue) #.402)
	(#.(swig-lispify "CV_TYZX_Z" 'enumvalue) #.403)
	(#.(swig-lispify "CV_CAP_QT" 'enumvalue) #.500)
	(#.(swig-lispify "CV_CAP_UNICAP" 'enumvalue) #.600)
	(#.(swig-lispify "CV_CAP_DSHOW" 'enumvalue) #.700)
	(#.(swig-lispify "CV_CAP_PVAPI" 'enumvalue) #.800))

(cffi:defcfun ("cvCreateCameraCapture" #.(swig-lispify "cvCreateCameraCapture" 'function)) :pointer
  (index :int))

(cffi:defcfun ("cvGrabFrame" #.(swig-lispify "cvGrabFrame" 'function)) :int
  (capture :pointer))

(cffi:defcfun ("cvRetrieveFrame" #.(swig-lispify "cvRetrieveFrame" 'function)) :pointer
  (capture :pointer)
  (streamIdx :int))

(cffi:defcfun ("cvQueryFrame" #.(swig-lispify "cvQueryFrame" 'function)) :pointer
  (capture :pointer))

(cffi:defcfun ("cvReleaseCapture" #.(swig-lispify "cvReleaseCapture" 'function)) :void
  (capture :pointer))

(defanonenum 
	(#.(swig-lispify "CV_CAP_PROP_POS_MSEC" 'enumvalue) #.0)
	(#.(swig-lispify "CV_CAP_PROP_POS_FRAMES" 'enumvalue) #.1)
	(#.(swig-lispify "CV_CAP_PROP_POS_AVI_RATIO" 'enumvalue) #.2)
	(#.(swig-lispify "CV_CAP_PROP_FRAME_WIDTH" 'enumvalue) #.3)
	(#.(swig-lispify "CV_CAP_PROP_FRAME_HEIGHT" 'enumvalue) #.4)
	(#.(swig-lispify "CV_CAP_PROP_FPS" 'enumvalue) #.5)
	(#.(swig-lispify "CV_CAP_PROP_FOURCC" 'enumvalue) #.6)
	(#.(swig-lispify "CV_CAP_PROP_FRAME_COUNT" 'enumvalue) #.7)
	(#.(swig-lispify "CV_CAP_PROP_FORMAT" 'enumvalue) #.8)
	(#.(swig-lispify "CV_CAP_PROP_MODE" 'enumvalue) #.9)
	(#.(swig-lispify "CV_CAP_PROP_BRIGHTNESS" 'enumvalue) #.10)
	(#.(swig-lispify "CV_CAP_PROP_CONTRAST" 'enumvalue) #.11)
	(#.(swig-lispify "CV_CAP_PROP_SATURATION" 'enumvalue) #.12)
	(#.(swig-lispify "CV_CAP_PROP_HUE" 'enumvalue) #.13)
	(#.(swig-lispify "CV_CAP_PROP_GAIN" 'enumvalue) #.14)
	(#.(swig-lispify "CV_CAP_PROP_EXPOSURE" 'enumvalue) #.15)
	(#.(swig-lispify "CV_CAP_PROP_CONVERT_RGB" 'enumvalue) #.16)
	(#.(swig-lispify "CV_CAP_PROP_WHITE_BALANCE" 'enumvalue) #.17)
	(#.(swig-lispify "CV_CAP_PROP_RECTIFICATION" 'enumvalue) #.18)
	(#.(swig-lispify "CV_CAP_PROP_MONOCROME" 'enumvalue) #.19))

(cffi:defcfun ("cvGetCaptureProperty" #.(swig-lispify "cvGetCaptureProperty" 'function)) :double
  (capture :pointer)
  (property_id :int))

(cffi:defcfun ("cvSetCaptureProperty" #.(swig-lispify "cvSetCaptureProperty" 'function)) :int
  (capture :pointer)
  (property_id :int)
  (value :double))

(cffi:defcfun ("cvGetCaptureDomain" #.(swig-lispify "cvGetCaptureDomain" 'function)) :int
  (capture :pointer))

(cffi:defctype #.(swig-lispify "CvVideoWriter" 'typename) :pointer)

(cffi:defcfun ("CV_FOURCC" #.(swig-lispify "CV_FOURCC" 'function)) :int
  (c1 :char)
  (c2 :char)
  (c3 :char)
  (c4 :char))

(cl:defconstant #.(swig-lispify "CV_FOURCC_PROMPT" 'constant) -1)

(cffi:defcfun ("cvCreateVideoWriter" #.(swig-lispify "cvCreateVideoWriter" 'function)) :pointer
  (filename :string)
  (fourcc :int)
  (fps :double)
  (frame_size #.(swig-lispify "CvSize" 'classname))
  (is_color :int))

(cffi:defcfun ("cvWriteFrame" #.(swig-lispify "cvWriteFrame" 'function)) :int
  (writer :pointer)
  (image :pointer))

(cffi:defcfun ("cvReleaseVideoWriter" #.(swig-lispify "cvReleaseVideoWriter" 'function)) :void
  (writer :pointer))



;;; Generated by Verrazano 0.5
;;; WARNING: This is a generated file, editing it is unwise!


(cl:in-package :cl-user)

(cl:defpackage :cl-opencv
  (:use :cffi)
  (:nicknames)
  (:export "-NEW"
           "-CONSTRUCTOR"
           "-OPERATOR-="
           "GRAPH-NEW"
           "GRAPH-CONSTRUCTOR"
           "GRAPH-OPERATOR-="
           "SEQ-READER-NEW"
           "SEQ-READER-CONSTRUCTOR"
           "SEQ-READER-OPERATOR-="
           "SPARSE-MAT-NEW"
           "SPARSE-MAT-CONSTRUCTOR"
           "SPARSE-MAT-OPERATOR-="
           "MODULE-NEW"
           "MODULE-CONSTRUCTOR"
           "MODULE-OPERATOR-="
           "SET-CONSTRUCTOR"
           "SET-OPERATOR-="
           "SEQ-NEW"
           "SEQ-CONSTRUCTOR"
           "SEQ-OPERATOR-="
           "SCALAR-NEW"
           "SCALAR-CONSTRUCTOR"
           "SCALAR-OPERATOR-="
           "STRING-HASH-NODE-NEW"
           "STRING-HASH-NODE-CONSTRUCTOR"
           "STRING-HASH-NODE-OPERATOR-="
           "GRAPH-VTX-2D-NEW"
           "GRAPH-VTX-2D-CONSTRUCTOR"
           "GRAPH-VTX-2D-OPERATOR-="
           "SIZE-2D-32F-NEW"
           "SIZE-2D-32F-CONSTRUCTOR"
           "SIZE-2D-32F-OPERATOR-="
           "GRAPH-EDGE-NEW"
           "GRAPH-EDGE-CONSTRUCTOR"
           "GRAPH-EDGE-OPERATOR-="
           "SUBDIV-2D-POINT-NEW"
           "SUBDIV-2D-POINT-CONSTRUCTOR"
           "SUBDIV-2D-POINT-OPERATOR-="
           "SEQ-BLOCK-NEW"
           "SEQ-BLOCK-CONSTRUCTOR"
           "SEQ-BLOCK-OPERATOR-="
           "RECT-NEW"
           "RECT-CONSTRUCTOR"
           "RECT-OPERATOR-="
           "N-ARRAY-ITERATOR-NEW"
           "N-ARRAY-ITERATOR-CONSTRUCTOR"
           "N-ARRAY-ITERATOR-OPERATOR-="
           "CHAIN-NEW"
           "CHAIN-CONSTRUCTOR"
           "CHAIN-OPERATOR-="
           "LINE-ITERATOR-NEW"
           "LINE-ITERATOR-CONSTRUCTOR"
           "LINE-ITERATOR-OPERATOR-="
           "FONT-NEW"
           "FONT-CONSTRUCTOR"
           "FONT-OPERATOR-="
           "MAT-ND-NEW"
           "MAT-ND-CONSTRUCTOR"
           "MAT-ND-OPERATOR-="
           "SET-ELEM-NEW"
           "SET-ELEM-CONSTRUCTOR"
           "SET-ELEM-OPERATOR-="
           "SPARSE-NODE-NEW"
           "SPARSE-NODE-CONSTRUCTOR"
           "SPARSE-NODE-OPERATOR-="
           "PLUGIN-FUNC-INFO-NEW"
           "PLUGIN-FUNC-INFO-CONSTRUCTOR"
           "PLUGIN-FUNC-INFO-OPERATOR-="
           "POINT-NEW"
           "POINT-CONSTRUCTOR"
           "POINT-OPERATOR-="
           "CONNECTED-COMP-NEW"
           "CONNECTED-COMP-CONSTRUCTOR"
           "CONNECTED-COMP-OPERATOR-="
           "MODULE-INFO-NEW"
           "MODULE-INFO-CONSTRUCTOR"
           "MODULE-INFO-OPERATOR-="
           "CHAIN-PT-READER-NEW"
           "CHAIN-PT-READER-CONSTRUCTOR"
           "CHAIN-PT-READER-OPERATOR-="
           "POINT-2D-32F-NEW"
           "POINT-2D-32F-CONSTRUCTOR"
           "POINT-2D-32F-OPERATOR-="
           "GRAPH-SCANNER-NEW"
           "GRAPH-SCANNER-CONSTRUCTOR"
           "GRAPH-SCANNER-OPERATOR-="
           "BOX-2D-NEW"
           "BOX-2D-CONSTRUCTOR"
           "BOX-2D-OPERATOR-="
           "FILE-NODE-NEW"
           "FILE-NODE-CONSTRUCTOR"
           "FILE-NODE-OPERATOR-="
           "SEQ-WRITER-NEW"
           "SEQ-WRITER-CONSTRUCTOR"
           "SEQ-WRITER-OPERATOR-="
           "TREE-NODE-ITERATOR-NEW"
           "TREE-NODE-ITERATOR-CONSTRUCTOR"
           "TREE-NODE-ITERATOR-OPERATOR-="
           ".-28-NEW"
           ".-28-CONSTRUCTOR"
           "SIZE-OPERATOR-="
           "POINT-3D-32F-NEW"
           "POINT-3D-32F-CONSTRUCTOR"
           "POINT-3D-32F-OPERATOR-="
           "SPARSE-MAT-ITERATOR-NEW"
           "SPARSE-MAT-ITERATOR-CONSTRUCTOR"
           "SPARSE-MAT-ITERATOR-OPERATOR-="
           "QUAD-EDGE-2D-NEW"
           "QUAD-EDGE-2D-CONSTRUCTOR"
           "QUAD-EDGE-2D-OPERATOR-="
           "MEM-STORAGE-POS-NEW"
           "MEM-STORAGE-POS-CONSTRUCTOR"
           "MEM-STORAGE-POS-OPERATOR-="
           "MOMENTS-NEW"
           "MOMENTS-CONSTRUCTOR"
           "MOMENTS-OPERATOR-="
           "MAT-NEW"
           "MAT-CONSTRUCTOR"
           "MAT-OPERATOR-="
           "SUBDIV-2D-NEW"
           "SUBDIV-2D-CONSTRUCTOR"
           "SUBDIV-2D-OPERATOR-="
           "CONTOUR-NEW"
           "CONTOUR-CONSTRUCTOR"
           "CONTOUR-OPERATOR-="
           "POINT-2D-64F-NEW"
           "POINT-2D-64F-CONSTRUCTOR"
           "POINT-2D-64F-OPERATOR-="
           "GRAPH-VTX-NEW"
           "GRAPH-VTX-CONSTRUCTOR"
           "GRAPH-VTX-OPERATOR-="
           "MEM-STORAGE-NEW"
           "MEM-STORAGE-CONSTRUCTOR"
           "MEM-STORAGE-OPERATOR-="
           "ATTR-LIST-NEW"
           "ATTR-LIST-CONSTRUCTOR"
           "ATTR-LIST-OPERATOR-="
           "HISTOGRAM-NEW"
           "HISTOGRAM-CONSTRUCTOR"
           "HISTOGRAM-OPERATOR-="
           "POINT-3D-64F-NEW"
           "POINT-3D-64F-CONSTRUCTOR"
           "POINT-3D-64F-OPERATOR-="
           "MEM-BLOCK-NEW"
           "MEM-BLOCK-CONSTRUCTOR"
           "MEM-BLOCK-OPERATOR-="
           "SLICE-NEW"
           "SLICE-CONSTRUCTOR"
           "SLICE-OPERATOR-="
           "TERM-CRITERIA-NEW"
           "TERM-CRITERIA-CONSTRUCTOR"
           "TERM-CRITERIA-OPERATOR-="
           "64SUF-NEW"
           "64SUF-CONSTRUCTOR"
           "64SUF-OPERATOR-="
           "STRING-NEW"
           "STRING-CONSTRUCTOR"
           "STRING-OPERATOR-="
           "CONVEXITY-DEFECT-NEW"
           "CONVEXITY-DEFECT-CONSTRUCTOR"
           "CONVEXITY-DEFECT-OPERATOR-="
           "HU-MOMENTS-NEW"
           "HU-MOMENTS-CONSTRUCTOR"
           "HU-MOMENTS-OPERATOR-="
           "32SUF-NEW"
           "32SUF-CONSTRUCTOR"
           "32SUF-OPERATOR-="
           "TYPE-NEW"
           "TYPE-CONSTRUCTOR"
           "TYPE-OPERATOR-="
           "LAST"
           "TYPE-INFO-NEW"
           "TYPE-INFO-CONSTRUCTOR"
           "TYPE-INFO-OPERATOR-="
           "LSH-REMOVE"
           "MULTIPLY-ACC"
           "TREE-TO-NODE-SEQ"
           ".-41"
           "SEQ-PUSH-MULTI"
           "GET-3D"
           "SET-IMAGE-ROI"
           "ELLIPSE-2-POLY"
           "GET-2D"
           "ALLOC"
           "COMPLETE-SYMM"
           "GET-1D"
           "SEQ-REMOVE"
           "TRACE"
           "WATERSHED"
           "GET-ROOT-FILE-NODE"
           "RAND-SHUFFLE"
           "HOUGH-CIRCLES"
           "FIRST-TYPE"
           "GET-MAT"
           ".-37"
           "ENCODE-IMAGE"
           "CALC-PCA"
           "READ-BY-NAME"
           "INC-REF-DATA"
           "MODULE"
           "CALC-HIST"
           "XOR"
           "GET-ELEM-TYPE"
           "DEC-REF-DATA"
           "CREATE-OPEN-GL-CALLBACK"
           "SOBEL"
           "PREV-TREE-NODE"
           ".-56"
           "CLEAR-ND"
           "INPAINT"
           "GRAPH-ADD-EDGE"
           "FIND-NEAREST-POINT-2D"
           "SUBDIV-2D-LOCATE"
           "SUBDIV-2D-POINT-LOCATION"
           "CREATE-MAT"
           "READ-CHAIN-POINT"
           "SEQ-POP"
           "USHORT"
           "SUM"
           ".-38"
           "CREATE-GRAPH-SCANNER"
           ".-36"
           "CREATE-SUBDIV-DELAUNAY-2D"
           "SEQ-PUSH"
           "CLEAR-MEM-STORAGE"
           "MAKE-SEQ-HEADER-FOR-ARRAY"
           "FLUSH-SEQ-WRITER"
           "TRIANGLE-AREA"
           "ADAPTIVE-THRESHOLD"
           "BACK-PROJECT-PCA"
           "FIND-CORNER-SUB-PIX"
           ".-61"
           ".-60"
           "SUBDIV-DELAUNAY-2D-INSERT"
           "PERSPECTIVE-TRANSFORM"
           ".-59"
           ".-58"
           ".-57"
           ".-55"
           ".-54"
           ".-53"
           ".-52"
           ".-51"
           "SUBDIV-2D-GET-EDGE"
           "NEXT-EDGE-TYPE"
           "CART-TO-POLAR"
           "CREATE-PYRAMID"
           ".-49"
           ".-48"
           ".-47"
           ".-45"
           "CREATE-HIST"
           ".-43"
           "BOX-POINTS"
           ".-40"
           ".-39"
           ".-35"
           ".-34"
           ".-33"
           ".-32"
           ".-30"
           "REAL-SCALAR"
           ".-22"
           "CREATE-MEM-STORAGE"
           "READ-INT"
           "NEXT-N-ARRAY-SLICE"
           "END-WRITE-STRUCT"
           "ELLIPSE"
           "WARP-PERSPECTIVE"
           "MAX"
           "MEM-STORAGE-ALLOC"
           "MUL-TRANSPOSED"
           "NORMALIZE"
           "LINE"
           "INVERT"
           "SEQ-INSERT"
           "DESTROY-ALL-WINDOWS"
           "EIGEN-VV"
           "ERODE"
           "GET-SIZE"
           "DIST-TRANSFORM"
           "GET-NUM-THREADS"
           "LAPLACE"
           "SCALAR-TO-RAW-DATA"
           "GRAPH-REMOVE-EDGE-BY-PTR"
           "CREATE-MAT-HEADER"
           "POINT-POLYGON-TEST"
           "TYPE-OF"
           "GET-IMAGE"
           "STOP-LOOP"
           "SEQ-SEARCH"
           "CREATE-GRAPH"
           "GRAPH-VTX-2D"
           "WRITE-STRING"
           "GET-PERSPECTIVE-TRANSFORM"
           "SOLVE-POLY"
           "XOR-S"
           "GET-TICK-FREQUENCY"
           "CALC-COVAR-MATRIX"
           "CREATE-TRACKBAR"
           "INIT-LINE-ITERATOR"
           "OPEN-FILE-STORAGE"
           "GET-RAW-DATA"
           "FREE-"
           "SAVE-MEM-STORAGE-POS"
           "FIND-TYPE"
           "EXP"
           "SET-2D"
           "OPEN-GL-CALLBACK"
           "FILL-POLY"
           "COPY-MAKE-BORDER"
           "CHANGE-SEQ-BLOCK"
           "RELEASE-HIST"
           "AVG"
           "DISPLAY-STATUS-BAR"
           "SOLVE"
           "UNREGISTER-TYPE"
           "SUBDIV-2D-ROTATE-EDGE"
           "FIND-FEATURES"
           "CREATE-IMAGE"
           "POINT-SEQ-FROM-MAT"
           "IPL-DEPTH"
           "SEQ-SLICE"
           "LOG-POLAR"
           "CBRT"
           "APPROX-CHAINS"
           "DOT-PRODUCT"
           "RELEASE-VIDEO-WRITER"
           "RELEASE-FILE-STORAGE"
           "RANGE"
           "MUL-SPECTRUMS"
           "GET-RECT-SUB-PIX"
           "PYR-MEAN-SHIFT-FILTERING"
           "RAND-REAL"
           "GET-ERR-INFO"
           "CLONE-MAT-ND"
           "SQUARE-ACC"
           "GET-ERR-STATUS"
           "FIND-GRAPH-EDGE-BY-PTR"
           "CLEAR-SET"
           "CLEAR-SEQ"
           "RELEASE-IMAGE"
           "GET-WINDOW-PROPERTY"
           "UNDISTORT-2"
           "CALC-SUBDIV-VORONOI-2D"
           "GET-COLS"
           "SEQ-POP-FRONT"
           "SET-ERR-MODE"
           "HOUGH-LINES-2"
           "RELEASE-PYRAMID"
           "CALC-ARR-BACK-PROJECT"
           "GET-FILE-NODE-BY-NAME"
           "ERROR-FROM-IPP-STATUS"
           "TRANSFORM"
           "POW"
           "RAND-INT"
           "READ-RAW-DATA-SLICE"
           "INIT-SPARSE-MAT-ITERATOR"
           "BOUNDING-RECT"
           "ROI-TO-RECT"
           "ADD-WEIGHTED"
           "NORMALIZE-HIST"
           "MINUS-STEP"
           "PLUS-STEP"
           "MINUS-DELTA"
           "PLUS-DELTA"
           "ERR"
           "LINE-ITERATOR"
           "CONVERT-IMAGE"
           "SEQ-INVERT"
           "SUBDIV-2D-NEXT-EDGE"
           "AND-S"
           "START-APPEND-TO-SEQ"
           "THRESHOLD"
           "SET-MOUSE-CALLBACK"
           "MOUSE-CALLBACK"
           "SET-DATA"
           "GOOD-FEATURES-TO-TRACK"
           "CHECK-HARDWARE-SUPPORT"
           "LOG"
           "ABS-DIFF-S"
           "GET-ROW"
           "GET-FILE-NODE-NAME"
           "CREATE-CHILD-MEM-STORAGE"
           "SET-REMOVE-BY-PTR"
           "WRITE-INT"
           "IN-RANGE-S"
           "GET-ND"
           "CREATE-FILE-CAPTURE"
           "MIN-AREA-RECT-2"
           "AND"
           "SOLVE-CUBIC"
           "CIRCLE"
           "FILE-NODE-HASH"
           "MAKE-HIST-HEADER-FOR-ARRAY"
           "GRAPH-ADD-EDGE-BY-PTR"
           "READ-REAL-BY-NAME"
           "MAHALANOBIS"
           "FILTER-2D"
           "GET-SEQ-READER-POS"
           "SEQ-INSERT-SLICE"
           "MORPHOLOGY-EX"
           "STD-ERR-REPORT"
           "GET-SET-ELEM"
           "SET-WINDOW-PROPERTY"
           "SCALE-ADD"
           "SET-ERR-STATUS"
           "IS-NA-N"
           "FONT-QT"
           "PYR-DOWN"
           "SET-3D"
           "CORNER-HARRIS"
           "START-LOOP"
           "ADD"
           "POINT-TO-32F"
           "ACC"
           "CREATE-LSH"
           "SUB-S"
           "LSH-SIZE"
           "INIT-FONT"
           "RELEASE-GRAPH-SCANNER"
           "CREATE-SET"
           "CREATE-SEQ"
           "ERROR-STR"
           "CORNER-MIN-EIGEN-VAL"
           "APPROX-POLY"
           "COPY-HIST"
           "GRAB-FRAME"
           "M-SET"
           "LINEAR-POLAR"
           "WAIT-KEY"
           "CREATE-MEMORY-LSH"
           "SEQ-REMOVE-SLICE"
           "CONVEX-HULL-2"
           "INIT-UNDISTORT-RECTIFY-MAP"
           "RELEASE-IMAGE-HEADER"
           "DRAW-CONTOURS"
           ".-50"
           "CVT-SEQ-TO-ARRAY"
           "CLEAR-HIST"
           "CREATE-SEQ-BLOCK"
           "RELEASE-MAT"
           "LUT"
           "MAX-RECT"
           "SET-IMAGE-COI"
           "CEIL"
           "SET-NEW"
           "SEQ-SORT"
           "END-FIND-CONTOURS"
           "UNDISTORT-POINTS"
           "COUNT-NON-ZERO"
           "MATCH-SHAPES"
           "POINT-FROM-32F"
           "RECT-TO-ROI"
           "SAMPLE-LINE"
           "CROSS-PRODUCT"
           "RAND-ARR"
           "SUBDIV-2D-EDGE-ORG"
           "LOAD-WINDOW-PARAMETERS"
           "REMOVE-NODE-FROM-TREE"
           "SV-BK-SB"
           "SUB"
           "START-WINDOW-THREAD"
           "CONTOUR-AREA"
           "CLONE-IMAGE"
           "ADD-S"
           "FLIP"
           "GET-TRACKBAR-POS"
           "WRITE-COMMENT"
           "GET-THREAD-NUM"
           "GET-SUB-RECT"
           "WRITE-REAL"
           "RELEASE-SPARSE-MAT"
           "GRAPH-ADD-VTX"
           "CLONE-GRAPH"
           "CONVERT-MAPS"
           "OR-S"
           "SET-SEQ-READER-POS"
           "END-WRITE-SEQ"
           "POLAR-TO-CART"
           "CHECK-CONTOUR-CONVEXITY"
           "ELLIPSE-BOX"
           "ABS-DIFF"
           "DECODE-IMAGE"
           "RESET-IMAGE-ROI"
           "CMP-S"
           "CALC-BAYESIAN-PROB"
           "SCALAR-ALL"
           "SEQ-POP-MULTI"
           "HIST-TYPE"
           "SVD"
           "REDIRECT-ERROR"
           "IN-RANGE"
           "DECODE-IMAGE-M"
           "CALC-ARR-HIST"
           "SET-REMOVE"
           "ERROR"
           "GET-HASHED-KEY"
           "GET-QUADRANGLE-SUB-PIX"
           "START-READ-RAW-DATA"
           "CREATE-BUTTON"
           "BUTTON-CALLBACK"
           "LOAD"
           "MIN-MAX-LOC"
           "REMAP"
           "DIV"
           "CANNY"
           "SUBDIV-2D-EDGE-DST"
           "RESIZE"
           "PROJECT-PCA"
           "SAVE"
           "CREATE-KD-TREE"
           "MIX-CHANNELS"
           "CORNER-EIGEN-VALS-AND-VECS"
           "CLONE-MAT"
           "CALC-PROB-DENSITY"
           "GET-DIMS"
           "SEQ-ELEM-IDX"
           "FLOOR"
           "DET"
           "CMP"
           "CLEAR-SUBDIV-VORONOI-2D"
           "DILATE"
           "SET-NUM-THREADS"
           "GET-ERR-MODE"
           "INIT-TREE-NODE-ITERATOR"
           "GET-SEQ-ELEM"
           "CREATE-VIDEO-WRITER"
           "GRAPH-REMOVE-EDGE"
           "ATTR-VALUE"
           "COMPARE-HIST"
           "GET-TEXT-SIZE"
           "DISPLAY-OVERLAY"
           "CREATE-SPARSE-MAT"
           "CONVERT-SCALE"
           "ERROR-CALLBACK"
           "LSH-OPERATIONS"
           "CREATE-TRACKBAR-2"
           "TRACKBAR-CALLBACK-2"
           "GET-DIAG"
           "RESTORE-MEM-STORAGE-POS"
           "READ-STRING"
           "WRITE-FILE-NODE"
           "CREATE-MAT-ND"
           "GENERIC-HASH"
           "START-WRITE-STRUCT"
           "GET-FILE-NODE"
           "STR"
           "STRING-HASH-NODE"
           "START-READ-SEQ"
           "SEQ-READER"
           "RELEASE-DATA"
           "CALC-ARR-BACK-PROJECT-PATCH"
           "THRESH-HIST"
           "GUI-BOX-REPORT"
           "GET-CAPTURE-PROPERTY"
           "SUBDIV-2D-SYM-EDGE"
           "GET-TICK-COUNT"
           "START-WRITE-SEQ"
           "RELEASE-STRUCTURING-ELEMENT"
           "CREATE-SPILL-TREE"
           "FLOOD-FILL"
           "VALUE"
           "AREA"
           "CONNECTED-COMP"
           "NUL-DEV-REPORT"
           "MUL"
           "INIT-MAT-ND-HEADER"
           "MEM-STORAGE-ALLOC-STRING"
           "LOAD-IMAGE"
           "GET-AFFINE-TRANSFORM"
           "SEQ-WRITER"
           "CREATE-STRUCTURING-ELEMENT-EX"
           "INTEGRAL"
           "INIT-SYSTEM"
           "DFT"
           "GET-DIM-SIZE"
           "SET-MEMORY-MANAGER"
           "FREE-FUNC"
           "USE-OPTIMIZED"
           "COPY"
           "IS-INF"
           "POINT-3D-32F"
           "M-GET"
           "DCT"
           "RESHAPE"
           "WRITE-FRAME"
           "VIDEO-WRITER"
           "REDUCE"
           "CREATE-CAMERA-CAPTURE"
           "SET-ADD"
           "GET-CAPTURE-DOMAIN"
           "TRANSPOSE"
           "REGISTER-TYPE"
           "GET-MIN-MAX-HIST-VALUE"
           "CREATE-DATA"
           "GRAPH-REMOVE-VTX"
           "ROUND"
           "GET-REAL-ND"
           "GET-WINDOW-NAME"
           "2D-ROTATION-MATRIX"
           "GET-OPTIMAL-DFT-SIZE"
           "PYR-SEGMENTATION"
           "GRAPH-VTX-DEGREE"
           "LSH-QUERY"
           "CREATE-IMAGE-HEADER"
           "FILL-CONVEX-POLY"
           "RELEASE-MAT-ND"
           "GET-NEXT-SPARSE-NODE"
           "CURIDX"
           "SPARSE-MAT-ITERATOR"
           "HASHVAL"
           "SPARSE-NODE"
           "QUAD-EDGE-2D"
           "SUBDIV-2D-POINT"
           "IPL-ROI"
           "RELEASE-MEM-STORAGE"
           "PTR-ND"
           "GET-NORMALIZED-CENTRAL-MOMENT"
           "CHECK-ARR"
           "FIND-FEATURES-BOXED"
           "RELEASE-FEATURE-TREE"
           "FEATURE-TREE"
           "MEM-STORAGE-POS"
           "NORM"
           "INIT-IMAGE-HEADER"
           "OR"
           "SAVE-WINDOW-PARAMETERS"
           "SET-HIST-BIN-RANGES"
           "RAW-DATA-TO-SCALAR"
           "SEQ-PUSH-FRONT"
           "RELEASE-LSH"
           "RELEASE-CAPTURE"
           "CREATE-SUBDIV-2D"
           "SET-CAPTURE-PROPERTY"
           "PTR-1D"
           "CLEAR-GRAPH"
           "MIN-S"
           "SET-TRACKBAR-POS"
           "SET-ND"
           "NOT"
           "GET-IMAGE-COI"
           "MERGE"
           "SET-SEQ-BLOCK-SIZE"
           "SHOW-IMAGE"
           "GRAPH-REMOVE-VTX-BY-PTR"
           "POINT-2D-SEQ"
           "RESERVED"
           "CONTOUR"
           "MOVE-WINDOW"
           "IPL-TILE-INFO"
           "SET-REAL-ND"
           "SUBSTITUTE-CONTOUR"
           "FIT-LINE"
           "FIND-CONTOURS"
           "CLONE-SPARSE-MAT"
           "IDXOFFSET"
           "VALOFFSET"
           "HASHSIZE"
           "HASHTABLE"
           "HEAP"
           "SPARSE-MAT"
           "STATUS"
           "CONVERT-SCALE-ABS"
           "GET-WINDOW-HANDLE"
           "PRE-CORNER-DETECT"
           "RETRIEVE-FRAME"
           "FIT-ELLIPSE-2"
           "ANGLE"
           "CENTER"
           "BOX-2D"
           "SIZE-2D-32F"
           "LOAD-IMAGE-M"
           "DESTROY-WINDOW"
           "GET-ROWS"
           "SAVE-IMAGE"
           "START-FIND-CONTOURS"
           "INIT-N-ARRAY-ITERATOR"
           "HDR"
           "N-ARRAY-ITERATOR"
           "RUNNING-AVG"
           "REPEAT"
           "GET-HU-MOMENTS"
           "INIT-UNDISTORT-MAP"
           "GET-REAL-3D"
           "ATTR"
           "ATTR-LIST"
           "AVG-SDV"
           "GET-REAL-2D"
           "SMOOTH"
           "GET-REAL-1D"
           "RECTANGLE-R"
           "MIN"
           "MIN-ENCLOSING-CIRCLE"
           "POINT-2D-64F"
           ".-63"
           ".-62"
           "THRESH-2"
           "THRESH"
           "BINS"
           "HISTOGRAM"
           "PTR-3D"
           "POLY-LINE"
           "PTR-2D"
           "UCHAR"
           "NEXT-GRAPH-ITEM"
           "MASK"
           "INDEX"
           "STACK"
           "EDGE"
           "DST"
           "GRAPH-SCANNER"
           "INIT-MAT-HEADER"
           "CONVEXITY-DEFECTS"
           "Z"
           "POINT-3D-64F"
           "ALLOC-FUNC"
           "LSH-ADD"
           "FIND-NEXT-CONTOUR"
           "WARP-AFFINE"
           "GET-CENTRAL-MOMENT"
           "RECTANGLE"
           "CLIP-LINE"
           "SIZE"
           ".-46"
           "CLONE-SEQ"
           "CONTOUR-PERIMETER"
           ".-44"
           "CREATE-MAT-ND-HEADER"
           "DIM"
           "DIMS"
           "MAT-ND"
           "SET-1D"
           "GET-SPATIAL-MOMENT"
           "SET-ZERO"
           ".-42"
           "CVT-COLOR"
           "IPLONV-KERNEL"
           "N-SHIFT-R"
           "SET-REAL-3D"
           "INSERT-NODE-INTO-TREE"
           "ADD-TEXT"
           "MATCH-TEMPLATE"
           "INIT-SUBDIV-DELAUNAY-2D"
           "BOTTOMRIGHT"
           "TOPLEFT"
           "RECENT-EDGE"
           "IS-GEOMETRY-VALID"
           "QUAD-EDGES"
           "SUBDIV-2D"
           "POINT-2D-32F"
           "SUBDIV-2D-EDGE"
           "SIZE-T"
           "SET-REAL-2D"
           "SET-REAL-1D"
           "READ-REAL"
           "GEMM"
           "SEQ-PARTITION"
           "CMP-FUNC"
           "K-MEANS-2"
           "RNG"
           "SLICE-LENGTH"
           "MAX-S"
           "SPLIT"
           "WRITE-RAW-DATA"
           "IPLONV-KERNEL-FP"
           "VALUES"
           "ANCHOR-Y"
           "ANCHOR-X"
           "N-ROWS"
           "NOLS"
           "PYR-UP"
           "READ-RAW-DATA"
           "PUT-TEXT"
           "LINE-TYPE"
           "DX"
           "THICKNESS"
           "SHEAR"
           "VSCALE"
           "HSCALE"
           "CYRILLIC"
           "GREEK"
           "ASCII"
           "FONT-FACE"
           "COLOR"
           "NAME-FONT"
           "FONT"
           "READ-STRING-BY-NAME"
           "64SUF"
           "UINT-64"
           "UINT-64-T"
           "INT-64"
           "INT-64-T"
           "CONTOUR-SCANNER"
           "RESIZE-WINDOW"
           "EQUALIZE-HIST"
           "GET-MODULE-INFO"
           "TRACKBAR-CALLBACK"
           "QUERY-FRAME"
           "NEXT-TREE-NODE"
           "MAX-LEVEL"
           "LEVEL"
           "NODE"
           "TREE-NODE-ITERATOR"
           "RESHAPE-MAT-ND"
           "NAMED-WINDOW"
           "INV-SQRT-M-00"
           "MU-03"
           "MU-12"
           "MU-21"
           "MU-30"
           "MU-02"
           "MU-11"
           "MU-20"
           "M-03"
           "M-12"
           "M-21"
           "M-30"
           "M-02"
           "M-11"
           "M-20"
           "M-01"
           "M-10"
           "M-00"
           "MOMENTS"
           "GET-COL"
           ""
           "HDR-REFCOUNT"
           "REFCOUNT"
           "STEP"
           "MAT"
           "REGISTER-MODULE"
           "FUNC-TAB"
           "VERSION"
           "NAME"
           "MODULE-INFO"
           "LOADED-FROM"
           "SEARCH-MODULES"
           "FUNC-NAMES"
           "DEFAULT-FUNC-ADDR"
           "FUNC-ADDR"
           "PLUGIN-FUNC-INFO"
           "LEN"
           "STRING"
           "DEPTH-POINT"
           "END"
           "START"
           "CONVEXITY-DEFECT"
           "START-NEXT-STREAM"
           "ARC-LENGTH"
           "END-INDEX"
           "SLICE"
           "SORT"
           "FAST-ARCTAN"
           "HU-7"
           "HU-6"
           "HU-5"
           "HU-4"
           "HU-3"
           "HU-2"
           "HU-1"
           "HU-MOMENTS"
           "CAPTURE"
           "START-READ-CHAIN-POINTS"
           "DELTAS"
           "PT"
           "CODE"
           "PREV-ELEM"
           "DELTA-INDEX"
           "BLOCK-MIN"
           "BLOCK"
           "CHAIN-PT-READER"
           "CHAIN"
           "POINT"
           "CALC-EMD-2"
           "DISTANCE-FUNCTION"
           "GRAPH-VTX-DEGREE-BY-PTR"
           "SUB-RS"
           "SET-IDENTITY"
           "LSH"
           ".-31"
           "F"
           "U"
           "I"
           "32SUF"
           "GET-IMAGE-ROI"
           "IPL-IMAGE"
           "IMAGE-DATA-ORIGIN"
           "BORDERONST"
           "BORDER-MODE"
           "WIDTH-STEP"
           "IMAGE-DATA"
           "IMAGE-SIZE"
           "TILE-INFO"
           "IMAGE-ID"
           "MASK-ROI"
           "ROI"
           "ALIGN"
           "ORIGIN"
           "DATA-ORDER"
           "CHANNEL-SEQ"
           "COLOR-MODEL"
           "DEPTH"
           "ALPHAHANNEL"
           "NHANNELS"
           "ID"
           "N-SIZE"
           "Y-OFFSET"
           "X-OFFSET"
           "COI"
           "HEIGHT"
           "WIDTH"
           "Y"
           "X"
           "RECT"
           "CHECK-TERM-CRITERIA"
           "EPSILON"
           "MAX-ITER"
           "TYPE"
           "TERM-CRITERIA"
           "ARR"
           "FIND-GRAPH-EDGE"
           "EDGES"
           "GRAPH"
           "ACTIVE-COUNT"
           "FREE-ELEMS"
           "SET"
           "NEXT-FREE"
           "SET-ELEM"
           "FREE-BLOCKS"
           "STORAGE"
           "DELTA-ELEMS"
           "PTR"
           "BLOCK-MAX"
           "ELEM-SIZE"
           "TOTAL"
           "V-NEXT"
           "V-PREV"
           "H-NEXT"
           "H-PREV"
           "SEQ"
           "COUNT"
           "START-INDEX"
           "SEQ-BLOCK"
           "FREE-SPACE"
           "BLOCK-SIZE"
           "PARENT"
           "TOP"
           "BOTTOM"
           "SIGNATURE"
           "MEM-STORAGE"
           "MEM-BLOCK"
           "SCHAR"
           "VTX"
           "WEIGHT"
           "GRAPH-EDGE"
           "FIRST"
           "GRAPH-VTX"
           "COLOR-TO-SCALAR"
           "VAL"
           "SCALAR"
           "READ-INT-BY-NAME"
           "DATA"
           "INFO"
           "TAG"
           "FILE-NODE"
           "CLONE"
           "WRITE"
           "READ"
           "RELEASE"
           "IS-INSTANCE"
           "TYPE-NAME"
           "NEXT"
           "PREV"
           "HEADER-SIZE"
           "FLAGS"
           "TYPE-INFO"
           "CLONE-FUNC"
           "WRITE-FUNC"
           "READ-FUNC"
           "RELEASE-FUNC"
           "IS-INSTANCE-FUNC"
           "FILE-STORAGE"
           "SET-IPL-ALLOCATORS"))

(cl:in-package :cl-opencv)

(cl:defun vtable-lookup (pobj indx coff)
  (cl:let ((vptr (cffi:mem-ref pobj :pointer coff)))
    (cffi:mem-aref vptr :pointer (cl:- indx 2))))

(cl:defmacro virtual-funcall (pobj indx coff cl:&body body)
  `(cffi:foreign-funcall-pointer (vtable-lookup ,pobj ,indx ,coff) ,cl:nil
                                 ,@body))

(cffi::defctype _ipl-create-image-header :pointer)

(cffi::defctype _ipl-allocate-image-data :pointer)

(cffi::defctype _ipl-deallocate :pointer)

(cffi::defctype _ipl-create-roi :pointer)

(cffi::defctype _ipl-clone-image :pointer)

(cffi:defcfun ("cvSetIPLAllocators" set-ipl-allocators) :void
                                                              (create-header _ipl-create-image-header)
                                                              (allocate-data _ipl-allocate-image-data)
                                                              (deallocate _ipl-deallocate)
                                                              (create-roi _ipl-create-roi)
                                                              (clone-image _ipl-clone-image))

(cffi:defcstruct file-storage
  )

(cffi::defctype is-instance-func :pointer)

(cffi::defctype release-func :pointer)

(cffi::defctype read-func :pointer)

(cffi::defctype write-func :pointer)

(cffi::defctype clone-func :pointer)

(cffi:defcstruct type-info
  (flags :int)
  (header-size :int)
  (prev :pointer)
  (next :pointer)
  (type-name :pointer)
  (is-instance is-instance-func)
  (release release-func)
  (read read-func)
  (write write-func)
  (clone clone-func))
;;; Skipping anonymous composite type #<UNION <anonymous> {1009087901}>

(cffi:defcstruct file-node
  (tag :int)
  (info :pointer)
  (data ;;; Skipping anonymous type #<UNION <anonymous> {1009087901}>
  ))

(cffi:defcfun ("cvReadIntByName" read-int-by-name) :int (fs :pointer)
                                                        (map :pointer)
                                                        (name :pointer)
                                                        (default-value :int))

(cffi:defcstruct scalar
  (val :double :count 4))

(cffi:defcfun ("cvColorToScalar" color-to-scalar) scalar (packed-color :double)
                                                         (arrtype :int))

(cffi:defcstruct graph-vtx
  (flags :int)
  (first :pointer))

(cffi:defcstruct graph-edge
  (flags :int)
  (weight :float)
  (next :pointer :count 2)
  (vtx :pointer :count 2))

(cffi::defctype schar :char)

(cffi:defcstruct mem-block
  (prev :pointer)
  (next :pointer))

(cffi:defcstruct mem-storage
  (signature :int)
  (bottom :pointer)
  (top :pointer)
  (parent :pointer)
  (block-size :int)
  (free-space :int))

(cffi:defcstruct seq-block
  (prev :pointer)
  (next :pointer)
  (start-index :int)
  (count :int)
  (data :pointer))

(cffi:defcstruct seq
  (flags :int)
  (header-size :int)
  (h-prev :pointer)
  (h-next :pointer)
  (v-prev :pointer)
  (v-next :pointer)
  (total :int)
  (elem-size :int)
  (block-max :pointer)
  (ptr :pointer)
  (delta-elems :int)
  (storage :pointer)
  (free-blocks :pointer)
  (first :pointer))

(cffi:defcstruct set-elem
  (flags :int)
  (next-free :pointer))

(cffi:defcstruct set
  (flags :int)
  (header-size :int)
  (h-prev :pointer)
  (h-next :pointer)
  (v-prev :pointer)
  (v-next :pointer)
  (total :int)
  (elem-size :int)
  (block-max :pointer)
  (ptr :pointer)
  (delta-elems :int)
  (storage :pointer)
  (free-blocks :pointer)
  (first :pointer)
  (free-elems :pointer)
  (active-count :int))

(cffi:defcstruct graph
  (flags :int)
  (header-size :int)
  (h-prev :pointer)
  (h-next :pointer)
  (v-prev :pointer)
  (v-next :pointer)
  (total :int)
  (elem-size :int)
  (block-max :pointer)
  (ptr :pointer)
  (delta-elems :int)
  (storage :pointer)
  (free-blocks :pointer)
  (first :pointer)
  (free-elems :pointer)
  (active-count :int)
  (edges :pointer))

(cffi:defcfun ("cvFindGraphEdge" find-graph-edge) :pointer (graph :pointer)
                                                           (start-idx :int)
                                                           (end-idx :int))

(cffi::defctype arr :void)

(cffi:defcstruct term-criteria
  (type :int)
  (max-iter :int)
  (epsilon :double))

(cffi:defcfun ("cvCheckTermCriteria" check-term-criteria) term-criteria
                                                                        (criteria term-criteria)
                                                                        (default-eps :double)
                                                                        (default-max-iters :int))

(cffi:defcstruct type
  (info :pointer))

(cffi:defcstruct rect
  (x :int)
  (y :int)
  (width :int)
  (height :int))

(cffi:defcstruct _-ipl-roi
  (coi :int)
  (x-offset :int)
  (y-offset :int)
  (width :int)
  (height :int))

(cffi:defcstruct _-ipl-tile-info
  )

(cffi:defcstruct _-ipl-image
  (n-size :int)
  (id :int)
  (nhannels :int)
  (alphahannel :int)
  (depth :int)
  (color-model :char :count 4)
  (channel-seq :char :count 4)
  (data-order :int)
  (origin :int)
  (align :int)
  (width :int)
  (height :int)
  (roi :pointer)
  (mask-roi :pointer)
  (image-id (:pointer :void))
  (tile-info :pointer)
  (image-size :int)
  (image-data (:pointer :char))
  (width-step :int)
  (border-mode :int :count 4)
  (borderonst :int :count 4)
  (image-data-origin (:pointer :char)))

(cffi::defctype ipl-image _-ipl-image)

(cffi:defcfun ("cvGetImageROI" get-image-roi) rect (image :pointer))

(cffi:defcunion 32suf
  (i :int)
  (u :unsigned-int)
  (f :float))

(cffi:defcenum .-31
  (:_gaussian-5x-5 7))

(cffi:defcstruct lsh
  )

(cffi:defcfun ("cvSetIdentity" set-identity) :void (mat :pointer) (value scalar))

(cffi:defcfun ("cvSubRS" sub-rs) :void (src :pointer) (value scalar)
                                       (dst :pointer) (mask :pointer))

(cffi:defcfun ("cvGraphVtxDegreeByPtr" graph-vtx-degree-by-ptr) :int
                                                                     (graph :pointer)
                                                                     (vtx :pointer))

(cffi::defctype distance-function :pointer)

(cffi:defcfun ("cvCalcEMD2" calc-emd-2) :float (signature-1 :pointer)
                                               (signature-2 :pointer)
                                               (distance-type :int)
                                               (distance-func distance-function)
                                               (cost-matrix :pointer)
                                               (flow :pointer)
                                               (lower-bound (:pointer :float))
                                               (userdata (:pointer :void)))

(cffi:defcstruct point
  (x :int)
  (y :int))

(cffi:defcstruct chain
  (flags :int)
  (header-size :int)
  (h-prev :pointer)
  (h-next :pointer)
  (v-prev :pointer)
  (v-next :pointer)
  (total :int)
  (elem-size :int)
  (block-max :pointer)
  (ptr :pointer)
  (delta-elems :int)
  (storage :pointer)
  (free-blocks :pointer)
  (first :pointer)
  (origin point))

(cffi:defcstruct chain-pt-reader
  (header-size :int)
  (seq :pointer)
  (block :pointer)
  (ptr :pointer)
  (block-min :pointer)
  (block-max :pointer)
  (delta-index :int)
  (prev-elem :pointer)
  (code :char)
  (pt point)
  (deltas schar :count 2 :count 8))

(cffi:defcfun ("cvStartReadChainPoints" start-read-chain-points) :void
                                                                       (chain :pointer)
                                                                       (reader :pointer))

(cffi:defcstruct capture
  )

(cffi:defcstruct hu-moments
  (hu-1 :double)
  (hu-2 :double)
  (hu-3 :double)
  (hu-4 :double)
  (hu-5 :double)
  (hu-6 :double)
  (hu-7 :double))

(cffi:defcfun ("cvFastArctan" fast-arctan) :float (y :float) (x :float))

(cffi:defcfun ("cvSort" sort) :void (src :pointer) (dst :pointer)
                                    (idxmat :pointer) (flags :int))

(cffi:defcstruct slice
  (start-index :int)
  (end-index :int))

(cffi:defcfun ("cvArcLength" arc-length) :double (curve :pointer) (slice slice)
                                                 (is-closed :int))

(cffi:defcfun ("cvRelease" release) :void (struct-ptr :pointer))

(cffi:defcfun ("cvStartNextStream" start-next-stream) :void (fs :pointer))

(cffi:defcstruct convexity-defect
  (start :pointer)
  (end :pointer)
  (depth-point :pointer)
  (depth :float))

(cffi:defcstruct string
  (len :int)
  (ptr (:pointer :char)))

(cffi:defcstruct plugin-func-info
  (func-addr :pointer)
  (default-func-addr (:pointer :void))
  (func-names :pointer)
  (search-modules :int)
  (loaded-from :int))

(cffi:defcstruct module-info
  (next :pointer)
  (name :pointer)
  (version :pointer)
  (func-tab :pointer))

(cffi:defcfun ("cvRegisterModule" register-module) :int (module-info :pointer))
;;; Skipping anonymous composite type #<UNION <anonymous> {1009086681}>
;;; Skipping anonymous composite type #<UNION <anonymous> {10090866A1}>
;;; Skipping anonymous composite type #<UNION <anonymous> {10090866C1}>

(cffi:defcstruct mat
  (type :int)
  (step :int)
  (refcount (:pointer :int))
  (hdr-refcount :int)
  (data ;;; Skipping anonymous type #<UNION <anonymous> {1009086681}>
  )
  ( ;;; Skipping anonymous type #<UNION <anonymous> {10090866A1}>
  )
  ( ;;; Skipping anonymous type #<UNION <anonymous> {10090866C1}>
  ))

(cffi:defcfun ("cvGetCol" get-col) :pointer (arr :pointer) (submat :pointer)
                                            (col :int))

(cffi:defcstruct moments
  (m-00 :double)
  (m-10 :double)
  (m-01 :double)
  (m-20 :double)
  (m-11 :double)
  (m-02 :double)
  (m-30 :double)
  (m-21 :double)
  (m-12 :double)
  (m-03 :double)
  (mu-20 :double)
  (mu-11 :double)
  (mu-02 :double)
  (mu-30 :double)
  (mu-21 :double)
  (mu-12 :double)
  (mu-03 :double)
  (inv-sqrt-m-00 :double))

(cffi:defcfun ("cvMoments" moments) :void (arr :pointer) (moments :pointer)
                                          (binary :int))

(cffi:defcfun ("cvNamedWindow" named-window) :int (name :pointer) (flags :int))

(cffi:defcfun ("cvReshapeMatND" reshape-mat-nd) :pointer (arr :pointer)
                                                         (sizeof-header :int)
                                                         (header :pointer)
                                                         (new-cn :int)
                                                         (new-dims :int)
                                                         (new-sizes (:pointer :int)))

(cffi:defcstruct tree-node-iterator
  (node :pointer)
  (level :int)
  (max-level :int))

(cffi:defcfun ("cvNextTreeNode" next-tree-node) (:pointer :void)
                                                                 (tree-iterator :pointer))

(cffi:defcfun ("cvQueryFrame" query-frame) :pointer (capture :pointer))

(cffi::defctype trackbar-callback :pointer)

(cffi:defcfun ("cvGetModuleInfo" get-module-info) :void (module-name :pointer)
                                                        (version :pointer)
                                                        (loaded-addon-plugins :pointer))

(cffi:defcfun ("cvEqualizeHist" equalize-hist) :void (src :pointer)
                                                     (dst :pointer))

(cffi:defcfun ("cvResizeWindow" resize-window) :void (name :pointer)
                                                     (width :int) (height :int))

(cffi:defcstruct _-contour-scanner
  )

(cffi::defctype contour-scanner :pointer)

(cffi::defctype int-64-t :long)

(cffi::defctype int-64 int-64-t)

(cffi::defctype uint-64-t :unsigned-long)

(cffi::defctype uint-64 uint-64-t)

(cffi:defcunion 64suf
  (i int-64)
  (u uint-64)
  (f :double))

(cffi:defcfun ("cvReadStringByName" read-string-by-name) :pointer (fs :pointer)
                                                                  (map :pointer)
                                                                  (name :pointer)
                                                                  (default-value :pointer))

(cffi:defcstruct font
  (name-font :pointer)
  (color scalar)
  (font-face :int)
  (ascii :pointer)
  (greek :pointer)
  (cyrillic :pointer)
  (hscale :float)
  (vscale :float)
  (shear :float)
  (thickness :int)
  (dx :float)
  (line-type :int))

(cffi:defcfun ("cvPutText" put-text) :void (img :pointer) (text :pointer)
                                           (org point) (font :pointer)
                                           (color scalar))

(cffi:defcfun ("cvReadRawData" read-raw-data) :void (fs :pointer) (src :pointer)
                                                    (dst (:pointer :void))
                                                    (dt :pointer))

(cffi:defcfun ("cvPyrUp" pyr-up) :void (src :pointer) (dst :pointer)
                                       (filter :int))

(cffi:defcstruct _-iplonv-kernel-fp
  (nols :int)
  (n-rows :int)
  (anchor-x :int)
  (anchor-y :int)
  (values (:pointer :float)))

(cffi::defctype iplonv-kernel-fp _-iplonv-kernel-fp)

(cffi:defcfun ("cvWriteRawData" write-raw-data) :void (fs :pointer)
                                                      (src :pointer) (len :int)
                                                      (dt :pointer))

(cffi:defcfun ("cvSplit" split) :void (src :pointer) (dst-0 :pointer)
                                      (dst-1 :pointer) (dst-2 :pointer)
                                      (dst-3 :pointer))

(cffi:defcfun ("cvMaxS" max-s) :void (src :pointer) (value :double)
                                     (dst :pointer))

(cffi:defcfun ("cvSliceLength" slice-length) :int (slice slice) (seq :pointer))

(cffi::defctype rng uint-64)

(cffi:defcfun ("cvKMeans2" k-means-2) :int (samples :pointer)
                                           (cluster-count :int)
                                           (labels :pointer)
                                           (termcrit term-criteria)
                                           (attempts :int) (rng :pointer)
                                           (flags :int) (_centers :pointer)
                                           (compactness (:pointer :double)))

(cffi::defctype cmp-func :pointer)

(cffi:defcfun ("cvSeqPartition" seq-partition) :int (seq :pointer)
                                                    (storage :pointer)
                                                    (labels :pointer)
                                                    (is-equal cmp-func)
                                                    (userdata (:pointer :void)))

(cffi:defcfun ("cvGEMM" gemm) :void (src-1 :pointer) (src-2 :pointer)
                                    (alpha :double) (src-3 :pointer)
                                    (beta :double) (dst :pointer) (t-ab :int))

(cffi:defcfun ("cvReadReal" read-real) :double (node :pointer)
                                               (default-value :double))

(cffi:defcfun ("cvSetReal1D" set-real-1d) :void (arr :pointer) (idx-0 :int)
                                                (value :double))

(cffi:defcfun ("cvSetReal2D" set-real-2d) :void (arr :pointer) (idx-0 :int)
                                                (idx-1 :int) (value :double))

(cffi::defctype size-t :unsigned-long)

(cffi::defctype subdiv-2d-edge size-t)

(cffi:defcstruct point-2d-32f
  (x :float)
  (y :float))

(cffi:defcstruct subdiv-2d
  (flags :int)
  (header-size :int)
  (h-prev :pointer)
  (h-next :pointer)
  (v-prev :pointer)
  (v-next :pointer)
  (total :int)
  (elem-size :int)
  (block-max :pointer)
  (ptr :pointer)
  (delta-elems :int)
  (storage :pointer)
  (free-blocks :pointer)
  (first :pointer)
  (free-elems :pointer)
  (active-count :int)
  (edges :pointer)
  (quad-edges :int)
  (is-geometry-valid :int)
  (recent-edge subdiv-2d-edge)
  (topleft point-2d-32f)
  (bottomright point-2d-32f))

(cffi:defcfun ("cvInitSubdivDelaunay2D" init-subdiv-delaunay-2d) :void
                                                                       (subdiv :pointer)
                                                                       (rect rect))

(cffi:defcfun ("cvMatchTemplate" match-template) :void (image :pointer)
                                                       (templ :pointer)
                                                       (result :pointer)
                                                       (method :int))

(cffi:defcfun ("cvAddText" add-text) :void (img :pointer) (text :pointer)
                                           (org point) (arg-2 :pointer))

(cffi:defcfun ("cvInsertNodeIntoTree" insert-node-into-tree) :void
                                                                   (node (:pointer :void))
                                                                   (parent (:pointer :void))
                                                                   (frame (:pointer :void)))

(cffi:defcfun ("cvSetReal3D" set-real-3d) :void (arr :pointer) (idx-0 :int)
                                                (idx-1 :int) (idx-2 :int)
                                                (value :double))

(cffi:defcstruct _-iplonv-kernel
  (nols :int)
  (n-rows :int)
  (anchor-x :int)
  (anchor-y :int)
  (values (:pointer :int))
  (n-shift-r :int))

(cffi::defctype iplonv-kernel _-iplonv-kernel)

(cffi:defcfun ("cvCvtColor" cvt-color) :void (src :pointer) (dst :pointer)
                                             (code :int))

(cffi:defcenum .-42
  (:_poly-approx-dp 0))

(cffi:defcfun ("cvSetZero" set-zero) :void (arr :pointer))

(cffi:defcfun ("cvGetSpatialMoment" get-spatial-moment) :double
                                                                (moments :pointer)
                                                                (x-order :int)
                                                                (y-order :int))

(cffi:defcfun ("cvSet1D" set-1d) :void (arr :pointer) (idx-0 :int)
                                       (value scalar))
;;; Skipping anonymous composite type #<UNION <anonymous> {1006035321}>
;;; Skipping anonymous composite type #<STRUCT <anonymous> {1006036281}>

(cffi:defcstruct mat-nd
  (type :int)
  (dims :int)
  (refcount (:pointer :int))
  (hdr-refcount :int)
  (data ;;; Skipping anonymous type #<UNION <anonymous> {1006035321}>
  )
  (dim ;;; Skipping anonymous type #<STRUCT <anonymous> {1006036281}>
   :count 32))

(cffi:defcfun ("cvCreateMatNDHeader" create-mat-nd-header) :pointer (dims :int)
                                                                    (sizes :pointer)
                                                                    (type :int))

(cffi:defcenum .-44
  (:_clockwise 1)
  (:_counter-clockwise 2))

(cffi:defcfun ("cvContourPerimeter" contour-perimeter) :double
                                                               (contour :pointer))

(cffi:defcfun ("cvCloneSeq" clone-seq) :pointer (seq :pointer)
                                                (storage :pointer))

(cffi:defcenum .-46
  (:_dist-mask-3 3)
  (:_dist-mask-5 5)
  (:_dist-mask-precise 0))

(cffi:defcstruct size
  (width :int)
  (height :int))

(cffi:defcfun ("cvClipLine" clip-line) :int (img-size size) (pt-1 :pointer)
                                            (pt-2 :pointer))

(cffi:defcfun ("cvRectangle" rectangle) :void (img :pointer) (pt-1 point)
                                              (pt-2 point) (color scalar)
                                              (thickness :int) (line-type :int)
                                              (shift :int))

(cffi:defcfun ("cvGetCentralMoment" get-central-moment) :double
                                                                (moments :pointer)
                                                                (x-order :int)
                                                                (y-order :int))

(cffi:defcfun ("cvWarpAffine" warp-affine) :void (src :pointer) (dst :pointer)
                                                 (map-matrix :pointer)
                                                 (flags :int) (fillval scalar))

(cffi:defcfun ("cvFindNextContour" find-next-contour) :pointer
                                                               (scanner contour-scanner))

(cffi:defcfun ("cvLSHAdd" lsh-add) :void (lsh :pointer) (data :pointer)
                                         (indices :pointer))

(cffi:defcfun ("_Z7cvPointii" point) point (x :int) (y :int))

(cffi::defctype alloc-func :pointer)

(cffi:defcstruct point-3d-64f
  (x :double)
  (y :double)
  (z :double))

(cffi:defcfun ("cvConvexityDefects" convexity-defects) :pointer
                                                                (contour :pointer)
                                                                (convexhull :pointer)
                                                                (storage :pointer))

(cffi:defcfun ("cvInitMatHeader" init-mat-header) :pointer (mat :pointer)
                                                           (rows :int)
                                                           (cols :int)
                                                           (type :int)
                                                           (data (:pointer :void))
                                                           (step :int))

(cffi:defcstruct graph-scanner
  (vtx :pointer)
  (dst :pointer)
  (edge :pointer)
  (graph :pointer)
  (stack :pointer)
  (index :int)
  (mask :int))

(cffi:defcfun ("cvNextGraphItem" next-graph-item) :int (scanner :pointer))

(cffi::defctype uchar :unsigned-char)

(cffi:defcfun ("cvPtr2D" ptr-2d) :pointer (arr :pointer) (idx-0 :int)
                                          (idx-1 :int) (type (:pointer :int)))

(cffi:defcfun ("cvPolyLine" poly-line) :void (img :pointer) (pts :pointer)
                                             (npts :pointer) (contours :int)
                                             (is-closed :int) (color scalar)
                                             (thickness :int) (line-type :int)
                                             (shift :int))

(cffi:defcfun ("cvPtr3D" ptr-3d) :pointer (arr :pointer) (idx-0 :int)
                                          (idx-1 :int) (idx-2 :int)
                                          (type (:pointer :int)))

(cffi:defcstruct histogram
  (type :int)
  (bins :pointer)
  (thresh :float :count 2 :count 32)
  (thresh-2 :pointer)
  (mat mat-nd))

(cffi:defcenum .-62
  (:_cap-any 0)
  (:_cap-mil 100)
  (:_cap-vfw 200)
  (:_cap-v-4l 200)
  (:_cap-v-4l-2 200)
  (:_cap-fireware 300)
  (:_cap-firewire 300)
  (:_cap-ieee-1394 300)
  (:_cap-dc-1394 300)
  (:_cap-cmu-1394 300)
  (:_cap-stereo 400)
  (:_cap-tyzx 400)
  (:_tyzx-left 400)
  (:_tyzx-right 401)
  (:_tyzx-color 402)
  (:_tyzx-z 403)
  (:_cap-qt 500)
  (:_cap-unicap 600)
  (:_cap-dshow 700)
  (:_cap-pvapi 800))

(cffi:defcenum .-63
  (:_cap-prop-pos-msec 0)
  (:_cap-prop-pos-frames 1)
  (:_cap-prop-pos-avi-ratio 2)
  (:_cap-prop-frame-width 3)
  (:_cap-prop-frame-height 4)
  (:_cap-prop-fps 5)
  (:_cap-prop-fourcc 6)
  (:_cap-prop-frame-count 7)
  (:_cap-prop-format 8)
  (:_cap-prop-mode 9)
  (:_cap-prop-brightness 10)
  (:_cap-prop-contrast 11)
  (:_cap-prop-saturation 12)
  (:_cap-prop-hue 13)
  (:_cap-prop-gain 14)
  (:_cap-prop-exposure 15)
  (:_cap-prop-convert-rgb 16)
  (:_cap-prop-white-balance 17)
  (:_cap-prop-rectification 18)
  (:_cap-prop-monocrome 19))

(cffi:defcstruct point-2d-64f
  (x :double)
  (y :double))

(cffi:defcfun ("_Z12cvPoint2D64fdd" point-2d-64f) point-2d-64f (x :double)
                                                               (y :double))

(cffi:defcfun ("cvMinEnclosingCircle" min-enclosing-circle) :int
                                                                 (points :pointer)
                                                                 (center :pointer)
                                                                 (radius (:pointer :float)))

(cffi:defcfun ("cvMin" min) :void (src-1 :pointer) (src-2 :pointer)
                                  (dst :pointer))

(cffi:defcfun ("cvRectangleR" rectangle-r) :void (img :pointer) (r rect)
                                                 (color scalar) (thickness :int)
                                                 (line-type :int) (shift :int))

(cffi:defcfun ("cvGetReal1D" get-real-1d) :double (arr :pointer) (idx-0 :int))

(cffi:defcfun ("cvSmooth" smooth) :void (src :pointer) (dst :pointer)
                                        (smoothtype :int) (size-1 :int)
                                        (size-2 :int) (sigma-1 :double)
                                        (sigma-2 :double))

(cffi:defcfun ("cvGetReal2D" get-real-2d) :double (arr :pointer) (idx-0 :int)
                                                  (idx-1 :int))

(cffi:defcfun ("cvAvgSdv" avg-sdv) :void (arr :pointer) (mean :pointer)
                                         (std-dev :pointer) (mask :pointer))

(cffi:defcstruct attr-list
  (attr :pointer)
  (next :pointer))

(cffi:defcfun ("_Z10cvAttrListPPKcP10CvAttrList" attr-list) attr-list
                                                                      (attr :pointer)
                                                                      (next :pointer))

(cffi:defcfun ("cvGetReal3D" get-real-3d) :double (arr :pointer) (idx-0 :int)
                                                  (idx-1 :int) (idx-2 :int))

(cffi:defcfun ("cvInitUndistortMap" init-undistort-map) :void
                                                              (camera-matrix :pointer)
                                                              (distortion-coeffs :pointer)
                                                              (mapx :pointer)
                                                              (mapy :pointer))

(cffi:defcfun ("cvGetHuMoments" get-hu-moments) :void (moments :pointer)
                                                      (hu-moments :pointer))

(cffi:defcfun ("cvRepeat" repeat) :void (src :pointer) (dst :pointer))

(cffi:defcfun ("cvRunningAvg" running-avg) :void (image :pointer) (acc :pointer)
                                                 (alpha :double) (mask :pointer))

(cffi:defcstruct n-array-iterator
  (count :int)
  (dims :int)
  (size size)
  (ptr :pointer :count 10)
  (stack :int :count 32)
  (hdr :pointer :count 10))

(cffi:defcfun ("cvInitNArrayIterator" init-n-array-iterator) :int (count :int)
                                                                  (arrs :pointer)
                                                                  (mask :pointer)
                                                                  (stubs :pointer)
                                                                  (array-iterator :pointer)
                                                                  (flags :int))

(cffi:defcfun ("_Z5cvRNGl" rng) rng (seed int-64))

(cffi:defcfun ("cvStartFindContours" start-find-contours) contour-scanner
                                                                          (image :pointer)
                                                                          (storage :pointer)
                                                                          (header-size :int)
                                                                          (mode :int)
                                                                          (method :int)
                                                                          (offset point))

(cffi:defcfun ("cvSaveImage" save-image) :int (filename :pointer)
                                              (image :pointer) (params :pointer))

(cffi:defcfun ("cvGetRows" get-rows) :pointer (arr :pointer) (submat :pointer)
                                              (start-row :int) (end-row :int)
                                              (delta-row :int))

(cffi:defcfun ("cvDestroyWindow" destroy-window) :void (name :pointer))

(cffi:defcfun ("cvLoadImageM" load-image-m) :pointer (filename :pointer)
                                                     (iscolor :int))

(cffi:defcstruct size-2d-32f
  (width :float)
  (height :float))

(cffi:defcstruct box-2d
  (center point-2d-32f)
  (size size-2d-32f)
  (angle :float))

(cffi:defcfun ("cvFitEllipse2" fit-ellipse-2) box-2d (points :pointer))

(cffi:defcfun ("cvRetrieveFrame" retrieve-frame) :pointer (capture :pointer)
                                                          (stream-idx :int))

(cffi:defcfun ("cvPreCornerDetect" pre-corner-detect) :void (image :pointer)
                                                            (corners :pointer)
                                                            (aperture-size :int))

(cffi:defcfun ("cvGetWindowHandle" get-window-handle) (:pointer :void)
                                                                       (name :pointer))

(cffi:defcfun ("cvConvertScaleAbs" convert-scale-abs) :void (src :pointer)
                                                            (dst :pointer)
                                                            (scale :double)
                                                            (shift :double))

(cffi::defctype status :int)

(cffi:defcstruct sparse-mat
  (type :int)
  (dims :int)
  (refcount (:pointer :int))
  (hdr-refcount :int)
  (heap :pointer)
  (hashtable :pointer)
  (hashsize :int)
  (valoffset :int)
  (idxoffset :int)
  (size :int :count 32))

(cffi:defcfun ("cvCloneSparseMat" clone-sparse-mat) :pointer (mat :pointer))

(cffi:defcfun ("cvFindContours" find-contours) :int (image :pointer)
                                                    (storage :pointer)
                                                    (first-contour :pointer)
                                                    (header-size :int)
                                                    (mode :int) (method :int)
                                                    (offset point))

(cffi:defcfun ("cvFitLine" fit-line) :void (points :pointer) (dist-type :int)
                                           (param :double) (reps :double)
                                           (aeps :double)
                                           (line (:pointer :float)))

(cffi:defcfun ("cvSubstituteContour" substitute-contour) :void
                                                               (scanner contour-scanner)
                                                               (new-contour :pointer))

(cffi:defcfun ("cvSetRealND" set-real-nd) :void (arr :pointer) (idx :pointer)
                                                (value :double))

(cffi::defctype ipl-tile-info _-ipl-tile-info)

(cffi:defcfun ("cvMoveWindow" move-window) :void (name :pointer) (x :int)
                                                 (y :int))

(cffi:defcstruct contour
  (flags :int)
  (header-size :int)
  (h-prev :pointer)
  (h-next :pointer)
  (v-prev :pointer)
  (v-next :pointer)
  (total :int)
  (elem-size :int)
  (block-max :pointer)
  (ptr :pointer)
  (delta-elems :int)
  (storage :pointer)
  (free-blocks :pointer)
  (first :pointer)
  (rect rect)
  (color :int)
  (reserved :int :count 3))

(cffi::defctype point-2d-seq contour)

(cffi:defcfun ("cvGraphRemoveVtxByPtr" graph-remove-vtx-by-ptr) :int
                                                                     (graph :pointer)
                                                                     (vtx :pointer))

(cffi:defcfun ("cvShowImage" show-image) :void (name :pointer) (image :pointer))

(cffi:defcfun ("cvSetSeqBlockSize" set-seq-block-size) :void (seq :pointer)
                                                             (delta-elems :int))

(cffi:defcfun ("cvMerge" merge) :void (src-0 :pointer) (src-1 :pointer)
                                      (src-2 :pointer) (src-3 :pointer)
                                      (dst :pointer))

(cffi:defcfun ("cvGetImageCOI" get-image-coi) :int (image :pointer))

(cffi:defcfun ("cvNot" not) :void (src :pointer) (dst :pointer))

(cffi:defcfun ("cvSetND" set-nd) :void (arr :pointer) (idx :pointer)
                                       (value scalar))

(cffi:defcfun ("cvSetTrackbarPos" set-trackbar-pos) :void
                                                          (trackbar-name :pointer)
                                                          (window-name :pointer)
                                                          (pos :int))

(cffi:defcfun ("cvMinS" min-s) :void (src :pointer) (value :double)
                                     (dst :pointer))

(cffi:defcfun ("cvClearGraph" clear-graph) :void (graph :pointer))

(cffi:defcfun ("cvPtr1D" ptr-1d) :pointer (arr :pointer) (idx-0 :int)
                                          (type (:pointer :int)))

(cffi:defcfun ("cvSetCaptureProperty" set-capture-property) :int
                                                                 (capture :pointer)
                                                                 (property-id :int)
                                                                 (value :double))

(cffi:defcfun ("cvCreateSubdiv2D" create-subdiv-2d) :pointer (subdiv-type :int)
                                                             (header-size :int)
                                                             (vtx-size :int)
                                                             (quadedge-size :int)
                                                             (storage :pointer))

(cffi:defcfun ("cvReleaseCapture" release-capture) :void (capture :pointer))

(cffi:defcfun ("cvReleaseLSH" release-lsh) :void (lsh :pointer))

(cffi:defcfun ("cvSeqPushFront" seq-push-front) :pointer (seq :pointer)
                                                         (element :pointer))

(cffi:defcfun ("cvRawDataToScalar" raw-data-to-scalar) :void (data :pointer)
                                                             (type :int)
                                                             (scalar :pointer))

(cffi:defcfun ("cvSetHistBinRanges" set-hist-bin-ranges) :void (hist :pointer)
                                                               (ranges :pointer)
                                                               (uniform :int))

(cffi:defcfun ("cvSaveWindowParameters" save-window-parameters) :void
                                                                      (name :pointer))

(cffi:defcfun ("cvOr" or) :void (src-1 :pointer) (src-2 :pointer) (dst :pointer)
                                (mask :pointer))

(cffi:defcfun ("cvInitImageHeader" init-image-header) :pointer (image :pointer)
                                                               (size size)
                                                               (depth :int)
                                                               (channels :int)
                                                               (origin :int)
                                                               (align :int))

(cffi:defcfun ("cvNorm" norm) :double (arr-1 :pointer) (arr-2 :pointer)
                                      (norm-type :int) (mask :pointer))

(cffi:defcstruct mem-storage-pos
  (top :pointer)
  (free-space :int))

(cffi:defcstruct feature-tree
  )

(cffi:defcfun ("cvReleaseFeatureTree" release-feature-tree) :void (tr :pointer))

(cffi:defcfun ("cvFindFeaturesBoxed" find-features-boxed) :int (tr :pointer)
                                                               (bounds-min :pointer)
                                                               (bounds-max :pointer)
                                                               (out-indices :pointer))

(cffi:defcfun ("cvCheckArr" check-arr) :int (arr :pointer) (flags :int)
                                            (min-val :double) (max-val :double))

(cffi:defcfun ("cvGetNormalizedCentralMoment" get-normalized-central-moment) :double
                                                                                     (moments :pointer)
                                                                                     (x-order :int)
                                                                                     (y-order :int))

(cffi:defcfun ("cvPtrND" ptr-nd) :pointer (arr :pointer) (idx :pointer)
                                          (type (:pointer :int))
                                          (create-node :int)
                                          (precalc-hashval (:pointer :unsigned-int)))

(cffi:defcfun ("cvReleaseMemStorage" release-mem-storage) :void
                                                                (storage :pointer))

(cffi::defctype ipl-roi _-ipl-roi)

(cffi:defcstruct subdiv-2d-point
  (flags :int)
  (first subdiv-2d-edge)
  (pt point-2d-32f)
  (id :int))

(cffi:defcstruct quad-edge-2d
  (flags :int)
  (pt :pointer :count 4)
  (next subdiv-2d-edge :count 4))

(cffi:defcstruct sparse-node
  (hashval :unsigned-int)
  (next :pointer))

(cffi:defcstruct sparse-mat-iterator
  (mat :pointer)
  (node :pointer)
  (curidx :int))

(cffi:defcfun ("cvGetNextSparseNode" get-next-sparse-node) :pointer
                                                                    (mat-iterator :pointer))

(cffi:defcfun ("cvReleaseMatND" release-mat-nd) :void (mat :pointer))

(cffi:defcfun ("cvFillConvexPoly" fill-convex-poly) :void (img :pointer)
                                                          (pts :pointer)
                                                          (npts :int)
                                                          (color scalar)
                                                          (line-type :int)
                                                          (shift :int))

(cffi:defcfun ("cvCreateImageHeader" create-image-header) :pointer (size size)
                                                                   (depth :int)
                                                                   (channels :int))

(cffi:defcfun ("cvLSHQuery" lsh-query) :void (lsh :pointer)
                                             (query-points :pointer)
                                             (indices :pointer) (dist :pointer)
                                             (k :int) (emax :int))

(cffi:defcfun ("cvGraphVtxDegree" graph-vtx-degree) :int (graph :pointer)
                                                         (vtx-idx :int))

(cffi:defcfun ("cvPyrSegmentation" pyr-segmentation) :void (src :pointer)
                                                           (dst :pointer)
                                                           (storage :pointer)
                                                           (comp :pointer)
                                                           (level :int)
                                                           (threshold-1 :double)
                                                           (threshold-2 :double))

(cffi:defcfun ("cvGetOptimalDFTSize" get-optimal-dft-size) :int (size-0 :int))

(cffi:defcfun ("cv2DRotationMatrix" 2d-rotation-matrix) :pointer
                                                                 (center point-2d-32f)
                                                                 (angle :double)
                                                                 (scale :double)
                                                                 (map-matrix :pointer))

(cffi:defcfun ("cvGetWindowName" get-window-name) :pointer
                                                           (window-handle (:pointer :void)))

(cffi:defcfun ("cvGetRealND" get-real-nd) :double (arr :pointer) (idx :pointer))

(cffi:defcfun ("_Z7cvRoundd" round) :int (value :double))

(cffi:defcfun ("cvGraphRemoveVtx" graph-remove-vtx) :int (graph :pointer)
                                                         (index :int))

(cffi:defcfun ("cvCreateData" create-data) :void (arr :pointer))

(cffi:defcfun ("cvGetMinMaxHistValue" get-min-max-hist-value) :void
                                                                    (hist :pointer)
                                                                    (min-value (:pointer :float))
                                                                    (max-value (:pointer :float))
                                                                    (min-idx (:pointer :int))
                                                                    (max-idx (:pointer :int)))

(cffi:defcfun ("cvRegisterType" register-type) :void (info :pointer))

(cffi:defcfun ("cvTranspose" transpose) :void (src :pointer) (dst :pointer))

(cffi:defcfun ("cvGetCaptureDomain" get-capture-domain) :int (capture :pointer))

(cffi:defcfun ("cvSetAdd" set-add) :int (set-header :pointer) (elem :pointer)
                                        (inserted-elem :pointer))

(cffi:defcfun ("cvCreateCameraCapture" create-camera-capture) :pointer
                                                                       (index :int))

(cffi:defcfun ("cvReduce" reduce) :void (src :pointer) (dst :pointer) (dim :int)
                                        (op :int))

(cffi:defcstruct video-writer
  )

(cffi:defcfun ("cvWriteFrame" write-frame) :int (writer :pointer)
                                                (image :pointer))

(cffi:defcfun ("cvReshape" reshape) :pointer (arr :pointer) (header :pointer)
                                             (new-cn :int) (new-rows :int))

(cffi:defcfun ("cvDCT" dct) :void (src :pointer) (dst :pointer) (flags :int))

(cffi:defcfun ("_Z6cvmGetPK5CvMatii" m-get) :double (mat :pointer) (row :int)
                                                    (col :int))

(cffi:defcstruct point-3d-32f
  (x :float)
  (y :float)
  (z :float))

(cffi:defcfun ("_Z7cvIsInfd" is-inf) :int (value :double))

(cffi:defcfun ("cvCopy" copy) :void (src :pointer) (dst :pointer)
                                    (mask :pointer))

(cffi:defcfun ("cvUseOptimized" use-optimized) :int (on-off :int))

(cffi::defctype free-func :pointer)

(cffi:defcfun ("cvSetMemoryManager" set-memory-manager) :void
                                                              (alloc-func alloc-func)
                                                              (free-func free-func)
                                                              (userdata (:pointer :void)))

(cffi:defcfun ("cvGetDimSize" get-dim-size) :int (arr :pointer) (index :int))

(cffi:defcfun ("cvDFT" dft) :void (src :pointer) (dst :pointer) (flags :int)
                                  (nonzero-rows :int))

(cffi:defcfun ("cvInitSystem" init-system) :int (argc :int) (argv :pointer))

(cffi:defcfun ("cvIntegral" integral) :void (image :pointer) (sum :pointer)
                                            (sqsum :pointer)
                                            (tilted-sum :pointer))

(cffi:defcfun ("cvCreateStructuringElementEx" create-structuring-element-ex) :pointer
                                                                                      (cols :int)
                                                                                      (rows :int)
                                                                                      (anchor-x :int)
                                                                                      (anchor-y :int)
                                                                                      (shape :int)
                                                                                      (values (:pointer :int)))

(cffi:defcstruct seq-writer
  (header-size :int)
  (seq :pointer)
  (block :pointer)
  (ptr :pointer)
  (block-min :pointer)
  (block-max :pointer))

(cffi:defcfun ("cvGetAffineTransform" get-affine-transform) :pointer
                                                                     (src :pointer)
                                                                     (dst :pointer)
                                                                     (map-matrix :pointer))

(cffi:defcfun ("cvLoadImage" load-image) :pointer (filename :pointer)
                                                  (iscolor :int))

(cffi:defcfun ("cvMemStorageAllocString" mem-storage-alloc-string) string
                                                                          (storage :pointer)
                                                                          (ptr :pointer)
                                                                          (len :int))

(cffi:defcfun ("cvInitMatNDHeader" init-mat-nd-header) :pointer (mat :pointer)
                                                                (dims :int)
                                                                (sizes :pointer)
                                                                (type :int)
                                                                (data (:pointer :void)))

(cffi:defcfun ("cvMul" mul) :void (src-1 :pointer) (src-2 :pointer)
                                  (dst :pointer) (scale :double))

(cffi:defcfun ("cvNulDevReport" nul-dev-report) :int (status :int)
                                                     (func-name :pointer)
                                                     (err-msg :pointer)
                                                     (file-name :pointer)
                                                     (line :int)
                                                     (userdata (:pointer :void)))

(cffi:defcstruct connected-comp
  (area :double)
  (value scalar)
  (rect rect)
  (contour :pointer))

(cffi:defcfun ("cvFloodFill" flood-fill) :void (image :pointer)
                                               (seed-point point)
                                               (new-val scalar) (lo-diff scalar)
                                               (up-diff scalar) (comp :pointer)
                                               (flags :int) (mask :pointer))

(cffi:defcfun ("cvCreateSpillTree" create-spill-tree) :pointer
                                                               (raw-data :pointer)
                                                               (naive :int)
                                                               (rho :double)
                                                               (tau :double))

(cffi:defcfun ("cvReleaseStructuringElement" release-structuring-element) :void
                                                                                (element :pointer))

(cffi:defcfun ("cvStartWriteSeq" start-write-seq) :void (seq-flags :int)
                                                        (header-size :int)
                                                        (elem-size :int)
                                                        (storage :pointer)
                                                        (writer :pointer))

(cffi:defcfun ("cvGetTickCount" get-tick-count) int-64)

(cffi:defcfun ("cvSubdiv2DSymEdge" subdiv-2d-sym-edge) subdiv-2d-edge
                                                                      (edge subdiv-2d-edge))

(cffi:defcfun ("cvGetCaptureProperty" get-capture-property) :double
                                                                    (capture :pointer)
                                                                    (property-id :int))

(cffi:defcfun ("cvGuiBoxReport" gui-box-report) :int (status :int)
                                                     (func-name :pointer)
                                                     (err-msg :pointer)
                                                     (file-name :pointer)
                                                     (line :int)
                                                     (userdata (:pointer :void)))

(cffi:defcfun ("cvThreshHist" thresh-hist) :void (hist :pointer)
                                                 (threshold :double))

(cffi:defcfun ("cvCalcArrBackProjectPatch" calc-arr-back-project-patch) :void
                                                                              (image :pointer)
                                                                              (dst :pointer)
                                                                              (range size)
                                                                              (hist :pointer)
                                                                              (method :int)
                                                                              (factor :double))

(cffi:defcfun ("cvReleaseData" release-data) :void (arr :pointer))

(cffi:defcstruct seq-reader
  (header-size :int)
  (seq :pointer)
  (block :pointer)
  (ptr :pointer)
  (block-min :pointer)
  (block-max :pointer)
  (delta-index :int)
  (prev-elem :pointer))

(cffi:defcfun ("cvStartReadSeq" start-read-seq) :void (seq :pointer)
                                                      (reader :pointer)
                                                      (reverse :int))

(cffi:defcstruct string-hash-node
  (hashval :unsigned-int)
  (str string)
  (next :pointer))

(cffi:defcfun ("cvGetFileNode" get-file-node) :pointer (fs :pointer)
                                                       (map :pointer)
                                                       (key :pointer)
                                                       (create-missing :int))

(cffi:defcfun ("cvStartWriteStruct" start-write-struct) :void (fs :pointer)
                                                              (name :pointer)
                                                              (struct-flags :int)
                                                              (type-name :pointer)
                                                              (attributes attr-list))

(cffi:defcstruct generic-hash
  )

(cffi:defcfun ("cvCreateMatND" create-mat-nd) :pointer (dims :int)
                                                       (sizes :pointer)
                                                       (type :int))

(cffi:defcfun ("cvWriteFileNode" write-file-node) :void (fs :pointer)
                                                        (new-node-name :pointer)
                                                        (node :pointer)
                                                        (embed :int))

(cffi:defcfun ("cvReadString" read-string) :pointer (node :pointer)
                                                    (default-value :pointer))

(cffi:defcfun ("cvRestoreMemStoragePos" restore-mem-storage-pos) :void
                                                                       (storage :pointer)
                                                                       (pos :pointer))

(cffi:defcfun ("cvGetDiag" get-diag) :pointer (arr :pointer) (submat :pointer)
                                              (diag :int))

(cffi::defctype trackbar-callback-2 :pointer)

(cffi:defcfun ("cvCreateTrackbar2" create-trackbar-2) :int
                                                           (trackbar-name :pointer)
                                                           (window-name :pointer)
                                                           (value (:pointer :int))
                                                           (count :int)
                                                           (on-change trackbar-callback-2)
                                                           (userdata (:pointer :void)))

(cffi:defcstruct lsh-operations
  )

(cffi::defctype error-callback :pointer)

(cffi:defcfun ("cvConvertScale" convert-scale) :void (src :pointer)
                                                     (dst :pointer)
                                                     (scale :double)
                                                     (shift :double))

(cffi:defcfun ("cvCreateSparseMat" create-sparse-mat) :pointer (dims :int)
                                                               (sizes :pointer)
                                                               (type :int))

(cffi:defcfun ("cvDisplayOverlay" display-overlay) :void (name :pointer)
                                                         (text :pointer)
                                                         (delayms :int))

(cffi:defcfun ("cvGetTextSize" get-text-size) :void (text-string :pointer)
                                                    (font :pointer)
                                                    (text-size :pointer)
                                                    (baseline (:pointer :int)))

(cffi:defcfun ("cvCompareHist" compare-hist) :double (hist-1 :pointer)
                                                     (hist-2 :pointer)
                                                     (method :int))

(cffi:defcfun ("_Z6cvSizeii" size) size (width :int) (height :int))

(cffi:defcfun ("cvAttrValue" attr-value) :pointer (attr :pointer)
                                                  (attr-name :pointer))

(cffi:defcfun ("cvGraphRemoveEdge" graph-remove-edge) :void (graph :pointer)
                                                            (start-idx :int)
                                                            (end-idx :int))

(cffi:defcfun ("cvCreateVideoWriter" create-video-writer) :pointer
                                                                   (filename :pointer)
                                                                   (fourcc :int)
                                                                   (fps :double)
                                                                   (frame-size size)
                                                                   (is-color :int))

(cffi:defcfun ("cvGetSeqElem" get-seq-elem) :pointer (seq :pointer) (index :int))

(cffi:defcfun ("cvInitTreeNodeIterator" init-tree-node-iterator) :void
                                                                       (tree-iterator :pointer)
                                                                       (first :pointer)
                                                                       (max-level :int))

(cffi:defcfun ("cvGetErrMode" get-err-mode) :int)

(cffi:defcfun ("cvSetNumThreads" set-num-threads) :void (threads :int))

(cffi:defcfun ("cvDilate" dilate) :void (src :pointer) (dst :pointer)
                                        (element :pointer) (iterations :int))

(cffi:defcfun ("cvClearSubdivVoronoi2D" clear-subdiv-voronoi-2d) :void
                                                                       (subdiv :pointer))

(cffi:defcfun ("cvCmp" cmp) :void (src-1 :pointer) (src-2 :pointer)
                                  (dst :pointer) (cmp-op :int))

(cffi:defcfun ("cvDet" det) :double (mat :pointer))

(cffi:defcfun ("_Z7cvFloord" floor) :int (value :double))

(cffi:defcfun ("cvSeqElemIdx" seq-elem-idx) :int (seq :pointer)
                                                 (element :pointer)
                                                 (block :pointer))

(cffi:defcfun ("cvGetDims" get-dims) :int (arr :pointer) (sizes (:pointer :int)))

(cffi:defcfun ("cvCalcProbDensity" calc-prob-density) :void (hist-1 :pointer)
                                                            (hist-2 :pointer)
                                                            (dst-hist :pointer)
                                                            (scale :double))

(cffi:defcfun ("cvCloneMat" clone-mat) :pointer (mat :pointer))

(cffi:defcfun ("cvCornerEigenValsAndVecs" corner-eigen-vals-and-vecs) :void
                                                                            (image :pointer)
                                                                            (eigenvv :pointer)
                                                                            (block-size :int)
                                                                            (aperture-size :int))

(cffi:defcfun ("cvMixChannels" mix-channels) :void (src :pointer)
                                                   (src-count :int)
                                                   (dst :pointer)
                                                   (dst-count :int)
                                                   (from-to :pointer)
                                                   (pair-count :int))

(cffi:defcfun ("cvCreateKDTree" create-kd-tree) :pointer (desc :pointer))

(cffi:defcfun ("cvSave" save) :void (filename :pointer) (struct-ptr :pointer)
                                    (name :pointer) (comment :pointer)
                                    (attributes attr-list))

(cffi:defcfun ("cvProjectPCA" project-pca) :void (data :pointer) (mean :pointer)
                                                 (eigenvects :pointer)
                                                 (result :pointer))

(cffi:defcfun ("cvResize" resize) :void (src :pointer) (dst :pointer)
                                        (interpolation :int))

(cffi:defcfun ("cvSubdiv2DEdgeDst" subdiv-2d-edge-dst) :pointer
                                                                (edge subdiv-2d-edge))

(cffi:defcfun ("cvCanny" canny) :void (image :pointer) (edges :pointer)
                                      (threshold-1 :double)
                                      (threshold-2 :double) (aperture-size :int))

(cffi:defcfun ("cvDiv" div) :void (src-1 :pointer) (src-2 :pointer)
                                  (dst :pointer) (scale :double))

(cffi:defcfun ("cvRemap" remap) :void (src :pointer) (dst :pointer)
                                      (mapx :pointer) (mapy :pointer)
                                      (flags :int) (fillval scalar))

(cffi:defcfun ("cvMinMaxLoc" min-max-loc) :void (arr :pointer)
                                                (min-val (:pointer :double))
                                                (max-val (:pointer :double))
                                                (min-loc :pointer)
                                                (max-loc :pointer)
                                                (mask :pointer))

(cffi:defcfun ("cvLoad" load) (:pointer :void) (filename :pointer)
                                               (memstorage :pointer)
                                               (name :pointer)
                                               (real-name :pointer))

(cffi::defctype button-callback :pointer)

(cffi:defcfun ("cvCreateButton" create-button) :int (button-name :pointer)
                                                    (on-change button-callback)
                                                    (userdata (:pointer :void))
                                                    (button-type :int)
                                                    (initial-button-state :int))

(cffi:defcfun ("cvStartReadRawData" start-read-raw-data) :void (fs :pointer)
                                                               (src :pointer)
                                                               (reader :pointer))

(cffi:defcfun ("cvGetQuadrangleSubPix" get-quadrangle-sub-pix) :void
                                                                     (src :pointer)
                                                                     (dst :pointer)
                                                                     (map-matrix :pointer))

(cffi:defcfun ("cvGetHashedKey" get-hashed-key) :pointer (fs :pointer)
                                                         (name :pointer)
                                                         (len :int)
                                                         (create-missing :int))

(cffi:defcfun ("cvError" error) :void (status :int) (func-name :pointer)
                                      (err-msg :pointer) (file-name :pointer)
                                      (line :int))

(cffi:defcfun ("cvSetRemove" set-remove) :void (set-header :pointer)
                                               (index :int))

(cffi:defcfun ("cvCalcArrHist" calc-arr-hist) :void (arr :pointer)
                                                    (hist :pointer)
                                                    (accumulate :int)
                                                    (mask :pointer))

(cffi:defcfun ("cvDecodeImageM" decode-image-m) :pointer (buf :pointer)
                                                         (iscolor :int))

(cffi:defcfun ("cvInRange" in-range) :void (src :pointer) (lower :pointer)
                                           (upper :pointer) (dst :pointer))

(cffi:defcfun ("cvRedirectError" redirect-error) error-callback
                                                                (error-handler error-callback)
                                                                (userdata (:pointer :void))
                                                                (prev-userdata :pointer))

(cffi:defcfun ("cvSVD" svd) :void (a :pointer) (w :pointer) (u :pointer)
                                  (v :pointer) (flags :int))

(cffi::defctype hist-type :int)

(cffi:defcfun ("cvSeqPopMulti" seq-pop-multi) :void (seq :pointer)
                                                    (elements (:pointer :void))
                                                    (count :int) (in-front :int))

(cffi:defcfun ("_Z11cvScalarAlld" scalar-all) scalar (val-0123 :double))

(cffi:defcfun ("cvCalcBayesianProb" calc-bayesian-prob) :void (src :pointer)
                                                              (number :int)
                                                              (dst :pointer))

(cffi:defcfun ("cvCmpS" cmp-s) :void (src :pointer) (value :double)
                                     (dst :pointer) (cmp-op :int))

(cffi:defcfun ("cvResetImageROI" reset-image-roi) :void (image :pointer))

(cffi:defcfun ("cvDecodeImage" decode-image) :pointer (buf :pointer)
                                                      (iscolor :int))

(cffi:defcfun ("cvAbsDiff" abs-diff) :void (src-1 :pointer) (src-2 :pointer)
                                           (dst :pointer))

(cffi:defcfun ("cvEllipseBox" ellipse-box) :void (img :pointer) (box box-2d)
                                                 (color scalar) (thickness :int)
                                                 (line-type :int) (shift :int))

(cffi:defcfun ("cvCheckContourConvexity" check-contour-convexity) :int
                                                                       (contour :pointer))

(cffi:defcfun ("_Z12cvPoint3D64fddd" point-3d-64f) point-3d-64f (x :double)
                                                                (y :double)
                                                                (z :double))

(cffi:defcfun ("cvPolarToCart" polar-to-cart) :void (magnitude :pointer)
                                                    (angle :pointer)
                                                    (x :pointer) (y :pointer)
                                                    (angle-in-degrees :int))

(cffi:defcfun ("cvEndWriteSeq" end-write-seq) :pointer (writer :pointer))

(cffi:defcfun ("cvSetSeqReaderPos" set-seq-reader-pos) :void (reader :pointer)
                                                             (index :int)
                                                             (is-relative :int))

(cffi:defcfun ("cvOrS" or-s) :void (src :pointer) (value scalar) (dst :pointer)
                                   (mask :pointer))

(cffi:defcfun ("cvConvertMaps" convert-maps) :void (mapx :pointer)
                                                   (mapy :pointer)
                                                   (mapxy :pointer)
                                                   (mapalpha :pointer))

(cffi:defcfun ("cvCloneGraph" clone-graph) :pointer (graph :pointer)
                                                    (storage :pointer))

(cffi:defcfun ("cvGraphAddVtx" graph-add-vtx) :int (graph :pointer)
                                                   (vtx :pointer)
                                                   (inserted-vtx :pointer))

(cffi:defcfun ("cvReleaseSparseMat" release-sparse-mat) :void (mat :pointer))

(cffi:defcfun ("cvWriteReal" write-real) :void (fs :pointer) (name :pointer)
                                               (value :double))

(cffi:defcfun ("cvGetSubRect" get-sub-rect) :pointer (arr :pointer)
                                                     (submat :pointer)
                                                     (rect rect))

(cffi:defcfun ("cvGetThreadNum" get-thread-num) :int)

(cffi:defcfun ("CV_FOURCC" _fourcc) :int (c-1 :char) (c-2 :char) (c-3 :char)
                                         (c-4 :char))

(cffi:defcfun ("cvWriteComment" write-comment) :void (fs :pointer)
                                                     (comment :pointer)
                                                     (eol-comment :int))

(cffi:defcfun ("cvGetTrackbarPos" get-trackbar-pos) :int
                                                         (trackbar-name :pointer)
                                                         (window-name :pointer))

(cffi:defcfun ("cvFlip" flip) :void (src :pointer) (dst :pointer)
                                    (flip-mode :int))

(cffi:defcfun ("cvAddS" add-s) :void (src :pointer) (value scalar)
                                     (dst :pointer) (mask :pointer))

(cffi:defcfun ("cvFont" font) font (scale :double) (thickness :int))

(cffi:defcfun ("cvCloneImage" clone-image) :pointer (image :pointer))

(cffi:defcfun ("cvContourArea" contour-area) :double (contour :pointer)
                                                     (slice slice)
                                                     (oriented :int))

(cffi:defcfun ("cvStartWindowThread" start-window-thread) :int)

(cffi:defcfun ("cvSub" sub) :void (src-1 :pointer) (src-2 :pointer)
                                  (dst :pointer) (mask :pointer))

(cffi:defcfun ("cvSVBkSb" sv-bk-sb) :void (w :pointer) (u :pointer) (v :pointer)
                                          (b :pointer) (x :pointer) (flags :int))

(cffi:defcfun ("cvRemoveNodeFromTree" remove-node-from-tree) :void
                                                                   (node (:pointer :void))
                                                                   (frame (:pointer :void)))

(cffi:defcfun ("_Z6cvRectiiii" rect) rect (x :int) (y :int) (width :int)
                                          (height :int))

(cffi:defcfun ("cvLoadWindowParameters" load-window-parameters) :void
                                                                      (name :pointer))

(cffi:defcfun ("cvSubdiv2DEdgeOrg" subdiv-2d-edge-org) :pointer
                                                                (edge subdiv-2d-edge))

(cffi:defcfun ("cvRandArr" rand-arr) :void (rng :pointer) (arr :pointer)
                                           (dist-type :int) (param-1 scalar)
                                           (param-2 scalar))

(cffi:defcfun ("cvCrossProduct" cross-product) :void (src-1 :pointer)
                                                     (src-2 :pointer)
                                                     (dst :pointer))

(cffi:defcfun ("cvSampleLine" sample-line) :int (image :pointer) (pt-1 point)
                                                (pt-2 point)
                                                (buffer (:pointer :void))
                                                (connectivity :int))

(cffi:defcfun ("_Z14cvTermCriteriaiid" term-criteria) term-criteria (type :int)
                                                                    (max-iter :int)
                                                                    (epsilon :double))

(cffi:defcfun ("_Z11cvRectToROI6CvRecti" rect-to-roi) ipl-roi (rect rect)
                                                              (coi :int))

(cffi:defcfun ("_Z14cvPointFrom32f12CvPoint2D32f" point-from-32f) point
                                                                        (point point-2d-32f))

(cffi:defcfun ("cvSet" set) :void (arr :pointer) (value scalar) (mask :pointer))

(cffi:defcfun ("cvMatchShapes" match-shapes) :double (object-1 :pointer)
                                                     (object-2 :pointer)
                                                     (method :int)
                                                     (parameter :double))

(cffi:defcfun ("cvCountNonZero" count-non-zero) :int (arr :pointer))

(cffi:defcfun ("cvUndistortPoints" undistort-points) :void (src :pointer)
                                                           (dst :pointer)
                                                           (camera-matrix :pointer)
                                                           (dist-coeffs :pointer)
                                                           (r :pointer)
                                                           (p :pointer))

(cffi:defcfun ("cvEndFindContours" end-find-contours) :pointer
                                                               (scanner :pointer))

(cffi:defcfun ("cvSeqSort" seq-sort) :void (seq :pointer) (func cmp-func)
                                           (userdata (:pointer :void)))

(cffi:defcfun ("cvSetNew" set-new) :pointer (set-header :pointer))

(cffi:defcfun ("_Z6cvCeild" ceil) :int (value :double))

(cffi:defcfun ("cvSetImageCOI" set-image-coi) :void (image :pointer) (coi :int))

(cffi:defcfun ("cvMaxRect" max-rect) rect (rect-1 :pointer) (rect-2 :pointer))

(cffi:defcfun ("cvLUT" lut) :void (src :pointer) (dst :pointer) (lut :pointer))

(cffi:defcfun ("cvReleaseMat" release-mat) :void (mat :pointer))

(cffi:defcfun ("cvCreateSeqBlock" create-seq-block) :void (writer :pointer))

(cffi:defcfun ("cvClearHist" clear-hist) :void (hist :pointer))

(cffi:defcfun ("cvCvtSeqToArray" cvt-seq-to-array) (:pointer :void)
                                                                    (seq :pointer)
                                                                    (elements (:pointer :void))
                                                                    (slice slice))

(cffi:defcenum .-50
  (:_floodfill-fixed-range 65536)
  (:_floodfill-mask-only 131072))

(cffi:defcfun ("cvDrawContours" draw-contours) :void (img :pointer)
                                                     (contour :pointer)
                                                     (external-color scalar)
                                                     (hole-color scalar)
                                                     (max-level :int)
                                                     (thickness :int)
                                                     (line-type :int)
                                                     (offset point))

(cffi:defcfun ("cvReleaseImageHeader" release-image-header) :void
                                                                  (image :pointer))

(cffi:defcfun ("cvInitUndistortRectifyMap" init-undistort-rectify-map) :void
                                                                             (camera-matrix :pointer)
                                                                             (dist-coeffs :pointer)
                                                                             (r :pointer)
                                                                             (new-camera-matrix :pointer)
                                                                             (mapx :pointer)
                                                                             (mapy :pointer))

(cffi:defcfun ("cvConvexHull2" convex-hull-2) :pointer (input :pointer)
                                                       (hull-storage (:pointer :void))
                                                       (orientation :int)
                                                       (return-points :int))

(cffi:defcfun ("cvSeqRemoveSlice" seq-remove-slice) :void (seq :pointer)
                                                          (slice slice))

(cffi:defcfun ("cvCreateMemoryLSH" create-memory-lsh) :pointer (d :int) (n :int)
                                                               (l :int) (k :int)
                                                               (type :int)
                                                               (r :double)
                                                               (seed int-64))

(cffi:defcfun ("cvWaitKey" wait-key) :int (delay :int))

(cffi:defcfun ("cvLinearPolar" linear-polar) :void (src :pointer) (dst :pointer)
                                                   (center point-2d-32f)
                                                   (max-radius :double)
                                                   (flags :int))

(cffi:defcfun ("_Z6cvmSetP5CvMatiid" m-set) :void (mat :pointer) (row :int)
                                                  (col :int) (value :double))

(cffi:defcfun ("cvGrabFrame" grab-frame) :int (capture :pointer))

(cffi:defcfun ("cvCopyHist" copy-hist) :void (src :pointer) (dst :pointer))

(cffi:defcfun ("cvApproxPoly" approx-poly) :pointer (src-seq :pointer)
                                                    (header-size :int)
                                                    (storage :pointer)
                                                    (method :int)
                                                    (parameter :double)
                                                    (parameter-2 :int))

(cffi:defcfun ("cvCornerMinEigenVal" corner-min-eigen-val) :void
                                                                 (image :pointer)
                                                                 (eigenval :pointer)
                                                                 (block-size :int)
                                                                 (aperture-size :int))

(cffi:defcfun ("cvErrorStr" error-str) :pointer (status :int))

(cffi:defcfun ("cvCreateSeq" create-seq) :pointer (seq-flags :int)
                                                  (header-size :int)
                                                  (elem-size :int)
                                                  (storage :pointer))

(cffi:defcfun ("cvCreateSet" create-set) :pointer (set-flags :int)
                                                  (header-size :int)
                                                  (elem-size :int)
                                                  (storage :pointer))

(cffi:defcfun ("cvReleaseGraphScanner" release-graph-scanner) :void
                                                                    (scanner :pointer))

(cffi:defcfun ("cvInitFont" init-font) :void (font :pointer) (font-face :int)
                                             (hscale :double) (vscale :double)
                                             (shear :double) (thickness :int)
                                             (line-type :int))

(cffi:defcfun ("LSHSize" lsh-size) :unsigned-int (lsh :pointer))

(cffi:defcfun ("cvSubS" sub-s) :void (src :pointer) (value scalar)
                                     (dst :pointer) (mask :pointer))

(cffi:defcfun ("cvCreateLSH" create-lsh) :pointer (ops :pointer) (d :int)
                                                  (l :int) (k :int) (type :int)
                                                  (r :double) (seed int-64))

(cffi:defcfun ("cvAcc" acc) :void (image :pointer) (sum :pointer)
                                  (mask :pointer))

(cffi:defcfun ("_Z12cvPointTo32f7CvPoint" point-to-32f) point-2d-32f
                                                                     (point point))

(cffi:defcfun ("cvAdd" add) :void (src-1 :pointer) (src-2 :pointer)
                                  (dst :pointer) (mask :pointer))

(cffi:defcfun ("cvStartLoop" start-loop) :int (pt-2-func :pointer) (argc :int)
                                              (argv :pointer))

(cffi:defcfun ("cvCornerHarris" corner-harris) :void (image :pointer)
                                                     (harris-responce :pointer)
                                                     (block-size :int)
                                                     (aperture-size :int)
                                                     (k :double))

(cffi:defcfun ("cvSet3D" set-3d) :void (arr :pointer) (idx-0 :int) (idx-1 :int)
                                       (idx-2 :int) (value scalar))

(cffi:defcfun ("cvPyrDown" pyr-down) :void (src :pointer) (dst :pointer)
                                           (filter :int))

(cffi:defcfun ("cvFontQt" font-qt) font (name-font :pointer) (point-size :int)
                                        (color scalar) (weight :int)
                                        (style :int) (spacing :int))

(cffi:defcfun ("_Z7cvIsNaNd" is-na-n) :int (value :double))

(cffi:defcfun ("cvSetErrStatus" set-err-status) :void (status :int))

(cffi:defcfun ("cvScaleAdd" scale-add) :void (src-1 :pointer) (scale scalar)
                                             (src-2 :pointer) (dst :pointer))

(cffi:defcfun ("cvSetWindowProperty" set-window-property) :void (name :pointer)
                                                                (prop-id :int)
                                                                (prop-value :double))

(cffi:defcfun ("cvGetSetElem" get-set-elem) :pointer (set-header :pointer)
                                                     (index :int))

(cffi:defcfun ("cvStdErrReport" std-err-report) :int (status :int)
                                                     (func-name :pointer)
                                                     (err-msg :pointer)
                                                     (file-name :pointer)
                                                     (line :int)
                                                     (userdata (:pointer :void)))

(cffi:defcfun ("cvMorphologyEx" morphology-ex) :void (src :pointer)
                                                     (dst :pointer)
                                                     (temp :pointer)
                                                     (element :pointer)
                                                     (operation :int)
                                                     (iterations :int))

(cffi:defcfun ("cvSeqInsertSlice" seq-insert-slice) :void (seq :pointer)
                                                          (before-index :int)
                                                          (from-arr :pointer))

(cffi:defcfun ("cvGetSeqReaderPos" get-seq-reader-pos) :int (reader :pointer))

(cffi:defcfun ("cvFilter2D" filter-2d) :void (src :pointer) (dst :pointer)
                                             (kernel :pointer) (anchor point))

(cffi:defcfun ("cvMahalanobis" mahalanobis) :double (vec-1 :pointer)
                                                    (vec-2 :pointer)
                                                    (mat :pointer))

(cffi:defcfun ("cvReadRealByName" read-real-by-name) :double (fs :pointer)
                                                             (map :pointer)
                                                             (name :pointer)
                                                             (default-value :double))

(cffi:defcfun ("cvGraphAddEdgeByPtr" graph-add-edge-by-ptr) :int
                                                                 (graph :pointer)
                                                                 (start-vtx :pointer)
                                                                 (end-vtx :pointer)
                                                                 (edge :pointer)
                                                                 (inserted-edge :pointer))

(cffi:defcfun ("cvMakeHistHeaderForArray" make-hist-header-for-array) :pointer
                                                                               (dims :int)
                                                                               (sizes (:pointer :int))
                                                                               (hist :pointer)
                                                                               (data (:pointer :float))
                                                                               (ranges :pointer)
                                                                               (uniform :int))

(cffi::defctype file-node-hash generic-hash)

(cffi:defcfun ("cvCircle" circle) :void (img :pointer) (center point)
                                        (radius :int) (color scalar)
                                        (thickness :int) (line-type :int)
                                        (shift :int))

(cffi:defcfun ("cvSolveCubic" solve-cubic) :int (coeffs :pointer)
                                                (roots :pointer))

(cffi:defcfun ("cvAnd" and) :void (src-1 :pointer) (src-2 :pointer)
                                  (dst :pointer) (mask :pointer))

(cffi:defcfun ("cvClone" clone) (:pointer :void) (struct-ptr :pointer))

(cffi:defcfun ("cvMinAreaRect2" min-area-rect-2) box-2d (points :pointer)
                                                        (storage :pointer))

(cffi:defcfun ("cvCreateFileCapture" create-file-capture) :pointer
                                                                   (filename :pointer))

(cffi:defcfun ("cvGetND" get-nd) scalar (arr :pointer) (idx :pointer))

(cffi:defcfun ("cvInRangeS" in-range-s) :void (src :pointer) (lower scalar)
                                              (upper scalar) (dst :pointer))

(cffi:defcfun ("cvWriteInt" write-int) :void (fs :pointer) (name :pointer)
                                             (value :int))

(cffi:defcfun ("cvSetRemoveByPtr" set-remove-by-ptr) :void (set-header :pointer)
                                                           (elem (:pointer :void)))

(cffi:defcfun ("cvCreateChildMemStorage" create-child-mem-storage) :pointer
                                                                            (parent :pointer))

(cffi:defcfun ("cvGetFileNodeName" get-file-node-name) :pointer (node :pointer))

(cffi:defcfun ("_Z12cvPoint3D32fddd" point-3d-32f) point-3d-32f (x :double)
                                                                (y :double)
                                                                (z :double))

(cffi:defcfun ("cvGetRow" get-row) :pointer (arr :pointer) (submat :pointer)
                                            (row :int))

(cffi:defcfun ("cvAbsDiffS" abs-diff-s) :void (src :pointer) (dst :pointer)
                                              (value scalar))

(cffi:defcfun ("cvLog" log) :void (src :pointer) (dst :pointer))

(cffi:defcfun ("cvCheckHardwareSupport" check-hardware-support) :int
                                                                     (feature :int))

(cffi:defcfun ("cvGoodFeaturesToTrack" good-features-to-track) :void
                                                                     (image :pointer)
                                                                     (eig-image :pointer)
                                                                     (temp-image :pointer)
                                                                     (corners :pointer)
                                                                     (corner-count (:pointer :int))
                                                                     (quality-level :double)
                                                                     (min-distance :double)
                                                                     (mask :pointer)
                                                                     (block-size :int)
                                                                     (use-harris :int)
                                                                     (k :double))

(cffi:defcfun ("cvSetData" set-data) :void (arr :pointer)
                                           (data (:pointer :void)) (step :int))

(cffi::defctype mouse-callback :pointer)

(cffi:defcfun ("cvSetMouseCallback" set-mouse-callback) :void
                                                              (window-name :pointer)
                                                              (on-mouse mouse-callback)
                                                              (param (:pointer :void)))

(cffi:defcfun ("cvThreshold" threshold) :double (src :pointer) (dst :pointer)
                                                (threshold :double)
                                                (max-value :double)
                                                (threshold-type :int))

(cffi:defcfun ("cvStartAppendToSeq" start-append-to-seq) :void (seq :pointer)
                                                               (writer :pointer))

(cffi:defcfun ("cvAndS" and-s) :void (src :pointer) (value scalar)
                                     (dst :pointer) (mask :pointer))

(cffi:defcfun ("cvSubdiv2DNextEdge" subdiv-2d-next-edge) subdiv-2d-edge
                                                                        (edge subdiv-2d-edge))

(cffi:defcfun ("cvSeqInvert" seq-invert) :void (seq :pointer))

(cffi:defcfun ("cvConvertImage" convert-image) :void (src :pointer)
                                                     (dst :pointer) (flags :int))

(cffi:defcstruct line-iterator
  (ptr :pointer)
  (err :int)
  (plus-delta :int)
  (minus-delta :int)
  (plus-step :int)
  (minus-step :int))

(cffi:defcfun ("cvNormalizeHist" normalize-hist) :void (hist :pointer)
                                                       (factor :double))

(cffi:defcfun ("cvAddWeighted" add-weighted) :void (src-1 :pointer)
                                                   (alpha :double)
                                                   (src-2 :pointer)
                                                   (beta :double)
                                                   (gamma :double)
                                                   (dst :pointer))

(cffi:defcfun ("_Z11cvROIToRect7_IplROI" roi-to-rect) rect (roi ipl-roi))

(cffi:defcfun ("cvBoundingRect" bounding-rect) rect (points :pointer)
                                                    (update :int))

(cffi:defcfun ("cvInitSparseMatIterator" init-sparse-mat-iterator) :pointer
                                                                            (mat :pointer)
                                                                            (mat-iterator :pointer))

(cffi:defcfun ("cvReadRawDataSlice" read-raw-data-slice) :void (fs :pointer)
                                                               (reader :pointer)
                                                               (count :int)
                                                               (dst (:pointer :void))
                                                               (dt :pointer))

(cffi:defcfun ("_Z9cvRandIntPm" rand-int) :unsigned-int (rng :pointer))

(cffi:defcfun ("cvPow" pow) :void (src :pointer) (dst :pointer) (power :double))

(cffi:defcfun ("cvTransform" transform) :void (src :pointer) (dst :pointer)
                                              (transmat :pointer)
                                              (shiftvec :pointer))

(cffi:defcfun ("cvErrorFromIppStatus" error-from-ipp-status) :int
                                                                  (ipp-status :int))

(cffi:defcfun ("cvGetFileNodeByName" get-file-node-by-name) :pointer
                                                                     (fs :pointer)
                                                                     (map :pointer)
                                                                     (name :pointer))

(cffi:defcfun ("cvCalcArrBackProject" calc-arr-back-project) :void
                                                                   (image :pointer)
                                                                   (dst :pointer)
                                                                   (hist :pointer))

(cffi:defcfun ("cvReleasePyramid" release-pyramid) :void (pyramid :pointer)
                                                         (extra-layers :int))

(cffi:defcfun ("cvHoughLines2" hough-lines-2) :pointer (image :pointer)
                                                       (line-storage (:pointer :void))
                                                       (method :int)
                                                       (rho :double)
                                                       (theta :double)
                                                       (threshold :int)
                                                       (param-1 :double)
                                                       (param-2 :double))

(cffi:defcfun ("cvSetErrMode" set-err-mode) :int (mode :int))

(cffi:defcfun ("cvSeqPopFront" seq-pop-front) :void (seq :pointer)
                                                    (element (:pointer :void)))

(cffi:defcfun ("cvGetCols" get-cols) :pointer (arr :pointer) (submat :pointer)
                                              (start-col :int) (end-col :int))

(cffi:defcfun ("cvCalcSubdivVoronoi2D" calc-subdiv-voronoi-2d) :void
                                                                     (subdiv :pointer))

(cffi:defcfun ("cvUndistort2" undistort-2) :void (src :pointer) (dst :pointer)
                                                 (camera-matrix :pointer)
                                                 (distortion-coeffs :pointer)
                                                 (new-camera-matrix :pointer))

(cffi:defcfun ("cvGetWindowProperty" get-window-property) :double
                                                                  (name :pointer)
                                                                  (prop-id :int))

(cffi:defcfun ("cvReleaseImage" release-image) :void (image :pointer))

(cffi:defcfun ("cvClearSeq" clear-seq) :void (seq :pointer))

(cffi:defcfun ("cvClearSet" clear-set) :void (set-header :pointer))

(cffi:defcfun ("cvFindGraphEdgeByPtr" find-graph-edge-by-ptr) :pointer
                                                                       (graph :pointer)
                                                                       (start-vtx :pointer)
                                                                       (end-vtx :pointer))

(cffi:defcfun ("cvGetErrStatus" get-err-status) :int)

(cffi:defcfun ("cvSquareAcc" square-acc) :void (image :pointer) (sqsum :pointer)
                                               (mask :pointer))

(cffi:defcfun ("cvCloneMatND" clone-mat-nd) :pointer (mat :pointer))

(cffi:defcfun ("cvGetErrInfo" get-err-info) :int (errcode-desc :pointer)
                                                 (description :pointer)
                                                 (filename :pointer)
                                                 (line (:pointer :int)))

(cffi:defcfun ("_Z10cvRandRealPm" rand-real) :double (rng :pointer))

(cffi:defcfun ("cvPyrMeanShiftFiltering" pyr-mean-shift-filtering) :void
                                                                         (src :pointer)
                                                                         (dst :pointer)
                                                                         (sp :double)
                                                                         (sr :double)
                                                                         (max-level :int)
                                                                         (termcrit term-criteria))

(cffi:defcfun ("cvGetRectSubPix" get-rect-sub-pix) :void (src :pointer)
                                                         (dst :pointer)
                                                         (center point-2d-32f))

(cffi:defcfun ("_Z12cvPoint2D32fdd" point-2d-32f) point-2d-32f (x :double)
                                                               (y :double))

(cffi:defcfun ("cvMulSpectrums" mul-spectrums) :void (src-1 :pointer)
                                                     (src-2 :pointer)
                                                     (dst :pointer) (flags :int))

(cffi:defcfun ("cvRange" range) :pointer (mat :pointer) (start :double)
                                         (end :double))

(cffi:defcfun ("cvReleaseFileStorage" release-file-storage) :void (fs :pointer))

(cffi:defcfun ("cvReleaseVideoWriter" release-video-writer) :void
                                                                  (writer :pointer))

(cffi:defcfun ("cvDotProduct" dot-product) :double (src-1 :pointer)
                                                   (src-2 :pointer))

(cffi:defcfun ("cvApproxChains" approx-chains) :pointer (src-seq :pointer)
                                                        (storage :pointer)
                                                        (method :int)
                                                        (parameter :double)
                                                        (minimal-perimeter :int)
                                                        (recursive :int))

(cffi:defcfun ("cvCbrt" cbrt) :float (value :float))

(cffi:defcfun ("cvLogPolar" log-polar) :void (src :pointer) (dst :pointer)
                                             (center point-2d-32f) (m :double)
                                             (flags :int))

(cffi:defcfun ("cvSeqSlice" seq-slice) :pointer (seq :pointer) (slice slice)
                                                (storage :pointer)
                                                (copy-data :int))

(cffi:defcfun ("_Z10cvIplDepthi" ipl-depth) :int (type :int))

(cffi:defcfun ("cvPointSeqFromMat" point-seq-from-mat) :pointer (seq-kind :int)
                                                                (mat :pointer)
                                                                (contour-header :pointer)
                                                                (block :pointer))

(cffi:defcfun ("cvCreateImage" create-image) :pointer (size size) (depth :int)
                                                      (channels :int))

(cffi:defcfun ("cvFindFeatures" find-features) :void (tr :pointer)
                                                     (query-points :pointer)
                                                     (indices :pointer)
                                                     (dist :pointer) (k :int)
                                                     (emax :int))

(cffi:defcfun ("cvSubdiv2DRotateEdge" subdiv-2d-rotate-edge) subdiv-2d-edge
                                                                            (edge subdiv-2d-edge)
                                                                            (rotate :int))

(cffi:defcfun ("cvUnregisterType" unregister-type) :void (type-name :pointer))

(cffi:defcfun ("cvSolve" solve) :int (src-1 :pointer) (src-2 :pointer)
                                     (dst :pointer) (method :int))

(cffi:defcfun ("cvWrite" write) :void (fs :pointer) (name :pointer)
                                      (ptr :pointer) (attributes attr-list))

(cffi:defcfun ("cvDisplayStatusBar" display-status-bar) :void (name :pointer)
                                                              (text :pointer)
                                                              (delayms :int))

(cffi:defcfun ("cvAvg" avg) scalar (arr :pointer) (mask :pointer))

(cffi:defcfun ("cvReleaseHist" release-hist) :void (hist :pointer))

(cffi:defcfun ("cvChangeSeqBlock" change-seq-block) :void
                                                          (reader (:pointer :void))
                                                          (direction :int))

(cffi:defcfun ("cvCopyMakeBorder" copy-make-border) :void (src :pointer)
                                                          (dst :pointer)
                                                          (offset point)
                                                          (bordertype :int)
                                                          (value scalar))

(cffi:defcfun ("cvFillPoly" fill-poly) :void (img :pointer) (pts :pointer)
                                             (npts :pointer) (contours :int)
                                             (color scalar) (line-type :int)
                                             (shift :int))

(cffi::defctype open-gl-callback :pointer)

(cffi:defcfun ("cvSet2D" set-2d) :void (arr :pointer) (idx-0 :int) (idx-1 :int)
                                       (value scalar))

(cffi:defcfun ("cvExp" exp) :void (src :pointer) (dst :pointer))

(cffi:defcfun ("cvFindType" find-type) :pointer (type-name :pointer))

(cffi:defcfun ("cvSaveMemStoragePos" save-mem-storage-pos) :void
                                                                 (storage :pointer)
                                                                 (pos :pointer))

(cffi:defcfun ("_Z7cvSliceii" slice) slice (start :int) (end :int))

(cffi:defcfun ("cvFree_" free-) :void (ptr (:pointer :void)))

(cffi:defcfun ("cvGetRawData" get-raw-data) :void (arr :pointer) (data :pointer)
                                                  (step (:pointer :int))
                                                  (roi-size :pointer))

(cffi:defcfun ("cvOpenFileStorage" open-file-storage) :pointer
                                                               (filename :pointer)
                                                               (memstorage :pointer)
                                                               (flags :int))

(cffi:defcfun ("cvInitLineIterator" init-line-iterator) :int (image :pointer)
                                                             (pt-1 point)
                                                             (pt-2 point)
                                                             (line-iterator :pointer)
                                                             (connectivity :int)
                                                             (left-to-right :int))

(cffi:defcfun ("cvCreateTrackbar" create-trackbar) :int (trackbar-name :pointer)
                                                        (window-name :pointer)
                                                        (value (:pointer :int))
                                                        (count :int)
                                                        (on-change trackbar-callback))

(cffi:defcfun ("cvCalcCovarMatrix" calc-covar-matrix) :void (vects :pointer)
                                                            (count :int)
                                                            (cov-mat :pointer)
                                                            (avg :pointer)
                                                            (flags :int))

(cffi:defcfun ("cvGetTickFrequency" get-tick-frequency) :double)

(cffi:defcfun ("cvXorS" xor-s) :void (src :pointer) (value scalar)
                                     (dst :pointer) (mask :pointer))

(cffi:defcfun ("cvSolvePoly" solve-poly) :void (coeffs :pointer)
                                               (roots-2 :pointer) (maxiter :int)
                                               (fig :int))

(cffi:defcfun ("cvGetPerspectiveTransform" get-perspective-transform) :pointer
                                                                               (src :pointer)
                                                                               (dst :pointer)
                                                                               (map-matrix :pointer))

(cffi:defcfun ("cvWriteString" write-string) :void (fs :pointer) (name :pointer)
                                                   (str :pointer) (quote :int))

(cffi:defcstruct graph-vtx-2d
  (flags :int)
  (first :pointer)
  (ptr :pointer))

(cffi:defcfun ("cvCreateGraph" create-graph) :pointer (graph-flags :int)
                                                      (header-size :int)
                                                      (vtx-size :int)
                                                      (edge-size :int)
                                                      (storage :pointer))

(cffi:defcfun ("cvSeqSearch" seq-search) :pointer (seq :pointer) (elem :pointer)
                                                  (func cmp-func)
                                                  (is-sorted :int)
                                                  (elem-idx (:pointer :int))
                                                  (userdata (:pointer :void)))

(cffi:defcfun ("cvStopLoop" stop-loop) :void)

(cffi:defcfun ("cvGetImage" get-image) :pointer (arr :pointer)
                                                (image-header :pointer))

(cffi:defcfun ("cvTypeOf" type-of) :pointer (struct-ptr :pointer))

(cffi:defcfun ("cvPointPolygonTest" point-polygon-test) :double
                                                                (contour :pointer)
                                                                (pt point-2d-32f)
                                                                (measure-dist :int))

(cffi:defcfun ("cvCreateMatHeader" create-mat-header) :pointer (rows :int)
                                                               (cols :int)
                                                               (type :int))

(cffi:defcfun ("cvGraphRemoveEdgeByPtr" graph-remove-edge-by-ptr) :void
                                                                        (graph :pointer)
                                                                        (start-vtx :pointer)
                                                                        (end-vtx :pointer))

(cffi:defcfun ("cvScalarToRawData" scalar-to-raw-data) :void (scalar :pointer)
                                                             (data (:pointer :void))
                                                             (type :int)
                                                             (extend-to-12 :int))

(cffi:defcfun ("cvLaplace" laplace) :void (src :pointer) (dst :pointer)
                                          (aperture-size :int))

(cffi:defcfun ("cvGetNumThreads" get-num-threads) :int)

(cffi:defcfun ("cvDistTransform" dist-transform) :void (src :pointer)
                                                       (dst :pointer)
                                                       (distance-type :int)
                                                       (mask-size :int)
                                                       (mask :pointer)
                                                       (labels :pointer))

(cffi:defcfun ("cvGetSize" get-size) size (arr :pointer))

(cffi:defcfun ("cvErode" erode) :void (src :pointer) (dst :pointer)
                                      (element :pointer) (iterations :int))

(cffi:defcfun ("cvEigenVV" eigen-vv) :void (mat :pointer) (evects :pointer)
                                           (evals :pointer) (eps :double)
                                           (lowindex :int) (highindex :int))

(cffi:defcfun ("cvRead" read) (:pointer :void) (fs :pointer) (node :pointer)
                                               (attributes :pointer))

(cffi:defcfun ("cvDestroyAllWindows" destroy-all-windows) :void)

(cffi:defcfun ("cvSeqInsert" seq-insert) :pointer (seq :pointer)
                                                  (before-index :int)
                                                  (element :pointer))

(cffi:defcfun ("cvInvert" invert) :double (src :pointer) (dst :pointer)
                                          (method :int))

(cffi:defcfun ("cvLine" line) :void (img :pointer) (pt-1 point) (pt-2 point)
                                    (color scalar) (thickness :int)
                                    (line-type :int) (shift :int))

(cffi:defcfun ("cvNormalize" normalize) :void (src :pointer) (dst :pointer)
                                              (a :double) (b :double)
                                              (norm-type :int) (mask :pointer))

(cffi:defcfun ("cvMulTransposed" mul-transposed) :void (src :pointer)
                                                       (dst :pointer)
                                                       (order :int)
                                                       (delta :pointer)
                                                       (scale :double))

(cffi:defcfun ("cvMemStorageAlloc" mem-storage-alloc) (:pointer :void)
                                                                       (storage :pointer)
                                                                       (size size-t))

(cffi:defcfun ("cvMax" max) :void (src-1 :pointer) (src-2 :pointer)
                                  (dst :pointer))

(cffi:defcfun ("cvWarpPerspective" warp-perspective) :void (src :pointer)
                                                           (dst :pointer)
                                                           (map-matrix :pointer)
                                                           (flags :int)
                                                           (fillval scalar))

(cffi:defcfun ("cvEllipse" ellipse) :void (img :pointer) (center point)
                                          (axes size) (angle :double)
                                          (start-angle :double)
                                          (end-angle :double) (color scalar)
                                          (thickness :int) (line-type :int)
                                          (shift :int))

(cffi:defcfun ("cvEndWriteStruct" end-write-struct) :void (fs :pointer))

(cffi:defcfun ("cvNextNArraySlice" next-n-array-slice) :int
                                                            (array-iterator :pointer))

(cffi:defcfun ("cvReadInt" read-int) :int (node :pointer) (default-value :int))

(cffi:defcfun ("cvCreateMemStorage" create-mem-storage) :pointer
                                                                 (block-size :int))

(cffi:defcenum .-22
  (:_-sts-ok 0)
  (:_-sts-back-trace -1)
  (:_-sts-error -2)
  (:_-sts-internal -3)
  (:_-sts-no-mem -4)
  (:_-sts-bad-arg -5)
  (:_-sts-bad-func -6)
  (:_-sts-no-conv -7)
  (:_-sts-auto-trace -8)
  (:_-header-is-null -9)
  (:_-bad-image-size -10)
  (:_-bad-offset -11)
  (:_-bad-data-ptr -12)
  (:_-bad-step -13)
  (:_-bad-model-or-ch-seq -14)
  (:_-bad-num-channels -15)
  (:_-bad-num-channel-1u -16)
  (:_-bad-depth -17)
  (:_-bad-alpha-channel -18)
  (:_-bad-order -19)
  (:_-bad-origin -20)
  (:_-bad-align -21)
  (:_-bad-call-back -22)
  (:_-bad-tile-size -23)
  (:_-bad-coi -24)
  (:_-bad-roi-size -25)
  (:_-mask-is-tiled -26)
  (:_-sts-null-ptr -27)
  (:_-sts-vec-length-err -28)
  (:_-sts-filter-struct-content-err -29)
  (:_-sts-kernel-struct-content-err -30)
  (:_-sts-filter-offset-err -31)
  (:_-sts-bad-size -201)
  (:_-sts-div-by-zero -202)
  (:_-sts-inplace-not-supported -203)
  (:_-sts-object-not-found -204)
  (:_-sts-unmatched-formats -205)
  (:_-sts-bad-flag -206)
  (:_-sts-bad-point -207)
  (:_-sts-bad-mask -208)
  (:_-sts-unmatched-sizes -209)
  (:_-sts-unsupported-format -210)
  (:_-sts-out-of-range -211)
  (:_-sts-parse-error -212)
  (:_-sts-not-implemented -213)
  (:_-sts-bad-mem-block -214)
  (:_-sts-assert -215)
  (:_-gpu-not-supported -216)
  (:_-gpu-api-call-error -217)
  (:_-gpu-npp-call-error -218))

(cffi:defcfun ("_Z5cvMatiiiPv" mat) mat (rows :int) (cols :int) (type :int)
                                        (data (:pointer :void)))

(cffi:defcfun ("_Z12cvRealScalard" real-scalar) scalar (val-0 :double))

(cffi:defcenum .-30
  (:_blur-no-scale 0)
  (:_blur 1)
  (:_gaussian 2)
  (:_median 3)
  (:_bilateral 4))

(cffi:defcenum .-32
  (:_inpaint-ns 0)
  (:_inpaint-telea 1))

(cffi:defcenum .-33
  (:_scharr -1)
  (:_max-sobel-ksize 7))

(cffi:defcenum .-34
  (:_bgr-2bgra 0)
  (:_rgb-2rgba 0)
  (:_bgra-2bgr 1)
  (:_rgba-2rgb 1)
  (:_bgr-2rgba 2)
  (:_rgb-2bgra 2)
  (:_rgba-2bgr 3)
  (:_bgra-2rgb 3)
  (:_bgr-2rgb 4)
  (:_rgb-2bgr 4)
  (:_bgra-2rgba 5)
  (:_rgba-2bgra 5)
  (:_bgr-2gray 6)
  (:_rgb-2gray 7)
  (:_gray-2bgr 8)
  (:_gray-2rgb 8)
  (:_gray-2bgra 9)
  (:_gray-2rgba 9)
  (:_bgra-2gray 10)
  (:_rgba-2gray 11)
  (:_bgr-2bgr-565 12)
  (:_rgb-2bgr-565 13)
  (:_bgr-5652bgr 14)
  (:_bgr-5652rgb 15)
  (:_bgra-2bgr-565 16)
  (:_rgba-2bgr-565 17)
  (:_bgr-5652bgra 18)
  (:_bgr-5652rgba 19)
  (:_gray-2bgr-565 20)
  (:_bgr-5652gray 21)
  (:_bgr-2bgr-555 22)
  (:_rgb-2bgr-555 23)
  (:_bgr-5552bgr 24)
  (:_bgr-5552rgb 25)
  (:_bgra-2bgr-555 26)
  (:_rgba-2bgr-555 27)
  (:_bgr-5552bgra 28)
  (:_bgr-5552rgba 29)
  (:_gray-2bgr-555 30)
  (:_bgr-5552gray 31)
  (:_bgr-2xyz 32)
  (:_rgb-2xyz 33)
  (:_xyz-2bgr 34)
  (:_xyz-2rgb 35)
  (:_bgr-2y-cr-cb 36)
  (:_rgb-2y-cr-cb 37)
  (:_y-cr-cb-2bgr 38)
  (:_y-cr-cb-2rgb 39)
  (:_bgr-2hsv 40)
  (:_rgb-2hsv 41)
  (:_bgr-2-lab 44)
  (:_rgb-2-lab 45)
  (:_-bayer-bg-2bgr 46)
  (:_-bayer-gb-2bgr 47)
  (:_-bayer-rg-2bgr 48)
  (:_-bayer-gr-2bgr 49)
  (:_-bayer-bg-2rgb 48)
  (:_-bayer-gb-2rgb 49)
  (:_-bayer-rg-2rgb 46)
  (:_-bayer-gr-2rgb 47)
  (:_bgr-2-luv 50)
  (:_rgb-2-luv 51)
  (:_bgr-2hls 52)
  (:_rgb-2hls 53)
  (:_hsv-2bgr 54)
  (:_hsv-2rgb 55)
  (:_-lab-2bgr 56)
  (:_-lab-2rgb 57)
  (:_-luv-2bgr 58)
  (:_-luv-2rgb 59)
  (:_hls-2bgr 60)
  (:_hls-2rgb 61)
  (:_-bayer-bg-2bgr-vng 62)
  (:_-bayer-gb-2bgr-vng 63)
  (:_-bayer-rg-2bgr-vng 64)
  (:_-bayer-gr-2bgr-vng 65)
  (:_-bayer-bg-2rgb-vng 64)
  (:_-bayer-gb-2rgb-vng 65)
  (:_-bayer-rg-2rgb-vng 62)
  (:_-bayer-gr-2rgb-vng 63)
  (:_bgr-2hsv-full 66)
  (:_rgb-2hsv-full 67)
  (:_bgr-2hls-full 68)
  (:_rgb-2hls-full 69)
  (:_hsv-2bgr-full 70)
  (:_hsv-2rgb-full 71)
  (:_hls-2bgr-full 72)
  (:_hls-2rgb-full 73)
  (:_lbgr-2-lab 74)
  (:_lrgb-2-lab 75)
  (:_lbgr-2-luv 76)
  (:_lrgb-2-luv 77)
  (:_-lab-2lbgr 78)
  (:_-lab-2lrgb 79)
  (:_-luv-2lbgr 80)
  (:_-luv-2lrgb 81)
  (:_bgr-2yuv 82)
  (:_rgb-2yuv 83)
  (:_yuv-2bgr 84)
  (:_yuv-2rgb 85)
  (:_colorcvt-max 100))

(cffi:defcenum .-35
  (:_inter-nn 0)
  (:_inter-linear 1)
  (:_inter-cubic 2)
  (:_inter-area 3)
  (:_inter-lanczos-4 4))

(cffi:defcenum .-39
  (:_tm-sqdiff 0)
  (:_tm-sqdiff-normed 1)
  (:_tm-ccorr 2)
  (:_tm-ccorr-normed 3)
  (:_tm-ccoeff 4)
  (:_tm-ccoeff-normed 5))

(cffi:defcenum .-40
  (:_retr-external 0)
  (:_retr-list 1)
  (:_retr-ccomp 2)
  (:_retr-tree 3))

(cffi:defcfun ("cvBoxPoints" box-points) :void (box box-2d) (pt :pointer))

(cffi:defcenum .-43
  (:_contours-match-i-1 1)
  (:_contours-match-i-2 2)
  (:_contours-match-i-3 3))

(cffi:defcfun ("cvCreateHist" create-hist) :pointer (dims :int)
                                                    (sizes (:pointer :int))
                                                    (type :int)
                                                    (ranges :pointer)
                                                    (uniform :int))

(cffi:defcenum .-45
  (:_comp-correl 0)
  (:_comp-chisqr 1)
  (:_comp-intersect 2)
  (:_comp-bhattacharyya 3))

(cffi:defcfun ("_Z11cvSize2D32fdd" size-2d-32f) size-2d-32f (width :double)
                                                            (height :double))

(cffi:defcenum .-47
  (:_dist-user -1)
  (:_dist-l-1 1)
  (:_dist-l-2 2)
  (:_dist-c 3)
  (:_dist-l-12 4)
  (:_dist-fair 5)
  (:_dist-welsch 6)
  (:_dist-huber 7))

(cffi:defcenum .-48
  (:_thresh-binary 0)
  (:_thresh-binary-inv 1)
  (:_thresh-trunc 2)
  (:_thresh-tozero 3)
  (:_thresh-tozero-inv 4)
  (:_thresh-mask 7)
  (:_thresh-otsu 8))

(cffi:defcenum .-49
  (:_adaptive-thresh-mean-c 0)
  (:_adaptive-thresh-gaussian-c 1))

(cffi:defcfun ("cvCreatePyramid" create-pyramid) :pointer (img :pointer)
                                                          (extra-layers :int)
                                                          (rate :double)
                                                          (layer-sizes :pointer)
                                                          (bufarr :pointer)
                                                          (calc :int)
                                                          (filter :int))

(cffi:defcfun ("cvCartToPolar" cart-to-polar) :void (x :pointer) (y :pointer)
                                                    (magnitude :pointer)
                                                    (angle :pointer)
                                                    (angle-in-degrees :int))

(cffi:defcenum next-edge-type
  (:_next-around-org 0)
  (:_next-around-dst 34)
  (:_prev-around-org 17)
  (:_prev-around-dst 51)
  (:_next-around-left 19)
  (:_next-around-right 49)
  (:_prev-around-left 32)
  (:_prev-around-right 2))

(cffi:defcfun ("cvSubdiv2DGetEdge" subdiv-2d-get-edge) subdiv-2d-edge
                                                                      (edge subdiv-2d-edge)
                                                                      (type next-edge-type))

(cffi:defcenum .-51
  (:_canny-l-2-gradient -2147483648))

(cffi:defcenum .-52
  (:_hough-standard 0)
  (:_hough-probabilistic 1)
  (:_hough-multi-scale 2)
  (:_hough-gradient 3))

(cffi:defcenum .-53
  (:_font-light 25)
  (:_font-normal 50)
  (:_font-demibold 63)
  (:_font-bold 75)
  (:_font-black 87))

(cffi:defcenum .-54
  (:_style-normal 0)
  (:_style-italic 1)
  (:_style-oblique 2))

(cffi:defcenum .-55
  (:_push-button 0)
  (:_checkbox 1)
  (:_radiobox 2))

(cffi:defcenum .-57
  (:_event-mousemove 0)
  (:_event-lbuttondown 1)
  (:_event-rbuttondown 2)
  (:_event-mbuttondown 3)
  (:_event-lbuttonup 4)
  (:_event-rbuttonup 5)
  (:_event-mbuttonup 6)
  (:_event-lbuttondblclk 7)
  (:_event-rbuttondblclk 8)
  (:_event-mbuttondblclk 9))

(cffi:defcenum .-58
  (:_event-flag-lbutton 1)
  (:_event-flag-rbutton 2)
  (:_event-flag-mbutton 4)
  (:_event-flag-ctrlkey 8)
  (:_event-flag-shiftkey 16)
  (:_event-flag-altkey 32))

(cffi:defcenum .-59
  (:_load-image-unchanged -1)
  (:_load-image-grayscale 0)
  (:_load-image-color 1)
  (:_load-image-anydepth 2)
  (:_load-image-anycolor 4))

(cffi:defcfun ("cvPerspectiveTransform" perspective-transform) :void
                                                                     (src :pointer)
                                                                     (dst :pointer)
                                                                     (mat :pointer))

(cffi:defcfun ("cvSubdivDelaunay2DInsert" subdiv-delaunay-2d-insert) :pointer
                                                                              (subdiv :pointer)
                                                                              (pt point-2d-32f))

(cffi:defcenum .-60
  (:_imwrite-jpeg-quality 1)
  (:_imwrite-png-compression 16)
  (:_imwrite-pxm-binary 32))

(cffi:defcenum .-61
  (:_cvtimg-flip 1)
  (:_cvtimg-swap-rb 2))

(cffi:defcfun ("cvFindCornerSubPix" find-corner-sub-pix) :void (image :pointer)
                                                               (corners :pointer)
                                                               (count :int)
                                                               (win size)
                                                               (zero-zone size)
                                                               (criteria term-criteria))

(cffi:defcfun ("cvBackProjectPCA" back-project-pca) :void (proj :pointer)
                                                          (mean :pointer)
                                                          (eigenvects :pointer)
                                                          (result :pointer))

(cffi:defcfun ("cvAdaptiveThreshold" adaptive-threshold) :void (src :pointer)
                                                               (dst :pointer)
                                                               (max-value :double)
                                                               (adaptive-method :int)
                                                               (threshold-type :int)
                                                               (block-size :int)
                                                               (param-1 :double))

(cffi:defcfun ("cvTriangleArea" triangle-area) :double (a point-2d-32f)
                                                       (b point-2d-32f)
                                                       (c point-2d-32f))

(cffi:defcfun ("cvFlushSeqWriter" flush-seq-writer) :void (writer :pointer))

(cffi:defcfun ("cvMakeSeqHeaderForArray" make-seq-header-for-array) :pointer
                                                                             (seq-type :int)
                                                                             (header-size :int)
                                                                             (elem-size :int)
                                                                             (elements (:pointer :void))
                                                                             (total :int)
                                                                             (seq :pointer)
                                                                             (block :pointer))

(cffi:defcfun ("cvClearMemStorage" clear-mem-storage) :void (storage :pointer))

(cffi:defcfun ("cvSeqPush" seq-push) :pointer (seq :pointer) (element :pointer))

(cffi:defcfun ("cvCreateSubdivDelaunay2D" create-subdiv-delaunay-2d) :pointer
                                                                              (rect rect)
                                                                              (storage :pointer))

(cffi:defcenum .-36
  (:_warp-fill-outliers 8)
  (:_warp-inverse-map 16))

(cffi:defcfun ("cvCreateGraphScanner" create-graph-scanner) :pointer
                                                                     (graph :pointer)
                                                                     (vtx :pointer)
                                                                     (mask :int))

(cffi:defcenum .-38
  (:_mop-erode 0)
  (:_mop-dilate 1)
  (:_mop-open 2)
  (:_mop-close 3)
  (:_mop-gradient 4)
  (:_mop-tophat 5)
  (:_mop-blackhat 6))

(cffi:defcfun ("cvSum" sum) scalar (arr :pointer))

(cffi::defctype ushort :unsigned-short)

(cffi:defcfun ("cvSeqPop" seq-pop) :void (seq :pointer)
                                         (element (:pointer :void)))

(cffi:defcfun ("cvReadChainPoint" read-chain-point) point (reader :pointer))

(cffi:defcfun ("cvCreateMat" create-mat) :pointer (rows :int) (cols :int)
                                                  (type :int))

(cffi:defcenum subdiv-2d-point-location
  (:_ptloc-error -2)
  (:_ptloc-outside-rect -1)
  (:_ptloc-inside 0)
  (:_ptloc-vertex 1)
  (:_ptloc-on-edge 2))

(cffi:defcfun ("cvSubdiv2DLocate" subdiv-2d-locate) subdiv-2d-point-location
                                                                             (subdiv :pointer)
                                                                             (pt point-2d-32f)
                                                                             (edge :pointer)
                                                                             (vertex :pointer))

(cffi:defcfun ("cvFindNearestPoint2D" find-nearest-point-2d) :pointer
                                                                      (subdiv :pointer)
                                                                      (pt point-2d-32f))

(cffi:defcfun ("cvGraphAddEdge" graph-add-edge) :int (graph :pointer)
                                                     (start-idx :int)
                                                     (end-idx :int)
                                                     (edge :pointer)
                                                     (inserted-edge :pointer))

(cffi:defcfun ("cvInpaint" inpaint) :void (src :pointer) (inpaint-mask :pointer)
                                          (dst :pointer) (inpaint-range :double)
                                          (flags :int))

(cffi:defcfun ("cvClearND" clear-nd) :void (arr :pointer) (idx :pointer))

(cffi:defcenum .-56
  (:_wnd-prop-fullscreen 0)
  (:_wnd-prop-autosize 1)
  (:_wnd-prop-aspectratio 2)
  (:_window-normal 0)
  (:_window-autosize 1)
  (:_gui-expanded 0)
  (:_gui-normal 16)
  (:_window-fullscreen 1)
  (:_window-freeratio 256)
  (:_window-keepratio 0))

(cffi:defcfun ("cvPrevTreeNode" prev-tree-node) (:pointer :void)
                                                                 (tree-iterator :pointer))

(cffi:defcfun ("cvSobel" sobel) :void (src :pointer) (dst :pointer)
                                      (xorder :int) (yorder :int)
                                      (aperture-size :int))

(cffi:defcfun ("cvCreateOpenGLCallback" create-open-gl-callback) :void
                                                                       (window-name :pointer)
                                                                       (callback-open-gl open-gl-callback)
                                                                       (userdata (:pointer :void))
                                                                       (angle :double)
                                                                       (zmin :double)
                                                                       (zmax :double))

(cffi:defcfun ("cvDecRefData" dec-ref-data) :void (arr :pointer))

(cffi:defcfun ("cvGetElemType" get-elem-type) :int (arr :pointer))

(cffi:defcfun ("cvXor" xor) :void (src-1 :pointer) (src-2 :pointer)
                                  (dst :pointer) (mask :pointer))

(cffi:defcfun ("cvCalcHist" calc-hist) :void (image :pointer) (hist :pointer)
                                             (accumulate :int) (mask :pointer))

(cffi:defcstruct module
  (info :pointer))

(cffi:defcfun ("cvIncRefData" inc-ref-data) :int (arr :pointer))

(cffi:defcfun ("cvReadByName" read-by-name) (:pointer :void) (fs :pointer)
                                                             (map :pointer)
                                                             (name :pointer)
                                                             (attributes :pointer))

(cffi:defcfun ("cvCalcPCA" calc-pca) :void (data :pointer) (mean :pointer)
                                           (eigenvals :pointer)
                                           (eigenvects :pointer) (flags :int))

(cffi:defcfun ("cvEncodeImage" encode-image) :pointer (ext :pointer)
                                                      (image :pointer)
                                                      (params :pointer))

(cffi:defcenum .-37
  (:_shape-rect 0)
  (:_shape-cross 1)
  (:_shape-ellipse 2)
  (:_shape-custom 100))

(cffi:defcfun ("cvGetMat" get-mat) :pointer (arr :pointer) (header :pointer)
                                            (coi (:pointer :int))
                                            (allow-nd :int))

(cffi:defcfun ("cvFirstType" first-type) :pointer)

(cffi:defcfun ("cvHoughCircles" hough-circles) :pointer (image :pointer)
                                                        (circle-storage (:pointer :void))
                                                        (method :int)
                                                        (dp :double)
                                                        (min-dist :double)
                                                        (param-1 :double)
                                                        (param-2 :double)
                                                        (min-radius :int)
                                                        (max-radius :int))

(cffi:defcfun ("cvRandShuffle" rand-shuffle) :void (mat :pointer) (rng :pointer)
                                                   (iter-factor :double))

(cffi:defcfun ("cvGetRootFileNode" get-root-file-node) :pointer (fs :pointer)
                                                                (stream-index :int))

(cffi:defcfun ("cvWatershed" watershed) :void (image :pointer)
                                              (markers :pointer))

(cffi:defcfun ("cvTrace" trace) scalar (mat :pointer))

(cffi:defcfun ("cvSeqRemove" seq-remove) :void (seq :pointer) (index :int))

(cffi:defcfun ("cvGet1D" get-1d) scalar (arr :pointer) (idx-0 :int))

(cffi:defcfun ("cvCompleteSymm" complete-symm) :void (matrix :pointer)
                                                     (lto-r :int))

(cffi:defcfun ("cvAlloc" alloc) (:pointer :void) (size size-t))

(cffi:defcfun ("cvGet2D" get-2d) scalar (arr :pointer) (idx-0 :int) (idx-1 :int))

(cffi:defcfun ("cvEllipse2Poly" ellipse-2-poly) :int (center point) (axes size)
                                                     (angle :int)
                                                     (arc-start :int)
                                                     (arc-end :int)
                                                     (pts :pointer) (delta :int))

(cffi:defcfun ("cvSetImageROI" set-image-roi) :void (image :pointer) (rect rect))

(cffi:defcfun ("_Z8cvScalardddd" scalar) scalar (val-0 :double) (val-1 :double)
                                                (val-2 :double) (val-3 :double))

(cffi:defcfun ("cvGet3D" get-3d) scalar (arr :pointer) (idx-0 :int) (idx-1 :int)
                                        (idx-2 :int))

(cffi:defcfun ("cvSeqPushMulti" seq-push-multi) :void (seq :pointer)
                                                      (elements :pointer)
                                                      (count :int)
                                                      (in-front :int))

(cffi:defcenum .-41
  (:_chain-code 0)
  (:_chain-approx-none 1)
  (:_chain-approx-simple 2)
  (:_chain-approx-tc-89-l-1 3)
  (:_chain-approx-tc-89-kcos 4)
  (:_link-runs 5))

(cffi:defcfun ("cvTreeToNodeSeq" tree-to-node-seq) :pointer (first :pointer)
                                                            (header-size :int)
                                                            (storage :pointer))

(cffi:defcfun ("cvMultiplyAcc" multiply-acc) :void (image-1 :pointer)
                                                   (image-2 :pointer)
                                                   (acc :pointer)
                                                   (mask :pointer))

(cffi:defcfun ("cvLSHRemove" lsh-remove) :void (lsh :pointer) (indices :pointer))

(cffi:defcfun ("_ZN10CvTypeInfoaSERKS_" type-info-operator-=) type-info (this :pointer)
                                                                        (arg1 type-info))

(cffi:defcfun ("_ZN10CvTypeInfoC1ERKS_" type-info-constructor) :void (this :pointer)
                                                                     (arg1 type-info))

(cl:defun type-info-new ()
  (cl:let ((instance (cffi:foreign-alloc 'type-info)))
    (type-info-constructor instance)
    instance))

(cffi:defcfun ("_ZN10CvTypeInfoC1Ev" type-info-constructor) :void (this :pointer))

(cl:defun type-info-new ()
  (cl:let ((instance (cffi:foreign-alloc 'type-info)))
    (type-info-constructor instance)
    instance))

(cffi:defcvar ("_ZN6CvType5firstE" first) :pointer)

(cffi:defcvar ("_ZN6CvType4lastE" last) :pointer)

(cffi:defcfun ("_ZN6CvTypeaSERKS_" type-operator-=) type (this :pointer)
                                                         (arg1 type))

(cffi:defcfun ("_ZN6CvTypeC1ERKS_" type-constructor) :void (this :pointer)
                                                           (arg1 type))

(cl:defun type-new ()
  (cl:let ((instance (cffi:foreign-alloc 'type)))
    (type-constructor instance)
    instance))

(cffi:defcfun ("_ZN6CvTypeC1EPKcPFiPKvEPFvPPvEPFS6_P13CvFileStorageP10CvFileNodeEPFvSB_S1_S3_10CvAttrListEPFS6_S3_E" type-constructor) :void (this :pointer)
                                                                                                                                             (type-name :pointer)
                                                                                                                                             (is-instance is-instance-func)
                                                                                                                                             (release release-func)
                                                                                                                                             (read read-func)
                                                                                                                                             (write write-func)
                                                                                                                                             (clone clone-func))

(cl:defun type-new ()
  (cl:let ((instance (cffi:foreign-alloc 'type)))
    (type-constructor instance)
    instance))

(cffi:defcfun ("_ZN7Cv32sufaSERKS_" 32suf-operator-=) 32suf (this :pointer)
                                                            (arg1 32suf))

(cffi:defcfun ("_ZN7Cv32sufC1ERKS_" 32suf-constructor) :void (this :pointer)
                                                             (arg1 32suf))

(cl:defun 32suf-new ()
  (cl:let ((instance (cffi:foreign-alloc '32suf)))
    (32suf-constructor instance)
    instance))

(cffi:defcfun ("_ZN7Cv32sufC1Ev" 32suf-constructor) :void (this :pointer))

(cl:defun 32suf-new ()
  (cl:let ((instance (cffi:foreign-alloc '32suf)))
    (32suf-constructor instance)
    instance))

(cffi:defcfun ("_ZN11CvHuMomentsaSERKS_" hu-moments-operator-=) hu-moments (this :pointer)
                                                                           (arg1 hu-moments))

(cffi:defcfun ("_ZN11CvHuMomentsC1ERKS_" hu-moments-constructor) :void (this :pointer)
                                                                       (arg1 hu-moments))

(cl:defun hu-moments-new ()
  (cl:let ((instance (cffi:foreign-alloc 'hu-moments)))
    (hu-moments-constructor instance)
    instance))

(cffi:defcfun ("_ZN11CvHuMomentsC1Ev" hu-moments-constructor) :void (this :pointer))

(cl:defun hu-moments-new ()
  (cl:let ((instance (cffi:foreign-alloc 'hu-moments)))
    (hu-moments-constructor instance)
    instance))

(cffi:defcfun ("_ZN17CvConvexityDefectaSERKS_" convexity-defect-operator-=) convexity-defect (this :pointer)
                                                                                             (arg1 convexity-defect))

(cffi:defcfun ("_ZN17CvConvexityDefectC1ERKS_" convexity-defect-constructor) :void (this :pointer)
                                                                                   (arg1 convexity-defect))

(cl:defun convexity-defect-new ()
  (cl:let ((instance (cffi:foreign-alloc 'convexity-defect)))
    (convexity-defect-constructor instance)
    instance))

(cffi:defcfun ("_ZN17CvConvexityDefectC1Ev" convexity-defect-constructor) :void (this :pointer))

(cl:defun convexity-defect-new ()
  (cl:let ((instance (cffi:foreign-alloc 'convexity-defect)))
    (convexity-defect-constructor instance)
    instance))

(cffi:defcfun ("_ZN8CvStringaSERKS_" string-operator-=) string (this :pointer)
                                                               (arg1 string))

(cffi:defcfun ("_ZN8CvStringC1ERKS_" string-constructor) :void (this :pointer)
                                                               (arg1 string))

(cl:defun string-new ()
  (cl:let ((instance (cffi:foreign-alloc 'string)))
    (string-constructor instance)
    instance))

(cffi:defcfun ("_ZN8CvStringC1Ev" string-constructor) :void (this :pointer))

(cl:defun string-new ()
  (cl:let ((instance (cffi:foreign-alloc 'string)))
    (string-constructor instance)
    instance))

(cffi:defcfun ("_ZN7Cv64sufaSERKS_" 64suf-operator-=) 64suf (this :pointer)
                                                            (arg1 64suf))

(cffi:defcfun ("_ZN7Cv64sufC1ERKS_" 64suf-constructor) :void (this :pointer)
                                                             (arg1 64suf))

(cl:defun 64suf-new ()
  (cl:let ((instance (cffi:foreign-alloc '64suf)))
    (64suf-constructor instance)
    instance))

(cffi:defcfun ("_ZN7Cv64sufC1Ev" 64suf-constructor) :void (this :pointer))

(cl:defun 64suf-new ()
  (cl:let ((instance (cffi:foreign-alloc '64suf)))
    (64suf-constructor instance)
    instance))

(cffi:defcfun ("_ZN14CvTermCriteriaaSERKS_" term-criteria-operator-=) term-criteria (this :pointer)
                                                                                    (arg1 term-criteria))

(cffi:defcfun ("_ZN14CvTermCriteriaC1ERKS_" term-criteria-constructor) :void (this :pointer)
                                                                             (arg1 term-criteria))

(cl:defun term-criteria-new ()
  (cl:let ((instance (cffi:foreign-alloc 'term-criteria)))
    (term-criteria-constructor instance)
    instance))

(cffi:defcfun ("_ZN14CvTermCriteriaC1Ev" term-criteria-constructor) :void (this :pointer))

(cl:defun term-criteria-new ()
  (cl:let ((instance (cffi:foreign-alloc 'term-criteria)))
    (term-criteria-constructor instance)
    instance))

(cffi:defcfun ("_ZN16_IplConvKernelFPaSERKS_" _-iplonv-kernel-fp-operator-=) _-iplonv-kernel-fp (this :pointer)
                                                                                                (arg1 _-iplonv-kernel-fp))

(cffi:defcfun ("_ZN16_IplConvKernelFPC1ERKS_" _-iplonv-kernel-fp-constructor) :void (this :pointer)
                                                                                    (arg1 _-iplonv-kernel-fp))

(cl:defun _-iplonv-kernel-fp-new ()
  (cl:let ((instance (cffi:foreign-alloc '_-iplonv-kernel-fp)))
    (_-iplonv-kernel-fp-constructor instance)
    instance))

(cffi:defcfun ("_ZN16_IplConvKernelFPC1Ev" _-iplonv-kernel-fp-constructor) :void (this :pointer))

(cl:defun _-iplonv-kernel-fp-new ()
  (cl:let ((instance (cffi:foreign-alloc '_-iplonv-kernel-fp)))
    (_-iplonv-kernel-fp-constructor instance)
    instance))

(cffi:defcfun ("_ZN14_IplConvKernelaSERKS_" _-iplonv-kernel-operator-=) _-iplonv-kernel (this :pointer)
                                                                                        (arg1 _-iplonv-kernel))

(cffi:defcfun ("_ZN14_IplConvKernelC1ERKS_" _-iplonv-kernel-constructor) :void (this :pointer)
                                                                               (arg1 _-iplonv-kernel))

(cl:defun _-iplonv-kernel-new ()
  (cl:let ((instance (cffi:foreign-alloc '_-iplonv-kernel)))
    (_-iplonv-kernel-constructor instance)
    instance))

(cffi:defcfun ("_ZN14_IplConvKernelC1Ev" _-iplonv-kernel-constructor) :void (this :pointer))

(cl:defun _-iplonv-kernel-new ()
  (cl:let ((instance (cffi:foreign-alloc '_-iplonv-kernel)))
    (_-iplonv-kernel-constructor instance)
    instance))

(cffi:defcfun ("_ZN7CvSliceaSERKS_" slice-operator-=) slice (this :pointer)
                                                            (arg1 slice))

(cffi:defcfun ("_ZN7CvSliceC1ERKS_" slice-constructor) :void (this :pointer)
                                                             (arg1 slice))

(cl:defun slice-new ()
  (cl:let ((instance (cffi:foreign-alloc 'slice)))
    (slice-constructor instance)
    instance))

(cffi:defcfun ("_ZN7CvSliceC1Ev" slice-constructor) :void (this :pointer))

(cl:defun slice-new ()
  (cl:let ((instance (cffi:foreign-alloc 'slice)))
    (slice-constructor instance)
    instance))

(cffi:defcfun ("_ZN10CvMemBlockaSERKS_" mem-block-operator-=) mem-block (this :pointer)
                                                                        (arg1 mem-block))

(cffi:defcfun ("_ZN10CvMemBlockC1ERKS_" mem-block-constructor) :void (this :pointer)
                                                                     (arg1 mem-block))

(cl:defun mem-block-new ()
  (cl:let ((instance (cffi:foreign-alloc 'mem-block)))
    (mem-block-constructor instance)
    instance))

(cffi:defcfun ("_ZN10CvMemBlockC1Ev" mem-block-constructor) :void (this :pointer))

(cl:defun mem-block-new ()
  (cl:let ((instance (cffi:foreign-alloc 'mem-block)))
    (mem-block-constructor instance)
    instance))

(cffi:defcfun ("_ZN12CvPoint3D64faSERKS_" point-3d-64f-operator-=) point-3d-64f (this :pointer)
                                                                                (arg1 point-3d-64f))

(cffi:defcfun ("_ZN12CvPoint3D64fC1ERKS_" point-3d-64f-constructor) :void (this :pointer)
                                                                          (arg1 point-3d-64f))

(cl:defun point-3d-64f-new ()
  (cl:let ((instance (cffi:foreign-alloc 'point-3d-64f)))
    (point-3d-64f-constructor instance)
    instance))

(cffi:defcfun ("_ZN12CvPoint3D64fC1Ev" point-3d-64f-constructor) :void (this :pointer))

(cl:defun point-3d-64f-new ()
  (cl:let ((instance (cffi:foreign-alloc 'point-3d-64f)))
    (point-3d-64f-constructor instance)
    instance))

(cffi:defcfun ("_ZN11CvHistogramaSERKS_" histogram-operator-=) histogram (this :pointer)
                                                                         (arg1 histogram))

(cffi:defcfun ("_ZN11CvHistogramC1ERKS_" histogram-constructor) :void (this :pointer)
                                                                      (arg1 histogram))

(cl:defun histogram-new ()
  (cl:let ((instance (cffi:foreign-alloc 'histogram)))
    (histogram-constructor instance)
    instance))

(cffi:defcfun ("_ZN11CvHistogramC1Ev" histogram-constructor) :void (this :pointer))

(cl:defun histogram-new ()
  (cl:let ((instance (cffi:foreign-alloc 'histogram)))
    (histogram-constructor instance)
    instance))

(cffi:defcfun ("_ZN10CvAttrListaSERKS_" attr-list-operator-=) attr-list (this :pointer)
                                                                        (arg1 attr-list))

(cffi:defcfun ("_ZN10CvAttrListC1ERKS_" attr-list-constructor) :void (this :pointer)
                                                                     (arg1 attr-list))

(cl:defun attr-list-new ()
  (cl:let ((instance (cffi:foreign-alloc 'attr-list)))
    (attr-list-constructor instance)
    instance))

(cffi:defcfun ("_ZN10CvAttrListC1Ev" attr-list-constructor) :void (this :pointer))

(cl:defun attr-list-new ()
  (cl:let ((instance (cffi:foreign-alloc 'attr-list)))
    (attr-list-constructor instance)
    instance))

(cffi:defcfun ("_ZN12CvMemStorageaSERKS_" mem-storage-operator-=) mem-storage (this :pointer)
                                                                              (arg1 mem-storage))

(cffi:defcfun ("_ZN12CvMemStorageC1ERKS_" mem-storage-constructor) :void (this :pointer)
                                                                         (arg1 mem-storage))

(cl:defun mem-storage-new ()
  (cl:let ((instance (cffi:foreign-alloc 'mem-storage)))
    (mem-storage-constructor instance)
    instance))

(cffi:defcfun ("_ZN12CvMemStorageC1Ev" mem-storage-constructor) :void (this :pointer))

(cl:defun mem-storage-new ()
  (cl:let ((instance (cffi:foreign-alloc 'mem-storage)))
    (mem-storage-constructor instance)
    instance))

(cffi:defcfun ("_ZN10CvGraphVtxaSERKS_" graph-vtx-operator-=) graph-vtx (this :pointer)
                                                                        (arg1 graph-vtx))

(cffi:defcfun ("_ZN10CvGraphVtxC1ERKS_" graph-vtx-constructor) :void (this :pointer)
                                                                     (arg1 graph-vtx))

(cl:defun graph-vtx-new ()
  (cl:let ((instance (cffi:foreign-alloc 'graph-vtx)))
    (graph-vtx-constructor instance)
    instance))

(cffi:defcfun ("_ZN10CvGraphVtxC1Ev" graph-vtx-constructor) :void (this :pointer))

(cl:defun graph-vtx-new ()
  (cl:let ((instance (cffi:foreign-alloc 'graph-vtx)))
    (graph-vtx-constructor instance)
    instance))

(cffi:defcfun ("_ZN12CvPoint2D64faSERKS_" point-2d-64f-operator-=) point-2d-64f (this :pointer)
                                                                                (arg1 point-2d-64f))

(cffi:defcfun ("_ZN12CvPoint2D64fC1ERKS_" point-2d-64f-constructor) :void (this :pointer)
                                                                          (arg1 point-2d-64f))

(cl:defun point-2d-64f-new ()
  (cl:let ((instance (cffi:foreign-alloc 'point-2d-64f)))
    (point-2d-64f-constructor instance)
    instance))

(cffi:defcfun ("_ZN12CvPoint2D64fC1Ev" point-2d-64f-constructor) :void (this :pointer))

(cl:defun point-2d-64f-new ()
  (cl:let ((instance (cffi:foreign-alloc 'point-2d-64f)))
    (point-2d-64f-constructor instance)
    instance))

(cffi:defcfun ("_ZN9CvContouraSERKS_" contour-operator-=) contour (this :pointer)
                                                                  (arg1 contour))

(cffi:defcfun ("_ZN9CvContourC1ERKS_" contour-constructor) :void (this :pointer)
                                                                 (arg1 contour))

(cl:defun contour-new ()
  (cl:let ((instance (cffi:foreign-alloc 'contour)))
    (contour-constructor instance)
    instance))

(cffi:defcfun ("_ZN9CvContourC1Ev" contour-constructor) :void (this :pointer))

(cl:defun contour-new ()
  (cl:let ((instance (cffi:foreign-alloc 'contour)))
    (contour-constructor instance)
    instance))

(cffi:defcfun ("_ZN10CvSubdiv2DaSERKS_" subdiv-2d-operator-=) subdiv-2d (this :pointer)
                                                                        (arg1 subdiv-2d))

(cffi:defcfun ("_ZN10CvSubdiv2DC1ERKS_" subdiv-2d-constructor) :void (this :pointer)
                                                                     (arg1 subdiv-2d))

(cl:defun subdiv-2d-new ()
  (cl:let ((instance (cffi:foreign-alloc 'subdiv-2d)))
    (subdiv-2d-constructor instance)
    instance))

(cffi:defcfun ("_ZN10CvSubdiv2DC1Ev" subdiv-2d-constructor) :void (this :pointer))

(cl:defun subdiv-2d-new ()
  (cl:let ((instance (cffi:foreign-alloc 'subdiv-2d)))
    (subdiv-2d-constructor instance)
    instance))

(cffi:defcfun ("_ZN5CvMataSERKS_" mat-operator-=) mat (this :pointer) (arg1 mat))

(cffi:defcfun ("_ZN5CvMatC1ERKS_" mat-constructor) :void (this :pointer)
                                                         (arg1 mat))

(cl:defun mat-new ()
  (cl:let ((instance (cffi:foreign-alloc 'mat)))
    (mat-constructor instance)
    instance))

(cffi:defcfun ("_ZN5CvMatC1Ev" mat-constructor) :void (this :pointer))

(cl:defun mat-new ()
  (cl:let ((instance (cffi:foreign-alloc 'mat)))
    (mat-constructor instance)
    instance))

(cffi:defcfun ("_ZN9CvMomentsaSERKS_" moments-operator-=) moments (this :pointer)
                                                                  (arg1 moments))

(cffi:defcfun ("_ZN9CvMomentsC1ERKS_" moments-constructor) :void (this :pointer)
                                                                 (arg1 moments))

(cl:defun moments-new ()
  (cl:let ((instance (cffi:foreign-alloc 'moments)))
    (moments-constructor instance)
    instance))

(cffi:defcfun ("_ZN9CvMomentsC1Ev" moments-constructor) :void (this :pointer))

(cl:defun moments-new ()
  (cl:let ((instance (cffi:foreign-alloc 'moments)))
    (moments-constructor instance)
    instance))

(cffi:defcfun ("_ZN15CvMemStoragePosaSERKS_" mem-storage-pos-operator-=) mem-storage-pos (this :pointer)
                                                                                         (arg1 mem-storage-pos))

(cffi:defcfun ("_ZN15CvMemStoragePosC1ERKS_" mem-storage-pos-constructor) :void (this :pointer)
                                                                                (arg1 mem-storage-pos))

(cl:defun mem-storage-pos-new ()
  (cl:let ((instance (cffi:foreign-alloc 'mem-storage-pos)))
    (mem-storage-pos-constructor instance)
    instance))

(cffi:defcfun ("_ZN15CvMemStoragePosC1Ev" mem-storage-pos-constructor) :void (this :pointer))

(cl:defun mem-storage-pos-new ()
  (cl:let ((instance (cffi:foreign-alloc 'mem-storage-pos)))
    (mem-storage-pos-constructor instance)
    instance))

(cffi:defcfun ("_ZN7_IplROIaSERKS_" _-ipl-roi-operator-=) _-ipl-roi (this :pointer)
                                                                    (arg1 _-ipl-roi))

(cffi:defcfun ("_ZN7_IplROIC1ERKS_" _-ipl-roi-constructor) :void (this :pointer)
                                                                 (arg1 _-ipl-roi))

(cl:defun _-ipl-roi-new ()
  (cl:let ((instance (cffi:foreign-alloc '_-ipl-roi)))
    (_-ipl-roi-constructor instance)
    instance))

(cffi:defcfun ("_ZN7_IplROIC1Ev" _-ipl-roi-constructor) :void (this :pointer))

(cl:defun _-ipl-roi-new ()
  (cl:let ((instance (cffi:foreign-alloc '_-ipl-roi)))
    (_-ipl-roi-constructor instance)
    instance))

(cffi:defcfun ("_ZN12CvQuadEdge2DaSERKS_" quad-edge-2d-operator-=) quad-edge-2d (this :pointer)
                                                                                (arg1 quad-edge-2d))

(cffi:defcfun ("_ZN12CvQuadEdge2DC1ERKS_" quad-edge-2d-constructor) :void (this :pointer)
                                                                          (arg1 quad-edge-2d))

(cl:defun quad-edge-2d-new ()
  (cl:let ((instance (cffi:foreign-alloc 'quad-edge-2d)))
    (quad-edge-2d-constructor instance)
    instance))

(cffi:defcfun ("_ZN12CvQuadEdge2DC1Ev" quad-edge-2d-constructor) :void (this :pointer))

(cl:defun quad-edge-2d-new ()
  (cl:let ((instance (cffi:foreign-alloc 'quad-edge-2d)))
    (quad-edge-2d-constructor instance)
    instance))

(cffi:defcfun ("_ZN19CvSparseMatIteratoraSERKS_" sparse-mat-iterator-operator-=) sparse-mat-iterator (this :pointer)
                                                                                                     (arg1 sparse-mat-iterator))

(cffi:defcfun ("_ZN19CvSparseMatIteratorC1ERKS_" sparse-mat-iterator-constructor) :void (this :pointer)
                                                                                        (arg1 sparse-mat-iterator))

(cl:defun sparse-mat-iterator-new ()
  (cl:let ((instance (cffi:foreign-alloc 'sparse-mat-iterator)))
    (sparse-mat-iterator-constructor instance)
    instance))

(cffi:defcfun ("_ZN19CvSparseMatIteratorC1Ev" sparse-mat-iterator-constructor) :void (this :pointer))

(cl:defun sparse-mat-iterator-new ()
  (cl:let ((instance (cffi:foreign-alloc 'sparse-mat-iterator)))
    (sparse-mat-iterator-constructor instance)
    instance))

(cffi:defcfun ("_ZN12CvPoint3D32faSERKS_" point-3d-32f-operator-=) point-3d-32f (this :pointer)
                                                                                (arg1 point-3d-32f))

(cffi:defcfun ("_ZN12CvPoint3D32fC1ERKS_" point-3d-32f-constructor) :void (this :pointer)
                                                                          (arg1 point-3d-32f))

(cl:defun point-3d-32f-new ()
  (cl:let ((instance (cffi:foreign-alloc 'point-3d-32f)))
    (point-3d-32f-constructor instance)
    instance))

(cffi:defcfun ("_ZN12CvPoint3D32fC1Ev" point-3d-32f-constructor) :void (this :pointer))

(cl:defun point-3d-32f-new ()
  (cl:let ((instance (cffi:foreign-alloc 'point-3d-32f)))
    (point-3d-32f-constructor instance)
    instance))

(cffi:defcfun ("_ZN6CvSizeaSERKS_" size-operator-=) size (this :pointer)
                                                         (arg1 size))

(cffi:defcfun ("_ZN6CvSizeC1ERKS_" .-28-constructor) :void (this :pointer)
                                                           (arg1 size))

(cl:defun .-28-new ()
  (cl:let ((instance (cffi:foreign-alloc 'size)))
    (.-28-constructor instance)
    instance))

(cffi:defcfun ("_ZN6CvSizeC1Ev" .-28-constructor) :void (this :pointer))

(cl:defun .-28-new ()
  (cl:let ((instance (cffi:foreign-alloc 'size)))
    (.-28-constructor instance)
    instance))

(cffi:defcfun ("_ZN18CvTreeNodeIteratoraSERKS_" tree-node-iterator-operator-=) tree-node-iterator (this :pointer)
                                                                                                  (arg1 tree-node-iterator))

(cffi:defcfun ("_ZN18CvTreeNodeIteratorC1ERKS_" tree-node-iterator-constructor) :void (this :pointer)
                                                                                      (arg1 tree-node-iterator))

(cl:defun tree-node-iterator-new ()
  (cl:let ((instance (cffi:foreign-alloc 'tree-node-iterator)))
    (tree-node-iterator-constructor instance)
    instance))

(cffi:defcfun ("_ZN18CvTreeNodeIteratorC1Ev" tree-node-iterator-constructor) :void (this :pointer))

(cl:defun tree-node-iterator-new ()
  (cl:let ((instance (cffi:foreign-alloc 'tree-node-iterator)))
    (tree-node-iterator-constructor instance)
    instance))

(cffi:defcfun ("_ZN11CvSeqWriteraSERKS_" seq-writer-operator-=) seq-writer (this :pointer)
                                                                           (arg1 seq-writer))

(cffi:defcfun ("_ZN11CvSeqWriterC1ERKS_" seq-writer-constructor) :void (this :pointer)
                                                                       (arg1 seq-writer))

(cl:defun seq-writer-new ()
  (cl:let ((instance (cffi:foreign-alloc 'seq-writer)))
    (seq-writer-constructor instance)
    instance))

(cffi:defcfun ("_ZN11CvSeqWriterC1Ev" seq-writer-constructor) :void (this :pointer))

(cl:defun seq-writer-new ()
  (cl:let ((instance (cffi:foreign-alloc 'seq-writer)))
    (seq-writer-constructor instance)
    instance))

(cffi:defcfun ("_ZN10CvFileNodeaSERKS_" file-node-operator-=) file-node (this :pointer)
                                                                        (arg1 file-node))

(cffi:defcfun ("_ZN10CvFileNodeC1ERKS_" file-node-constructor) :void (this :pointer)
                                                                     (arg1 file-node))

(cl:defun file-node-new ()
  (cl:let ((instance (cffi:foreign-alloc 'file-node)))
    (file-node-constructor instance)
    instance))

(cffi:defcfun ("_ZN10CvFileNodeC1Ev" file-node-constructor) :void (this :pointer))

(cl:defun file-node-new ()
  (cl:let ((instance (cffi:foreign-alloc 'file-node)))
    (file-node-constructor instance)
    instance))

(cffi:defcfun ("_ZN7CvBox2DaSERKS_" box-2d-operator-=) box-2d (this :pointer)
                                                              (arg1 box-2d))

(cffi:defcfun ("_ZN7CvBox2DC1ERKS_" box-2d-constructor) :void (this :pointer)
                                                              (arg1 box-2d))

(cl:defun box-2d-new ()
  (cl:let ((instance (cffi:foreign-alloc 'box-2d)))
    (box-2d-constructor instance)
    instance))

(cffi:defcfun ("_ZN7CvBox2DC1Ev" box-2d-constructor) :void (this :pointer))

(cl:defun box-2d-new ()
  (cl:let ((instance (cffi:foreign-alloc 'box-2d)))
    (box-2d-constructor instance)
    instance))

(cffi:defcfun ("_ZN14CvGraphScanneraSERKS_" graph-scanner-operator-=) graph-scanner (this :pointer)
                                                                                    (arg1 graph-scanner))

(cffi:defcfun ("_ZN14CvGraphScannerC1ERKS_" graph-scanner-constructor) :void (this :pointer)
                                                                             (arg1 graph-scanner))

(cl:defun graph-scanner-new ()
  (cl:let ((instance (cffi:foreign-alloc 'graph-scanner)))
    (graph-scanner-constructor instance)
    instance))

(cffi:defcfun ("_ZN14CvGraphScannerC1Ev" graph-scanner-constructor) :void (this :pointer))

(cl:defun graph-scanner-new ()
  (cl:let ((instance (cffi:foreign-alloc 'graph-scanner)))
    (graph-scanner-constructor instance)
    instance))

(cffi:defcfun ("_ZN12CvPoint2D32faSERKS_" point-2d-32f-operator-=) point-2d-32f (this :pointer)
                                                                                (arg1 point-2d-32f))

(cffi:defcfun ("_ZN12CvPoint2D32fC1ERKS_" point-2d-32f-constructor) :void (this :pointer)
                                                                          (arg1 point-2d-32f))

(cl:defun point-2d-32f-new ()
  (cl:let ((instance (cffi:foreign-alloc 'point-2d-32f)))
    (point-2d-32f-constructor instance)
    instance))

(cffi:defcfun ("_ZN12CvPoint2D32fC1Ev" point-2d-32f-constructor) :void (this :pointer))

(cl:defun point-2d-32f-new ()
  (cl:let ((instance (cffi:foreign-alloc 'point-2d-32f)))
    (point-2d-32f-constructor instance)
    instance))

(cffi:defcfun ("_ZN15CvChainPtReaderaSERKS_" chain-pt-reader-operator-=) chain-pt-reader (this :pointer)
                                                                                         (arg1 chain-pt-reader))

(cffi:defcfun ("_ZN15CvChainPtReaderC1ERKS_" chain-pt-reader-constructor) :void (this :pointer)
                                                                                (arg1 chain-pt-reader))

(cl:defun chain-pt-reader-new ()
  (cl:let ((instance (cffi:foreign-alloc 'chain-pt-reader)))
    (chain-pt-reader-constructor instance)
    instance))

(cffi:defcfun ("_ZN15CvChainPtReaderC1Ev" chain-pt-reader-constructor) :void (this :pointer))

(cl:defun chain-pt-reader-new ()
  (cl:let ((instance (cffi:foreign-alloc 'chain-pt-reader)))
    (chain-pt-reader-constructor instance)
    instance))

(cffi:defcfun ("_ZN9_IplImageaSERKS_" _-ipl-image-operator-=) _-ipl-image (this :pointer)
                                                                          (arg1 _-ipl-image))

(cffi:defcfun ("_ZN9_IplImageC1ERKS_" _-ipl-image-constructor) :void (this :pointer)
                                                                     (arg1 _-ipl-image))

(cl:defun _-ipl-image-new ()
  (cl:let ((instance (cffi:foreign-alloc '_-ipl-image)))
    (_-ipl-image-constructor instance)
    instance))

(cffi:defcfun ("_ZN9_IplImageC1Ev" _-ipl-image-constructor) :void (this :pointer))

(cl:defun _-ipl-image-new ()
  (cl:let ((instance (cffi:foreign-alloc '_-ipl-image)))
    (_-ipl-image-constructor instance)
    instance))

(cffi:defcfun ("_ZN12CvModuleInfoaSERKS_" module-info-operator-=) module-info (this :pointer)
                                                                              (arg1 module-info))

(cffi:defcfun ("_ZN12CvModuleInfoC1ERKS_" module-info-constructor) :void (this :pointer)
                                                                         (arg1 module-info))

(cl:defun module-info-new ()
  (cl:let ((instance (cffi:foreign-alloc 'module-info)))
    (module-info-constructor instance)
    instance))

(cffi:defcfun ("_ZN12CvModuleInfoC1Ev" module-info-constructor) :void (this :pointer))

(cl:defun module-info-new ()
  (cl:let ((instance (cffi:foreign-alloc 'module-info)))
    (module-info-constructor instance)
    instance))

(cffi:defcfun ("_ZN15CvConnectedCompaSERKS_" connected-comp-operator-=) connected-comp (this :pointer)
                                                                                       (arg1 connected-comp))

(cffi:defcfun ("_ZN15CvConnectedCompC1ERKS_" connected-comp-constructor) :void (this :pointer)
                                                                               (arg1 connected-comp))

(cl:defun connected-comp-new ()
  (cl:let ((instance (cffi:foreign-alloc 'connected-comp)))
    (connected-comp-constructor instance)
    instance))

(cffi:defcfun ("_ZN15CvConnectedCompC1Ev" connected-comp-constructor) :void (this :pointer))

(cl:defun connected-comp-new ()
  (cl:let ((instance (cffi:foreign-alloc 'connected-comp)))
    (connected-comp-constructor instance)
    instance))

(cffi:defcfun ("_ZN7CvPointaSERKS_" point-operator-=) point (this :pointer)
                                                            (arg1 point))

(cffi:defcfun ("_ZN7CvPointC1ERKS_" point-constructor) :void (this :pointer)
                                                             (arg1 point))

(cl:defun point-new ()
  (cl:let ((instance (cffi:foreign-alloc 'point)))
    (point-constructor instance)
    instance))

(cffi:defcfun ("_ZN7CvPointC1Ev" point-constructor) :void (this :pointer))

(cl:defun point-new ()
  (cl:let ((instance (cffi:foreign-alloc 'point)))
    (point-constructor instance)
    instance))

(cffi:defcfun ("_ZN16CvPluginFuncInfoaSERKS_" plugin-func-info-operator-=) plugin-func-info (this :pointer)
                                                                                            (arg1 plugin-func-info))

(cffi:defcfun ("_ZN16CvPluginFuncInfoC1ERKS_" plugin-func-info-constructor) :void (this :pointer)
                                                                                  (arg1 plugin-func-info))

(cl:defun plugin-func-info-new ()
  (cl:let ((instance (cffi:foreign-alloc 'plugin-func-info)))
    (plugin-func-info-constructor instance)
    instance))

(cffi:defcfun ("_ZN16CvPluginFuncInfoC1Ev" plugin-func-info-constructor) :void (this :pointer))

(cl:defun plugin-func-info-new ()
  (cl:let ((instance (cffi:foreign-alloc 'plugin-func-info)))
    (plugin-func-info-constructor instance)
    instance))

(cffi:defcfun ("_ZN12CvSparseNodeaSERKS_" sparse-node-operator-=) sparse-node (this :pointer)
                                                                              (arg1 sparse-node))

(cffi:defcfun ("_ZN12CvSparseNodeC1ERKS_" sparse-node-constructor) :void (this :pointer)
                                                                         (arg1 sparse-node))

(cl:defun sparse-node-new ()
  (cl:let ((instance (cffi:foreign-alloc 'sparse-node)))
    (sparse-node-constructor instance)
    instance))

(cffi:defcfun ("_ZN12CvSparseNodeC1Ev" sparse-node-constructor) :void (this :pointer))

(cl:defun sparse-node-new ()
  (cl:let ((instance (cffi:foreign-alloc 'sparse-node)))
    (sparse-node-constructor instance)
    instance))

(cffi:defcfun ("_ZN9CvSetElemaSERKS_" set-elem-operator-=) set-elem (this :pointer)
                                                                    (arg1 set-elem))

(cffi:defcfun ("_ZN9CvSetElemC1ERKS_" set-elem-constructor) :void (this :pointer)
                                                                  (arg1 set-elem))

(cl:defun set-elem-new ()
  (cl:let ((instance (cffi:foreign-alloc 'set-elem)))
    (set-elem-constructor instance)
    instance))

(cffi:defcfun ("_ZN9CvSetElemC1Ev" set-elem-constructor) :void (this :pointer))

(cl:defun set-elem-new ()
  (cl:let ((instance (cffi:foreign-alloc 'set-elem)))
    (set-elem-constructor instance)
    instance))

(cffi:defcfun ("_ZN7CvMatNDaSERKS_" mat-nd-operator-=) mat-nd (this :pointer)
                                                              (arg1 mat-nd))

(cffi:defcfun ("_ZN7CvMatNDC1ERKS_" mat-nd-constructor) :void (this :pointer)
                                                              (arg1 mat-nd))

(cl:defun mat-nd-new ()
  (cl:let ((instance (cffi:foreign-alloc 'mat-nd)))
    (mat-nd-constructor instance)
    instance))

(cffi:defcfun ("_ZN7CvMatNDC1Ev" mat-nd-constructor) :void (this :pointer))

(cl:defun mat-nd-new ()
  (cl:let ((instance (cffi:foreign-alloc 'mat-nd)))
    (mat-nd-constructor instance)
    instance))

(cffi:defcfun ("_ZN6CvFontaSERKS_" font-operator-=) font (this :pointer)
                                                         (arg1 font))

(cffi:defcfun ("_ZN6CvFontC1ERKS_" font-constructor) :void (this :pointer)
                                                           (arg1 font))

(cl:defun font-new ()
  (cl:let ((instance (cffi:foreign-alloc 'font)))
    (font-constructor instance)
    instance))

(cffi:defcfun ("_ZN6CvFontC1Ev" font-constructor) :void (this :pointer))

(cl:defun font-new ()
  (cl:let ((instance (cffi:foreign-alloc 'font)))
    (font-constructor instance)
    instance))

(cffi:defcfun ("_ZN14CvLineIteratoraSERKS_" line-iterator-operator-=) line-iterator (this :pointer)
                                                                                    (arg1 line-iterator))

(cffi:defcfun ("_ZN14CvLineIteratorC1ERKS_" line-iterator-constructor) :void (this :pointer)
                                                                             (arg1 line-iterator))

(cl:defun line-iterator-new ()
  (cl:let ((instance (cffi:foreign-alloc 'line-iterator)))
    (line-iterator-constructor instance)
    instance))

(cffi:defcfun ("_ZN14CvLineIteratorC1Ev" line-iterator-constructor) :void (this :pointer))

(cl:defun line-iterator-new ()
  (cl:let ((instance (cffi:foreign-alloc 'line-iterator)))
    (line-iterator-constructor instance)
    instance))

(cffi:defcfun ("_ZN7CvChainaSERKS_" chain-operator-=) chain (this :pointer)
                                                            (arg1 chain))

(cffi:defcfun ("_ZN7CvChainC1ERKS_" chain-constructor) :void (this :pointer)
                                                             (arg1 chain))

(cl:defun chain-new ()
  (cl:let ((instance (cffi:foreign-alloc 'chain)))
    (chain-constructor instance)
    instance))

(cffi:defcfun ("_ZN7CvChainC1Ev" chain-constructor) :void (this :pointer))

(cl:defun chain-new ()
  (cl:let ((instance (cffi:foreign-alloc 'chain)))
    (chain-constructor instance)
    instance))

(cffi:defcfun ("_ZN16CvNArrayIteratoraSERKS_" n-array-iterator-operator-=) n-array-iterator (this :pointer)
                                                                                            (arg1 n-array-iterator))

(cffi:defcfun ("_ZN16CvNArrayIteratorC1ERKS_" n-array-iterator-constructor) :void (this :pointer)
                                                                                  (arg1 n-array-iterator))

(cl:defun n-array-iterator-new ()
  (cl:let ((instance (cffi:foreign-alloc 'n-array-iterator)))
    (n-array-iterator-constructor instance)
    instance))

(cffi:defcfun ("_ZN16CvNArrayIteratorC1Ev" n-array-iterator-constructor) :void (this :pointer))

(cl:defun n-array-iterator-new ()
  (cl:let ((instance (cffi:foreign-alloc 'n-array-iterator)))
    (n-array-iterator-constructor instance)
    instance))

(cffi:defcfun ("_ZN6CvRectaSERKS_" rect-operator-=) rect (this :pointer)
                                                         (arg1 rect))

(cffi:defcfun ("_ZN6CvRectC1ERKS_" rect-constructor) :void (this :pointer)
                                                           (arg1 rect))

(cl:defun rect-new ()
  (cl:let ((instance (cffi:foreign-alloc 'rect)))
    (rect-constructor instance)
    instance))

(cffi:defcfun ("_ZN6CvRectC1Ev" rect-constructor) :void (this :pointer))

(cl:defun rect-new ()
  (cl:let ((instance (cffi:foreign-alloc 'rect)))
    (rect-constructor instance)
    instance))

(cffi:defcfun ("_ZN10CvSeqBlockaSERKS_" seq-block-operator-=) seq-block (this :pointer)
                                                                        (arg1 seq-block))

(cffi:defcfun ("_ZN10CvSeqBlockC1ERKS_" seq-block-constructor) :void (this :pointer)
                                                                     (arg1 seq-block))

(cl:defun seq-block-new ()
  (cl:let ((instance (cffi:foreign-alloc 'seq-block)))
    (seq-block-constructor instance)
    instance))

(cffi:defcfun ("_ZN10CvSeqBlockC1Ev" seq-block-constructor) :void (this :pointer))

(cl:defun seq-block-new ()
  (cl:let ((instance (cffi:foreign-alloc 'seq-block)))
    (seq-block-constructor instance)
    instance))

(cffi:defcfun ("_ZN15CvSubdiv2DPointaSERKS_" subdiv-2d-point-operator-=) subdiv-2d-point (this :pointer)
                                                                                         (arg1 subdiv-2d-point))

(cffi:defcfun ("_ZN15CvSubdiv2DPointC1ERKS_" subdiv-2d-point-constructor) :void (this :pointer)
                                                                                (arg1 subdiv-2d-point))

(cl:defun subdiv-2d-point-new ()
  (cl:let ((instance (cffi:foreign-alloc 'subdiv-2d-point)))
    (subdiv-2d-point-constructor instance)
    instance))

(cffi:defcfun ("_ZN15CvSubdiv2DPointC1Ev" subdiv-2d-point-constructor) :void (this :pointer))

(cl:defun subdiv-2d-point-new ()
  (cl:let ((instance (cffi:foreign-alloc 'subdiv-2d-point)))
    (subdiv-2d-point-constructor instance)
    instance))

(cffi:defcfun ("_ZN11CvGraphEdgeaSERKS_" graph-edge-operator-=) graph-edge (this :pointer)
                                                                           (arg1 graph-edge))

(cffi:defcfun ("_ZN11CvGraphEdgeC1ERKS_" graph-edge-constructor) :void (this :pointer)
                                                                       (arg1 graph-edge))

(cl:defun graph-edge-new ()
  (cl:let ((instance (cffi:foreign-alloc 'graph-edge)))
    (graph-edge-constructor instance)
    instance))

(cffi:defcfun ("_ZN11CvGraphEdgeC1Ev" graph-edge-constructor) :void (this :pointer))

(cl:defun graph-edge-new ()
  (cl:let ((instance (cffi:foreign-alloc 'graph-edge)))
    (graph-edge-constructor instance)
    instance))

(cffi:defcfun ("_ZN11CvSize2D32faSERKS_" size-2d-32f-operator-=) size-2d-32f (this :pointer)
                                                                             (arg1 size-2d-32f))

(cffi:defcfun ("_ZN11CvSize2D32fC1ERKS_" size-2d-32f-constructor) :void (this :pointer)
                                                                        (arg1 size-2d-32f))

(cl:defun size-2d-32f-new ()
  (cl:let ((instance (cffi:foreign-alloc 'size-2d-32f)))
    (size-2d-32f-constructor instance)
    instance))

(cffi:defcfun ("_ZN11CvSize2D32fC1Ev" size-2d-32f-constructor) :void (this :pointer))

(cl:defun size-2d-32f-new ()
  (cl:let ((instance (cffi:foreign-alloc 'size-2d-32f)))
    (size-2d-32f-constructor instance)
    instance))

(cffi:defcfun ("_ZN12CvGraphVtx2DaSERKS_" graph-vtx-2d-operator-=) graph-vtx-2d (this :pointer)
                                                                                (arg1 graph-vtx-2d))

(cffi:defcfun ("_ZN12CvGraphVtx2DC1ERKS_" graph-vtx-2d-constructor) :void (this :pointer)
                                                                          (arg1 graph-vtx-2d))

(cl:defun graph-vtx-2d-new ()
  (cl:let ((instance (cffi:foreign-alloc 'graph-vtx-2d)))
    (graph-vtx-2d-constructor instance)
    instance))

(cffi:defcfun ("_ZN12CvGraphVtx2DC1Ev" graph-vtx-2d-constructor) :void (this :pointer))

(cl:defun graph-vtx-2d-new ()
  (cl:let ((instance (cffi:foreign-alloc 'graph-vtx-2d)))
    (graph-vtx-2d-constructor instance)
    instance))

(cffi:defcfun ("_ZN16CvStringHashNodeaSERKS_" string-hash-node-operator-=) string-hash-node (this :pointer)
                                                                                            (arg1 string-hash-node))

(cffi:defcfun ("_ZN16CvStringHashNodeC1ERKS_" string-hash-node-constructor) :void (this :pointer)
                                                                                  (arg1 string-hash-node))

(cl:defun string-hash-node-new ()
  (cl:let ((instance (cffi:foreign-alloc 'string-hash-node)))
    (string-hash-node-constructor instance)
    instance))

(cffi:defcfun ("_ZN16CvStringHashNodeC1Ev" string-hash-node-constructor) :void (this :pointer))

(cl:defun string-hash-node-new ()
  (cl:let ((instance (cffi:foreign-alloc 'string-hash-node)))
    (string-hash-node-constructor instance)
    instance))

(cffi:defcfun ("_ZN8CvScalaraSERKS_" scalar-operator-=) scalar (this :pointer)
                                                               (arg1 scalar))

(cffi:defcfun ("_ZN8CvScalarC1ERKS_" scalar-constructor) :void (this :pointer)
                                                               (arg1 scalar))

(cl:defun scalar-new ()
  (cl:let ((instance (cffi:foreign-alloc 'scalar)))
    (scalar-constructor instance)
    instance))

(cffi:defcfun ("_ZN8CvScalarC1Ev" scalar-constructor) :void (this :pointer))

(cl:defun scalar-new ()
  (cl:let ((instance (cffi:foreign-alloc 'scalar)))
    (scalar-constructor instance)
    instance))

(cffi:defcfun ("_ZN5CvSeqaSERKS_" seq-operator-=) seq (this :pointer) (arg1 seq))

(cffi:defcfun ("_ZN5CvSeqC1ERKS_" seq-constructor) :void (this :pointer)
                                                         (arg1 seq))

(cl:defun seq-new ()
  (cl:let ((instance (cffi:foreign-alloc 'seq)))
    (seq-constructor instance)
    instance))

(cffi:defcfun ("_ZN5CvSeqC1Ev" seq-constructor) :void (this :pointer))

(cl:defun seq-new ()
  (cl:let ((instance (cffi:foreign-alloc 'seq)))
    (seq-constructor instance)
    instance))

(cffi:defcfun ("_ZN5CvSetaSERKS_" set-operator-=) set (this :pointer) (arg1 set))

(cffi:defcfun ("_ZN5CvSetC1ERKS_" set-constructor) :void (this :pointer)
                                                         (arg1 set))

(cl:defun set-new ()
  (cl:let ((instance (cffi:foreign-alloc 'set)))
    (set-constructor instance)
    instance))

(cffi:defcfun ("_ZN5CvSetC1Ev" set-constructor) :void (this :pointer))

(cl:defun set-new ()
  (cl:let ((instance (cffi:foreign-alloc 'set)))
    (set-constructor instance)
    instance))

(cffi:defcvar ("_ZN8CvModule5firstE" first) :pointer)

(cffi:defcvar ("_ZN8CvModule4lastE" last) :pointer)

(cffi:defcfun ("_ZN8CvModuleaSERKS_" module-operator-=) module (this :pointer)
                                                               (arg1 module))

(cffi:defcfun ("_ZN8CvModuleC1ERKS_" module-constructor) :void (this :pointer)
                                                               (arg1 module))

(cl:defun module-new ()
  (cl:let ((instance (cffi:foreign-alloc 'module)))
    (module-constructor instance)
    instance))

(cffi:defcfun ("_ZN8CvModuleC1EP12CvModuleInfo" module-constructor) :void (this :pointer)
                                                                          (_info :pointer))

(cl:defun module-new ()
  (cl:let ((instance (cffi:foreign-alloc 'module)))
    (module-constructor instance)
    instance))

(cffi:defcfun ("_ZN11CvSparseMataSERKS_" sparse-mat-operator-=) sparse-mat (this :pointer)
                                                                           (arg1 sparse-mat))

(cffi:defcfun ("_ZN11CvSparseMatC1ERKS_" sparse-mat-constructor) :void (this :pointer)
                                                                       (arg1 sparse-mat))

(cl:defun sparse-mat-new ()
  (cl:let ((instance (cffi:foreign-alloc 'sparse-mat)))
    (sparse-mat-constructor instance)
    instance))

(cffi:defcfun ("_ZN11CvSparseMatC1Ev" sparse-mat-constructor) :void (this :pointer))

(cl:defun sparse-mat-new ()
  (cl:let ((instance (cffi:foreign-alloc 'sparse-mat)))
    (sparse-mat-constructor instance)
    instance))

(cffi:defcfun ("_ZN11CvSeqReaderaSERKS_" seq-reader-operator-=) seq-reader (this :pointer)
                                                                           (arg1 seq-reader))

(cffi:defcfun ("_ZN11CvSeqReaderC1ERKS_" seq-reader-constructor) :void (this :pointer)
                                                                       (arg1 seq-reader))

(cl:defun seq-reader-new ()
  (cl:let ((instance (cffi:foreign-alloc 'seq-reader)))
    (seq-reader-constructor instance)
    instance))

(cffi:defcfun ("_ZN11CvSeqReaderC1Ev" seq-reader-constructor) :void (this :pointer))

(cl:defun seq-reader-new ()
  (cl:let ((instance (cffi:foreign-alloc 'seq-reader)))
    (seq-reader-constructor instance)
    instance))

(cffi:defcfun ("_ZN7CvGraphaSERKS_" graph-operator-=) graph (this :pointer)
                                                            (arg1 graph))

(cffi:defcfun ("_ZN7CvGraphC1ERKS_" graph-constructor) :void (this :pointer)
                                                             (arg1 graph))

(cl:defun graph-new ()
  (cl:let ((instance (cffi:foreign-alloc 'graph)))
    (graph-constructor instance)
    instance))

(cffi:defcfun ("_ZN7CvGraphC1Ev" graph-constructor) :void (this :pointer))

(cl:defun graph-new ()
  (cl:let ((instance (cffi:foreign-alloc 'graph)))
    (graph-constructor instance)
    instance))

(cffi:defcfun ("_ZN5CvMat4._23aSERKS0_" -operator-=) ;;; Skipping anonymous type #<UNION <anonymous> {1009086681}>
 (this :pointer)
 (arg1 ;;; Skipping anonymous type #<UNION <anonymous> {1009086681}>
))

(cffi:defcfun ("_ZN5CvMat4._23C1ERKS0_" -constructor) :void (this :pointer)
                                                            (arg1 ;;; Skipping anonymous type #<UNION
                                                                                                <anonymous>
                                                                                                {1009086681}>
))

(cl:defun -new ()
  (cl:let ((instance (cffi:foreign-alloc 'nil)))
    (-constructor instance)
    instance))

(cffi:defcfun ("_ZN5CvMat4._23C1Ev" -constructor) :void (this :pointer))

(cl:defun -new ()
  (cl:let ((instance (cffi:foreign-alloc 'nil)))
    (-constructor instance)
    instance))

(cffi:defcfun ("_ZN10CvFileNode4._29aSERKS0_" -operator-=) ;;; Skipping anonymous type #<UNION <anonymous> {1009087901}>
 (this :pointer)
 (arg1 ;;; Skipping anonymous type #<UNION <anonymous> {1009087901}>
))

(cffi:defcfun ("_ZN10CvFileNode4._29C1ERKS0_" -constructor) :void (this :pointer)
                                                                  (arg1 ;;; Skipping anonymous type #<UNION
                                                                                                      <anonymous>
                                                                                                      {1009087901}>
))

(cl:defun -new ()
  (cl:let ((instance (cffi:foreign-alloc 'nil)))
    (-constructor instance)
    instance))

(cffi:defcfun ("_ZN10CvFileNode4._29C1Ev" -constructor) :void (this :pointer))

(cl:defun -new ()
  (cl:let ((instance (cffi:foreign-alloc 'nil)))
    (-constructor instance)
    instance))

(cffi:defcfun ("_ZN7CvMatND4._26aSERKS0_" -operator-=) ;;; Skipping anonymous type #<UNION <anonymous> {100606B041}>
 (this :pointer)
 (arg1 ;;; Skipping anonymous type #<UNION <anonymous> {100606B041}>
))

(cffi:defcfun ("_ZN7CvMatND4._26C1ERKS0_" -constructor) :void (this :pointer)
                                                              (arg1 ;;; Skipping anonymous type #<UNION
                                                                                                  <anonymous>
                                                                                                  {100606B041}>
))

(cl:defun -new ()
  (cl:let ((instance (cffi:foreign-alloc 'nil)))
    (-constructor instance)
    instance))

(cffi:defcfun ("_ZN7CvMatND4._26C1Ev" -constructor) :void (this :pointer))

(cl:defun -new ()
  (cl:let ((instance (cffi:foreign-alloc 'nil)))
    (-constructor instance)
    instance))

(cffi:defcfun ("_ZN7CvMatND4._27aSERKS0_" -operator-=) ;;; Skipping anonymous type #<STRUCT <anonymous> {100606B061}>
 (this :pointer)
 (arg1 ;;; Skipping anonymous type #<STRUCT <anonymous> {100606B061}>
))

(cffi:defcfun ("_ZN7CvMatND4._27C1ERKS0_" -constructor) :void (this :pointer)
                                                              (arg1 ;;; Skipping anonymous type #<STRUCT
                                                                                                  <anonymous>
                                                                                                  {100606B061}>
))

(cl:defun -new ()
  (cl:let ((instance (cffi:foreign-alloc 'nil)))
    (-constructor instance)
    instance))

(cffi:defcfun ("_ZN7CvMatND4._27C1Ev" -constructor) :void (this :pointer))

(cl:defun -new ()
  (cl:let ((instance (cffi:foreign-alloc 'nil)))
    (-constructor instance)
    instance))

(in-package #:cl-opencv-test)

(defun display (filename)
  "Open the image FILENAME and show it in a window."
  (let ((image (load-image filename 1)))
    (named-window "Display" 1)
    (show-image "Display" image)
    (loop while
         (not (= (wait-key 0) 27)))
    (release-image image)
    (destroy-window "Display")))

(defun show-camera (&optional (camera-index 0))
  "Show the output from the camera CAMERA-INDEX."
  (let ((capture (create-camera-capture camera-index))
        (window-name "Camera"))
    (set-capture-property capture +cap-prop-frame-width+ 640)
    (set-capture-property capture +cap-prop-frame-height+ 480)
    (named-window window-name)
    (do ((frame (query-frame capture)
                (query-frame capture)))
        ((= 27 (wait-key 33)) nil)
      (show-image window-name frame))
    (destroy-window window-name)
    (release-capture capture)))

(defun show-camera-threshold (&optional (camera-index 0)
                              (width 640) (height 480))
  "Show the camera output and a thresholded version in a single window."
  (let* ((img-size (make-cv-size :width width :height height))
         (capture (create-camera-capture camera-index))
         (window-name "Camera/Threshold")
         (grayscale (create-image img-size +ipl-depth-8u+ 1))
         (threshold (create-image img-size +ipl-depth-8u+ 1))
         (threshold3 (create-image img-size +ipl-depth-8u+ 3))
         (window (create-image (make-cv-size
                                          :width (* 2 (cv-size-width img-size))
                                          :height (cv-size-height img-size))
                                         +ipl-depth-8u+ 3))
         (cam-roi (make-cv-rect :x 0 :y 0 :width width :height height))
         (bw-roi (make-cv-rect :x width :y 0 :width width :height height)))
    (set-capture-property capture +cap-prop-frame-width+
                                    (cv-size-width img-size))
    (set-capture-property capture +cap-prop-frame-height+
                                    (cv-size-height img-size))
    (named-window window-name)
    (do ((frame (query-frame capture)
                (query-frame capture)))
        ((= 27 (wait-key 33)) nil)
      (set-image-roi window cam-roi)
      (copy frame window)
      (convert-image frame grayscale)
      (threshold grayscale threshold 128 255 +thresh-binary+)
      (convert-image threshold threshold3)
      (set-image-roi window bw-roi)
      (copy threshold3 window)
      (reset-image-roi window)
      (show-image window-name window))
    (destroy-window window-name)
    (release-image window)
    (release-image threshold3)
    (release-image threshold)
    (release-image grayscale)
    (release-capture capture)))

